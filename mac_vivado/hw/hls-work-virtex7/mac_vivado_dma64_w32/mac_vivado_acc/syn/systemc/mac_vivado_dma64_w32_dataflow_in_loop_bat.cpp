// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mac_vivado_dma64_w32_dataflow_in_loop_bat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mac_vivado_dma64_w32_dataflow_in_loop_bat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mac_vivado_dma64_w32_dataflow_in_loop_bat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<96> mac_vivado_dma64_w32_dataflow_in_loop_bat::ap_const_lv96_0 = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> mac_vivado_dma64_w32_dataflow_in_loop_bat::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> mac_vivado_dma64_w32_dataflow_in_loop_bat::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool mac_vivado_dma64_w32_dataflow_in_loop_bat::ap_const_boolean_1 = true;

mac_vivado_dma64_w32_dataflow_in_loop_bat::mac_vivado_dma64_w32_dataflow_in_loop_bat(sc_module_name name) : sc_module(name), mVcdFile(0) {
    p_inbuff_0_V_U = new mac_vivado_dma64_w32_dataflow_in_loop_bkb("p_inbuff_0_V_U");
    p_inbuff_0_V_U->clk(ap_clk);
    p_inbuff_0_V_U->reset(ap_rst);
    p_inbuff_0_V_U->i_address0(load32_U0_p_inbuff_0_V_address0);
    p_inbuff_0_V_U->i_ce0(load32_U0_p_inbuff_0_V_ce0);
    p_inbuff_0_V_U->i_we0(load32_U0_p_inbuff_0_V_we0);
    p_inbuff_0_V_U->i_d0(load32_U0_p_inbuff_0_V_d0);
    p_inbuff_0_V_U->i_q0(p_inbuff_0_V_i_q0);
    p_inbuff_0_V_U->t_address0(compute_U0_p_inbuff_0_V_address0);
    p_inbuff_0_V_U->t_ce0(compute_U0_p_inbuff_0_V_ce0);
    p_inbuff_0_V_U->t_we0(ap_var_for_const0);
    p_inbuff_0_V_U->t_d0(ap_var_for_const1);
    p_inbuff_0_V_U->t_q0(p_inbuff_0_V_t_q0);
    p_inbuff_0_V_U->i_ce(ap_var_for_const2);
    p_inbuff_0_V_U->t_ce(ap_var_for_const2);
    p_inbuff_0_V_U->i_full_n(p_inbuff_0_V_i_full_n);
    p_inbuff_0_V_U->i_write(ap_channel_done_p_inbuff_0_V);
    p_inbuff_0_V_U->t_empty_n(p_inbuff_0_V_t_empty_n);
    p_inbuff_0_V_U->t_read(compute_U0_ap_ready);
    p_inbuff_1_V_U = new mac_vivado_dma64_w32_dataflow_in_loop_bkb("p_inbuff_1_V_U");
    p_inbuff_1_V_U->clk(ap_clk);
    p_inbuff_1_V_U->reset(ap_rst);
    p_inbuff_1_V_U->i_address0(load32_U0_p_inbuff_1_V_address0);
    p_inbuff_1_V_U->i_ce0(load32_U0_p_inbuff_1_V_ce0);
    p_inbuff_1_V_U->i_we0(load32_U0_p_inbuff_1_V_we0);
    p_inbuff_1_V_U->i_d0(load32_U0_p_inbuff_1_V_d0);
    p_inbuff_1_V_U->i_q0(p_inbuff_1_V_i_q0);
    p_inbuff_1_V_U->t_address0(compute_U0_p_inbuff_1_V_address0);
    p_inbuff_1_V_U->t_ce0(compute_U0_p_inbuff_1_V_ce0);
    p_inbuff_1_V_U->t_we0(ap_var_for_const0);
    p_inbuff_1_V_U->t_d0(ap_var_for_const1);
    p_inbuff_1_V_U->t_q0(p_inbuff_1_V_t_q0);
    p_inbuff_1_V_U->i_ce(ap_var_for_const2);
    p_inbuff_1_V_U->t_ce(ap_var_for_const2);
    p_inbuff_1_V_U->i_full_n(p_inbuff_1_V_i_full_n);
    p_inbuff_1_V_U->i_write(ap_channel_done_p_inbuff_1_V);
    p_inbuff_1_V_U->t_empty_n(p_inbuff_1_V_t_empty_n);
    p_inbuff_1_V_U->t_read(compute_U0_ap_ready);
    p_outbuff_0_V_U = new mac_vivado_dma64_w32_dataflow_in_loop_dEe("p_outbuff_0_V_U");
    p_outbuff_0_V_U->clk(ap_clk);
    p_outbuff_0_V_U->reset(ap_rst);
    p_outbuff_0_V_U->i_address0(compute_U0_p_outbuff_0_V_address0);
    p_outbuff_0_V_U->i_ce0(compute_U0_p_outbuff_0_V_ce0);
    p_outbuff_0_V_U->i_we0(compute_U0_p_outbuff_0_V_we0);
    p_outbuff_0_V_U->i_d0(compute_U0_p_outbuff_0_V_d0);
    p_outbuff_0_V_U->i_q0(p_outbuff_0_V_i_q0);
    p_outbuff_0_V_U->t_address0(store_U0_p_outbuff_0_V_address0);
    p_outbuff_0_V_U->t_ce0(store_U0_p_outbuff_0_V_ce0);
    p_outbuff_0_V_U->t_we0(ap_var_for_const0);
    p_outbuff_0_V_U->t_d0(ap_var_for_const1);
    p_outbuff_0_V_U->t_q0(p_outbuff_0_V_t_q0);
    p_outbuff_0_V_U->i_ce(ap_var_for_const2);
    p_outbuff_0_V_U->t_ce(ap_var_for_const2);
    p_outbuff_0_V_U->i_full_n(p_outbuff_0_V_i_full_n);
    p_outbuff_0_V_U->i_write(ap_channel_done_p_outbuff_0_V);
    p_outbuff_0_V_U->t_empty_n(p_outbuff_0_V_t_empty_n);
    p_outbuff_0_V_U->t_read(store_U0_ap_ready);
    p_outbuff_1_V_U = new mac_vivado_dma64_w32_dataflow_in_loop_dEe("p_outbuff_1_V_U");
    p_outbuff_1_V_U->clk(ap_clk);
    p_outbuff_1_V_U->reset(ap_rst);
    p_outbuff_1_V_U->i_address0(compute_U0_p_outbuff_1_V_address0);
    p_outbuff_1_V_U->i_ce0(compute_U0_p_outbuff_1_V_ce0);
    p_outbuff_1_V_U->i_we0(compute_U0_p_outbuff_1_V_we0);
    p_outbuff_1_V_U->i_d0(compute_U0_p_outbuff_1_V_d0);
    p_outbuff_1_V_U->i_q0(p_outbuff_1_V_i_q0);
    p_outbuff_1_V_U->t_address0(store_U0_p_outbuff_1_V_address0);
    p_outbuff_1_V_U->t_ce0(store_U0_p_outbuff_1_V_ce0);
    p_outbuff_1_V_U->t_we0(ap_var_for_const0);
    p_outbuff_1_V_U->t_d0(ap_var_for_const1);
    p_outbuff_1_V_U->t_q0(p_outbuff_1_V_t_q0);
    p_outbuff_1_V_U->i_ce(ap_var_for_const2);
    p_outbuff_1_V_U->t_ce(ap_var_for_const2);
    p_outbuff_1_V_U->i_full_n(p_outbuff_1_V_i_full_n);
    p_outbuff_1_V_U->i_write(ap_channel_done_p_outbuff_1_V);
    p_outbuff_1_V_U->t_empty_n(p_outbuff_1_V_t_empty_n);
    p_outbuff_1_V_U->t_read(store_U0_ap_ready);
    load32_U0 = new mac_vivado_dma64_w32_load32("load32_U0");
    load32_U0->ap_clk(ap_clk);
    load32_U0->ap_rst(ap_rst);
    load32_U0->ap_start(load32_U0_ap_start);
    load32_U0->ap_done(load32_U0_ap_done);
    load32_U0->ap_continue(load32_U0_ap_continue);
    load32_U0->ap_idle(load32_U0_ap_idle);
    load32_U0->ap_ready(load32_U0_ap_ready);
    load32_U0->p_inbuff_0_V_address0(load32_U0_p_inbuff_0_V_address0);
    load32_U0->p_inbuff_0_V_ce0(load32_U0_p_inbuff_0_V_ce0);
    load32_U0->p_inbuff_0_V_we0(load32_U0_p_inbuff_0_V_we0);
    load32_U0->p_inbuff_0_V_d0(load32_U0_p_inbuff_0_V_d0);
    load32_U0->p_inbuff_1_V_address0(load32_U0_p_inbuff_1_V_address0);
    load32_U0->p_inbuff_1_V_ce0(load32_U0_p_inbuff_1_V_ce0);
    load32_U0->p_inbuff_1_V_we0(load32_U0_p_inbuff_1_V_we0);
    load32_U0->p_inbuff_1_V_d0(load32_U0_p_inbuff_1_V_d0);
    load32_U0->in1_word_V_dout(in1_word_V_dout);
    load32_U0->in1_word_V_empty_n(in1_word_V_empty_n);
    load32_U0->in1_word_V_read(load32_U0_in1_word_V_read);
    load32_U0->mac_vec(conf_info_mac_vec);
    load32_U0->mac_len(conf_info_mac_len);
    load32_U0->load_ctrl(load32_U0_load_ctrl);
    load32_U0->load_ctrl_ap_vld(load32_U0_load_ctrl_ap_vld);
    load32_U0->load_ctrl_ap_ack(load_ctrl_ap_ack);
    load32_U0->chunk(b_0);
    load32_U0->conf_info_mac_n(conf_info_mac_n);
    load32_U0->mac_vec_out_din(load32_U0_mac_vec_out_din);
    load32_U0->mac_vec_out_full_n(conf_info_mac_vec_c_full_n);
    load32_U0->mac_vec_out_write(load32_U0_mac_vec_out_write);
    load32_U0->mac_len_out_din(load32_U0_mac_len_out_din);
    load32_U0->mac_len_out_full_n(conf_info_mac_len_c_full_n);
    load32_U0->mac_len_out_write(load32_U0_mac_len_out_write);
    load32_U0->chunk_out_din(load32_U0_chunk_out_din);
    load32_U0->chunk_out_full_n(b_0_c_full_n);
    load32_U0->chunk_out_write(load32_U0_chunk_out_write);
    load32_U0->conf_info_mac_n_out_din(load32_U0_conf_info_mac_n_out_din);
    load32_U0->conf_info_mac_n_out_full_n(conf_info_mac_n_c_full_n);
    load32_U0->conf_info_mac_n_out_write(load32_U0_conf_info_mac_n_out_write);
    compute_U0 = new mac_vivado_dma64_w32_compute("compute_U0");
    compute_U0->ap_clk(ap_clk);
    compute_U0->ap_rst(ap_rst);
    compute_U0->ap_start(compute_U0_ap_start);
    compute_U0->ap_done(compute_U0_ap_done);
    compute_U0->ap_continue(compute_U0_ap_continue);
    compute_U0->ap_idle(compute_U0_ap_idle);
    compute_U0->ap_ready(compute_U0_ap_ready);
    compute_U0->p_inbuff_0_V_address0(compute_U0_p_inbuff_0_V_address0);
    compute_U0->p_inbuff_0_V_ce0(compute_U0_p_inbuff_0_V_ce0);
    compute_U0->p_inbuff_0_V_q0(p_inbuff_0_V_t_q0);
    compute_U0->p_inbuff_1_V_address0(compute_U0_p_inbuff_1_V_address0);
    compute_U0->p_inbuff_1_V_ce0(compute_U0_p_inbuff_1_V_ce0);
    compute_U0->p_inbuff_1_V_q0(p_inbuff_1_V_t_q0);
    compute_U0->mac_vec_dout(conf_info_mac_vec_c_dout);
    compute_U0->mac_vec_empty_n(conf_info_mac_vec_c_empty_n);
    compute_U0->mac_vec_read(compute_U0_mac_vec_read);
    compute_U0->mac_len_dout(conf_info_mac_len_c_dout);
    compute_U0->mac_len_empty_n(conf_info_mac_len_c_empty_n);
    compute_U0->mac_len_read(compute_U0_mac_len_read);
    compute_U0->p_outbuff_0_V_address0(compute_U0_p_outbuff_0_V_address0);
    compute_U0->p_outbuff_0_V_ce0(compute_U0_p_outbuff_0_V_ce0);
    compute_U0->p_outbuff_0_V_we0(compute_U0_p_outbuff_0_V_we0);
    compute_U0->p_outbuff_0_V_d0(compute_U0_p_outbuff_0_V_d0);
    compute_U0->p_outbuff_1_V_address0(compute_U0_p_outbuff_1_V_address0);
    compute_U0->p_outbuff_1_V_ce0(compute_U0_p_outbuff_1_V_ce0);
    compute_U0->p_outbuff_1_V_we0(compute_U0_p_outbuff_1_V_we0);
    compute_U0->p_outbuff_1_V_d0(compute_U0_p_outbuff_1_V_d0);
    compute_U0->mac_vec_out_din(compute_U0_mac_vec_out_din);
    compute_U0->mac_vec_out_full_n(conf_info_mac_vec_c1_1_full_n);
    compute_U0->mac_vec_out_write(compute_U0_mac_vec_out_write);
    compute_U0->mac_len_out_din(compute_U0_mac_len_out_din);
    compute_U0->mac_len_out_full_n(conf_info_mac_len_c2_1_full_n);
    compute_U0->mac_len_out_write(compute_U0_mac_len_out_write);
    store_U0 = new mac_vivado_dma64_w32_store("store_U0");
    store_U0->ap_clk(ap_clk);
    store_U0->ap_rst(ap_rst);
    store_U0->ap_start(store_U0_ap_start);
    store_U0->ap_done(store_U0_ap_done);
    store_U0->ap_continue(store_U0_ap_continue);
    store_U0->ap_idle(store_U0_ap_idle);
    store_U0->ap_ready(store_U0_ap_ready);
    store_U0->p_outbuff_0_V_address0(store_U0_p_outbuff_0_V_address0);
    store_U0->p_outbuff_0_V_ce0(store_U0_p_outbuff_0_V_ce0);
    store_U0->p_outbuff_0_V_q0(p_outbuff_0_V_t_q0);
    store_U0->p_outbuff_1_V_address0(store_U0_p_outbuff_1_V_address0);
    store_U0->p_outbuff_1_V_ce0(store_U0_p_outbuff_1_V_ce0);
    store_U0->p_outbuff_1_V_q0(p_outbuff_1_V_t_q0);
    store_U0->out_word_V_din(store_U0_out_word_V_din);
    store_U0->out_word_V_full_n(out_word_V_full_n);
    store_U0->out_word_V_write(store_U0_out_word_V_write);
    store_U0->mac_n_dout(conf_info_mac_n_c_dout);
    store_U0->mac_n_empty_n(conf_info_mac_n_c_empty_n);
    store_U0->mac_n_read(store_U0_mac_n_read);
    store_U0->mac_vec_dout(conf_info_mac_vec_c1_1_dout);
    store_U0->mac_vec_empty_n(conf_info_mac_vec_c1_1_empty_n);
    store_U0->mac_vec_read(store_U0_mac_vec_read);
    store_U0->mac_len_dout(conf_info_mac_len_c2_1_dout);
    store_U0->mac_len_empty_n(conf_info_mac_len_c2_1_empty_n);
    store_U0->mac_len_read(store_U0_mac_len_read);
    store_U0->store_ctrl(store_U0_store_ctrl);
    store_U0->store_ctrl_ap_vld(store_U0_store_ctrl_ap_vld);
    store_U0->store_ctrl_ap_ack(store_ctrl_ap_ack);
    store_U0->chunk_dout(b_0_c_dout);
    store_U0->chunk_empty_n(b_0_c_empty_n);
    store_U0->chunk_read(store_U0_chunk_read);
    conf_info_mac_vec_c_U = new mac_vivado_dma64_w32_fifo_w32_d2_A("conf_info_mac_vec_c_U");
    conf_info_mac_vec_c_U->clk(ap_clk);
    conf_info_mac_vec_c_U->reset(ap_rst);
    conf_info_mac_vec_c_U->if_read_ce(ap_var_for_const2);
    conf_info_mac_vec_c_U->if_write_ce(ap_var_for_const2);
    conf_info_mac_vec_c_U->if_din(load32_U0_mac_vec_out_din);
    conf_info_mac_vec_c_U->if_full_n(conf_info_mac_vec_c_full_n);
    conf_info_mac_vec_c_U->if_write(load32_U0_mac_vec_out_write);
    conf_info_mac_vec_c_U->if_dout(conf_info_mac_vec_c_dout);
    conf_info_mac_vec_c_U->if_empty_n(conf_info_mac_vec_c_empty_n);
    conf_info_mac_vec_c_U->if_read(compute_U0_mac_vec_read);
    conf_info_mac_len_c_U = new mac_vivado_dma64_w32_fifo_w32_d2_A("conf_info_mac_len_c_U");
    conf_info_mac_len_c_U->clk(ap_clk);
    conf_info_mac_len_c_U->reset(ap_rst);
    conf_info_mac_len_c_U->if_read_ce(ap_var_for_const2);
    conf_info_mac_len_c_U->if_write_ce(ap_var_for_const2);
    conf_info_mac_len_c_U->if_din(load32_U0_mac_len_out_din);
    conf_info_mac_len_c_U->if_full_n(conf_info_mac_len_c_full_n);
    conf_info_mac_len_c_U->if_write(load32_U0_mac_len_out_write);
    conf_info_mac_len_c_U->if_dout(conf_info_mac_len_c_dout);
    conf_info_mac_len_c_U->if_empty_n(conf_info_mac_len_c_empty_n);
    conf_info_mac_len_c_U->if_read(compute_U0_mac_len_read);
    b_0_c_U = new mac_vivado_dma64_w32_fifo_w32_d3_A("b_0_c_U");
    b_0_c_U->clk(ap_clk);
    b_0_c_U->reset(ap_rst);
    b_0_c_U->if_read_ce(ap_var_for_const2);
    b_0_c_U->if_write_ce(ap_var_for_const2);
    b_0_c_U->if_din(load32_U0_chunk_out_din);
    b_0_c_U->if_full_n(b_0_c_full_n);
    b_0_c_U->if_write(load32_U0_chunk_out_write);
    b_0_c_U->if_dout(b_0_c_dout);
    b_0_c_U->if_empty_n(b_0_c_empty_n);
    b_0_c_U->if_read(store_U0_chunk_read);
    conf_info_mac_n_c_U = new mac_vivado_dma64_w32_fifo_w32_d3_A("conf_info_mac_n_c_U");
    conf_info_mac_n_c_U->clk(ap_clk);
    conf_info_mac_n_c_U->reset(ap_rst);
    conf_info_mac_n_c_U->if_read_ce(ap_var_for_const2);
    conf_info_mac_n_c_U->if_write_ce(ap_var_for_const2);
    conf_info_mac_n_c_U->if_din(load32_U0_conf_info_mac_n_out_din);
    conf_info_mac_n_c_U->if_full_n(conf_info_mac_n_c_full_n);
    conf_info_mac_n_c_U->if_write(load32_U0_conf_info_mac_n_out_write);
    conf_info_mac_n_c_U->if_dout(conf_info_mac_n_c_dout);
    conf_info_mac_n_c_U->if_empty_n(conf_info_mac_n_c_empty_n);
    conf_info_mac_n_c_U->if_read(store_U0_mac_n_read);
    conf_info_mac_vec_c1_1_U = new mac_vivado_dma64_w32_fifo_w32_d2_A("conf_info_mac_vec_c1_1_U");
    conf_info_mac_vec_c1_1_U->clk(ap_clk);
    conf_info_mac_vec_c1_1_U->reset(ap_rst);
    conf_info_mac_vec_c1_1_U->if_read_ce(ap_var_for_const2);
    conf_info_mac_vec_c1_1_U->if_write_ce(ap_var_for_const2);
    conf_info_mac_vec_c1_1_U->if_din(compute_U0_mac_vec_out_din);
    conf_info_mac_vec_c1_1_U->if_full_n(conf_info_mac_vec_c1_1_full_n);
    conf_info_mac_vec_c1_1_U->if_write(compute_U0_mac_vec_out_write);
    conf_info_mac_vec_c1_1_U->if_dout(conf_info_mac_vec_c1_1_dout);
    conf_info_mac_vec_c1_1_U->if_empty_n(conf_info_mac_vec_c1_1_empty_n);
    conf_info_mac_vec_c1_1_U->if_read(store_U0_mac_vec_read);
    conf_info_mac_len_c2_1_U = new mac_vivado_dma64_w32_fifo_w32_d2_A("conf_info_mac_len_c2_1_U");
    conf_info_mac_len_c2_1_U->clk(ap_clk);
    conf_info_mac_len_c2_1_U->reset(ap_rst);
    conf_info_mac_len_c2_1_U->if_read_ce(ap_var_for_const2);
    conf_info_mac_len_c2_1_U->if_write_ce(ap_var_for_const2);
    conf_info_mac_len_c2_1_U->if_din(compute_U0_mac_len_out_din);
    conf_info_mac_len_c2_1_U->if_full_n(conf_info_mac_len_c2_1_full_n);
    conf_info_mac_len_c2_1_U->if_write(compute_U0_mac_len_out_write);
    conf_info_mac_len_c2_1_U->if_dout(conf_info_mac_len_c2_1_dout);
    conf_info_mac_len_c2_1_U->if_empty_n(conf_info_mac_len_c2_1_empty_n);
    conf_info_mac_len_c2_1_U->if_read(store_U0_mac_len_read);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_channel_done_p_inbuff_0_V);
    sensitive << ( load32_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_p_inbuff_0_V );

    SC_METHOD(thread_ap_channel_done_p_inbuff_1_V);
    sensitive << ( load32_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_p_inbuff_1_V );

    SC_METHOD(thread_ap_channel_done_p_outbuff_0_V);
    sensitive << ( compute_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_p_outbuff_0_V );

    SC_METHOD(thread_ap_channel_done_p_outbuff_1_V);
    sensitive << ( compute_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_p_outbuff_1_V );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sync_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( load32_U0_ap_idle );
    sensitive << ( compute_U0_ap_idle );
    sensitive << ( store_U0_ap_idle );
    sensitive << ( p_inbuff_0_V_t_empty_n );
    sensitive << ( p_inbuff_1_V_t_empty_n );
    sensitive << ( p_outbuff_0_V_t_empty_n );
    sensitive << ( p_outbuff_1_V_t_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( load32_U0_ap_ready );

    SC_METHOD(thread_ap_sync_channel_write_p_inbuff_0_V);
    sensitive << ( ap_channel_done_p_inbuff_0_V );
    sensitive << ( load32_U0_p_inbuff_0_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_p_inbuff_0_V );

    SC_METHOD(thread_ap_sync_channel_write_p_inbuff_1_V);
    sensitive << ( ap_channel_done_p_inbuff_1_V );
    sensitive << ( load32_U0_p_inbuff_1_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_p_inbuff_1_V );

    SC_METHOD(thread_ap_sync_channel_write_p_outbuff_0_V);
    sensitive << ( ap_channel_done_p_outbuff_0_V );
    sensitive << ( compute_U0_p_outbuff_0_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_p_outbuff_0_V );

    SC_METHOD(thread_ap_sync_channel_write_p_outbuff_1_V);
    sensitive << ( ap_channel_done_p_outbuff_1_V );
    sensitive << ( compute_U0_p_outbuff_1_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_p_outbuff_1_V );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_sync_done );
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( load32_U0_ap_done );
    sensitive << ( store_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( load32_U0_ap_ready );

    SC_METHOD(thread_compute_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_p_outbuff_1_V );
    sensitive << ( ap_sync_channel_write_p_outbuff_0_V );

    SC_METHOD(thread_compute_U0_ap_start);
    sensitive << ( p_inbuff_0_V_t_empty_n );
    sensitive << ( p_inbuff_1_V_t_empty_n );

    SC_METHOD(thread_compute_U0_p_outbuff_0_V_full_n);
    sensitive << ( p_outbuff_0_V_i_full_n );

    SC_METHOD(thread_compute_U0_p_outbuff_1_V_full_n);
    sensitive << ( p_outbuff_1_V_i_full_n );

    SC_METHOD(thread_compute_U0_start_full_n);

    SC_METHOD(thread_compute_U0_start_write);

    SC_METHOD(thread_in1_word_V_read);
    sensitive << ( load32_U0_in1_word_V_read );

    SC_METHOD(thread_load32_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_p_inbuff_1_V );
    sensitive << ( ap_sync_channel_write_p_inbuff_0_V );
    sensitive << ( ap_sync_continue );

    SC_METHOD(thread_load32_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_load32_U0_p_inbuff_0_V_full_n);
    sensitive << ( p_inbuff_0_V_i_full_n );

    SC_METHOD(thread_load32_U0_p_inbuff_1_V_full_n);
    sensitive << ( p_inbuff_1_V_i_full_n );

    SC_METHOD(thread_load32_U0_start_full_n);

    SC_METHOD(thread_load32_U0_start_write);

    SC_METHOD(thread_load_ctrl);
    sensitive << ( load32_U0_load_ctrl );

    SC_METHOD(thread_load_ctrl_ap_vld);
    sensitive << ( load32_U0_load_ctrl_ap_vld );

    SC_METHOD(thread_out_word_V_din);
    sensitive << ( store_U0_out_word_V_din );

    SC_METHOD(thread_out_word_V_write);
    sensitive << ( store_U0_out_word_V_write );

    SC_METHOD(thread_store_U0_ap_continue);
    sensitive << ( ap_sync_continue );

    SC_METHOD(thread_store_U0_ap_start);
    sensitive << ( p_outbuff_0_V_t_empty_n );
    sensitive << ( p_outbuff_1_V_t_empty_n );

    SC_METHOD(thread_store_U0_start_full_n);

    SC_METHOD(thread_store_U0_start_write);

    SC_METHOD(thread_store_ctrl);
    sensitive << ( store_U0_store_ctrl );

    SC_METHOD(thread_store_ctrl_ap_vld);
    sensitive << ( store_U0_store_ctrl_ap_vld );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_sync_reg_channel_write_p_inbuff_1_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_p_inbuff_0_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_p_outbuff_1_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_p_outbuff_0_V = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mac_vivado_dma64_w32_dataflow_in_loop_bat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, in1_word_V_dout, "(port)in1_word_V_dout");
    sc_trace(mVcdFile, in1_word_V_empty_n, "(port)in1_word_V_empty_n");
    sc_trace(mVcdFile, in1_word_V_read, "(port)in1_word_V_read");
    sc_trace(mVcdFile, conf_info_mac_vec, "(port)conf_info_mac_vec");
    sc_trace(mVcdFile, conf_info_mac_len, "(port)conf_info_mac_len");
    sc_trace(mVcdFile, load_ctrl, "(port)load_ctrl");
    sc_trace(mVcdFile, b_0, "(port)b_0");
    sc_trace(mVcdFile, out_word_V_din, "(port)out_word_V_din");
    sc_trace(mVcdFile, out_word_V_full_n, "(port)out_word_V_full_n");
    sc_trace(mVcdFile, out_word_V_write, "(port)out_word_V_write");
    sc_trace(mVcdFile, conf_info_mac_n, "(port)conf_info_mac_n");
    sc_trace(mVcdFile, store_ctrl, "(port)store_ctrl");
    sc_trace(mVcdFile, conf_info_mac_vec_ap_vld, "(port)conf_info_mac_vec_ap_vld");
    sc_trace(mVcdFile, conf_info_mac_len_ap_vld, "(port)conf_info_mac_len_ap_vld");
    sc_trace(mVcdFile, load_ctrl_ap_vld, "(port)load_ctrl_ap_vld");
    sc_trace(mVcdFile, load_ctrl_ap_ack, "(port)load_ctrl_ap_ack");
    sc_trace(mVcdFile, b_0_ap_vld, "(port)b_0_ap_vld");
    sc_trace(mVcdFile, conf_info_mac_n_ap_vld, "(port)conf_info_mac_n_ap_vld");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, store_ctrl_ap_vld, "(port)store_ctrl_ap_vld");
    sc_trace(mVcdFile, store_ctrl_ap_ack, "(port)store_ctrl_ap_ack");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, p_inbuff_0_V_i_q0, "p_inbuff_0_V_i_q0");
    sc_trace(mVcdFile, p_inbuff_0_V_t_q0, "p_inbuff_0_V_t_q0");
    sc_trace(mVcdFile, p_inbuff_1_V_i_q0, "p_inbuff_1_V_i_q0");
    sc_trace(mVcdFile, p_inbuff_1_V_t_q0, "p_inbuff_1_V_t_q0");
    sc_trace(mVcdFile, p_outbuff_0_V_i_q0, "p_outbuff_0_V_i_q0");
    sc_trace(mVcdFile, p_outbuff_0_V_t_q0, "p_outbuff_0_V_t_q0");
    sc_trace(mVcdFile, p_outbuff_1_V_i_q0, "p_outbuff_1_V_i_q0");
    sc_trace(mVcdFile, p_outbuff_1_V_t_q0, "p_outbuff_1_V_t_q0");
    sc_trace(mVcdFile, load32_U0_ap_start, "load32_U0_ap_start");
    sc_trace(mVcdFile, load32_U0_ap_done, "load32_U0_ap_done");
    sc_trace(mVcdFile, load32_U0_ap_continue, "load32_U0_ap_continue");
    sc_trace(mVcdFile, load32_U0_ap_idle, "load32_U0_ap_idle");
    sc_trace(mVcdFile, load32_U0_ap_ready, "load32_U0_ap_ready");
    sc_trace(mVcdFile, load32_U0_p_inbuff_0_V_address0, "load32_U0_p_inbuff_0_V_address0");
    sc_trace(mVcdFile, load32_U0_p_inbuff_0_V_ce0, "load32_U0_p_inbuff_0_V_ce0");
    sc_trace(mVcdFile, load32_U0_p_inbuff_0_V_we0, "load32_U0_p_inbuff_0_V_we0");
    sc_trace(mVcdFile, load32_U0_p_inbuff_0_V_d0, "load32_U0_p_inbuff_0_V_d0");
    sc_trace(mVcdFile, load32_U0_p_inbuff_1_V_address0, "load32_U0_p_inbuff_1_V_address0");
    sc_trace(mVcdFile, load32_U0_p_inbuff_1_V_ce0, "load32_U0_p_inbuff_1_V_ce0");
    sc_trace(mVcdFile, load32_U0_p_inbuff_1_V_we0, "load32_U0_p_inbuff_1_V_we0");
    sc_trace(mVcdFile, load32_U0_p_inbuff_1_V_d0, "load32_U0_p_inbuff_1_V_d0");
    sc_trace(mVcdFile, load32_U0_in1_word_V_read, "load32_U0_in1_word_V_read");
    sc_trace(mVcdFile, load32_U0_load_ctrl, "load32_U0_load_ctrl");
    sc_trace(mVcdFile, load32_U0_load_ctrl_ap_vld, "load32_U0_load_ctrl_ap_vld");
    sc_trace(mVcdFile, load32_U0_mac_vec_out_din, "load32_U0_mac_vec_out_din");
    sc_trace(mVcdFile, load32_U0_mac_vec_out_write, "load32_U0_mac_vec_out_write");
    sc_trace(mVcdFile, load32_U0_mac_len_out_din, "load32_U0_mac_len_out_din");
    sc_trace(mVcdFile, load32_U0_mac_len_out_write, "load32_U0_mac_len_out_write");
    sc_trace(mVcdFile, load32_U0_chunk_out_din, "load32_U0_chunk_out_din");
    sc_trace(mVcdFile, load32_U0_chunk_out_write, "load32_U0_chunk_out_write");
    sc_trace(mVcdFile, load32_U0_conf_info_mac_n_out_din, "load32_U0_conf_info_mac_n_out_din");
    sc_trace(mVcdFile, load32_U0_conf_info_mac_n_out_write, "load32_U0_conf_info_mac_n_out_write");
    sc_trace(mVcdFile, ap_channel_done_p_inbuff_1_V, "ap_channel_done_p_inbuff_1_V");
    sc_trace(mVcdFile, load32_U0_p_inbuff_1_V_full_n, "load32_U0_p_inbuff_1_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_p_inbuff_1_V, "ap_sync_reg_channel_write_p_inbuff_1_V");
    sc_trace(mVcdFile, ap_sync_channel_write_p_inbuff_1_V, "ap_sync_channel_write_p_inbuff_1_V");
    sc_trace(mVcdFile, ap_channel_done_p_inbuff_0_V, "ap_channel_done_p_inbuff_0_V");
    sc_trace(mVcdFile, load32_U0_p_inbuff_0_V_full_n, "load32_U0_p_inbuff_0_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_p_inbuff_0_V, "ap_sync_reg_channel_write_p_inbuff_0_V");
    sc_trace(mVcdFile, ap_sync_channel_write_p_inbuff_0_V, "ap_sync_channel_write_p_inbuff_0_V");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, compute_U0_ap_start, "compute_U0_ap_start");
    sc_trace(mVcdFile, compute_U0_ap_done, "compute_U0_ap_done");
    sc_trace(mVcdFile, compute_U0_ap_continue, "compute_U0_ap_continue");
    sc_trace(mVcdFile, compute_U0_ap_idle, "compute_U0_ap_idle");
    sc_trace(mVcdFile, compute_U0_ap_ready, "compute_U0_ap_ready");
    sc_trace(mVcdFile, compute_U0_p_inbuff_0_V_address0, "compute_U0_p_inbuff_0_V_address0");
    sc_trace(mVcdFile, compute_U0_p_inbuff_0_V_ce0, "compute_U0_p_inbuff_0_V_ce0");
    sc_trace(mVcdFile, compute_U0_p_inbuff_1_V_address0, "compute_U0_p_inbuff_1_V_address0");
    sc_trace(mVcdFile, compute_U0_p_inbuff_1_V_ce0, "compute_U0_p_inbuff_1_V_ce0");
    sc_trace(mVcdFile, compute_U0_mac_vec_read, "compute_U0_mac_vec_read");
    sc_trace(mVcdFile, compute_U0_mac_len_read, "compute_U0_mac_len_read");
    sc_trace(mVcdFile, compute_U0_p_outbuff_0_V_address0, "compute_U0_p_outbuff_0_V_address0");
    sc_trace(mVcdFile, compute_U0_p_outbuff_0_V_ce0, "compute_U0_p_outbuff_0_V_ce0");
    sc_trace(mVcdFile, compute_U0_p_outbuff_0_V_we0, "compute_U0_p_outbuff_0_V_we0");
    sc_trace(mVcdFile, compute_U0_p_outbuff_0_V_d0, "compute_U0_p_outbuff_0_V_d0");
    sc_trace(mVcdFile, compute_U0_p_outbuff_1_V_address0, "compute_U0_p_outbuff_1_V_address0");
    sc_trace(mVcdFile, compute_U0_p_outbuff_1_V_ce0, "compute_U0_p_outbuff_1_V_ce0");
    sc_trace(mVcdFile, compute_U0_p_outbuff_1_V_we0, "compute_U0_p_outbuff_1_V_we0");
    sc_trace(mVcdFile, compute_U0_p_outbuff_1_V_d0, "compute_U0_p_outbuff_1_V_d0");
    sc_trace(mVcdFile, compute_U0_mac_vec_out_din, "compute_U0_mac_vec_out_din");
    sc_trace(mVcdFile, compute_U0_mac_vec_out_write, "compute_U0_mac_vec_out_write");
    sc_trace(mVcdFile, compute_U0_mac_len_out_din, "compute_U0_mac_len_out_din");
    sc_trace(mVcdFile, compute_U0_mac_len_out_write, "compute_U0_mac_len_out_write");
    sc_trace(mVcdFile, ap_channel_done_p_outbuff_1_V, "ap_channel_done_p_outbuff_1_V");
    sc_trace(mVcdFile, compute_U0_p_outbuff_1_V_full_n, "compute_U0_p_outbuff_1_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_p_outbuff_1_V, "ap_sync_reg_channel_write_p_outbuff_1_V");
    sc_trace(mVcdFile, ap_sync_channel_write_p_outbuff_1_V, "ap_sync_channel_write_p_outbuff_1_V");
    sc_trace(mVcdFile, ap_channel_done_p_outbuff_0_V, "ap_channel_done_p_outbuff_0_V");
    sc_trace(mVcdFile, compute_U0_p_outbuff_0_V_full_n, "compute_U0_p_outbuff_0_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_p_outbuff_0_V, "ap_sync_reg_channel_write_p_outbuff_0_V");
    sc_trace(mVcdFile, ap_sync_channel_write_p_outbuff_0_V, "ap_sync_channel_write_p_outbuff_0_V");
    sc_trace(mVcdFile, store_U0_ap_start, "store_U0_ap_start");
    sc_trace(mVcdFile, store_U0_ap_done, "store_U0_ap_done");
    sc_trace(mVcdFile, store_U0_ap_continue, "store_U0_ap_continue");
    sc_trace(mVcdFile, store_U0_ap_idle, "store_U0_ap_idle");
    sc_trace(mVcdFile, store_U0_ap_ready, "store_U0_ap_ready");
    sc_trace(mVcdFile, store_U0_p_outbuff_0_V_address0, "store_U0_p_outbuff_0_V_address0");
    sc_trace(mVcdFile, store_U0_p_outbuff_0_V_ce0, "store_U0_p_outbuff_0_V_ce0");
    sc_trace(mVcdFile, store_U0_p_outbuff_1_V_address0, "store_U0_p_outbuff_1_V_address0");
    sc_trace(mVcdFile, store_U0_p_outbuff_1_V_ce0, "store_U0_p_outbuff_1_V_ce0");
    sc_trace(mVcdFile, store_U0_out_word_V_din, "store_U0_out_word_V_din");
    sc_trace(mVcdFile, store_U0_out_word_V_write, "store_U0_out_word_V_write");
    sc_trace(mVcdFile, store_U0_mac_n_read, "store_U0_mac_n_read");
    sc_trace(mVcdFile, store_U0_mac_vec_read, "store_U0_mac_vec_read");
    sc_trace(mVcdFile, store_U0_mac_len_read, "store_U0_mac_len_read");
    sc_trace(mVcdFile, store_U0_store_ctrl, "store_U0_store_ctrl");
    sc_trace(mVcdFile, store_U0_store_ctrl_ap_vld, "store_U0_store_ctrl_ap_vld");
    sc_trace(mVcdFile, store_U0_chunk_read, "store_U0_chunk_read");
    sc_trace(mVcdFile, p_inbuff_0_V_i_full_n, "p_inbuff_0_V_i_full_n");
    sc_trace(mVcdFile, p_inbuff_0_V_t_empty_n, "p_inbuff_0_V_t_empty_n");
    sc_trace(mVcdFile, p_inbuff_1_V_i_full_n, "p_inbuff_1_V_i_full_n");
    sc_trace(mVcdFile, p_inbuff_1_V_t_empty_n, "p_inbuff_1_V_t_empty_n");
    sc_trace(mVcdFile, p_outbuff_0_V_i_full_n, "p_outbuff_0_V_i_full_n");
    sc_trace(mVcdFile, p_outbuff_0_V_t_empty_n, "p_outbuff_0_V_t_empty_n");
    sc_trace(mVcdFile, p_outbuff_1_V_i_full_n, "p_outbuff_1_V_i_full_n");
    sc_trace(mVcdFile, p_outbuff_1_V_t_empty_n, "p_outbuff_1_V_t_empty_n");
    sc_trace(mVcdFile, conf_info_mac_vec_c_full_n, "conf_info_mac_vec_c_full_n");
    sc_trace(mVcdFile, conf_info_mac_vec_c_dout, "conf_info_mac_vec_c_dout");
    sc_trace(mVcdFile, conf_info_mac_vec_c_empty_n, "conf_info_mac_vec_c_empty_n");
    sc_trace(mVcdFile, conf_info_mac_len_c_full_n, "conf_info_mac_len_c_full_n");
    sc_trace(mVcdFile, conf_info_mac_len_c_dout, "conf_info_mac_len_c_dout");
    sc_trace(mVcdFile, conf_info_mac_len_c_empty_n, "conf_info_mac_len_c_empty_n");
    sc_trace(mVcdFile, b_0_c_full_n, "b_0_c_full_n");
    sc_trace(mVcdFile, b_0_c_dout, "b_0_c_dout");
    sc_trace(mVcdFile, b_0_c_empty_n, "b_0_c_empty_n");
    sc_trace(mVcdFile, conf_info_mac_n_c_full_n, "conf_info_mac_n_c_full_n");
    sc_trace(mVcdFile, conf_info_mac_n_c_dout, "conf_info_mac_n_c_dout");
    sc_trace(mVcdFile, conf_info_mac_n_c_empty_n, "conf_info_mac_n_c_empty_n");
    sc_trace(mVcdFile, conf_info_mac_vec_c1_1_full_n, "conf_info_mac_vec_c1_1_full_n");
    sc_trace(mVcdFile, conf_info_mac_vec_c1_1_dout, "conf_info_mac_vec_c1_1_dout");
    sc_trace(mVcdFile, conf_info_mac_vec_c1_1_empty_n, "conf_info_mac_vec_c1_1_empty_n");
    sc_trace(mVcdFile, conf_info_mac_len_c2_1_full_n, "conf_info_mac_len_c2_1_full_n");
    sc_trace(mVcdFile, conf_info_mac_len_c2_1_dout, "conf_info_mac_len_c2_1_dout");
    sc_trace(mVcdFile, conf_info_mac_len_c2_1_empty_n, "conf_info_mac_len_c2_1_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, load32_U0_start_full_n, "load32_U0_start_full_n");
    sc_trace(mVcdFile, load32_U0_start_write, "load32_U0_start_write");
    sc_trace(mVcdFile, compute_U0_start_full_n, "compute_U0_start_full_n");
    sc_trace(mVcdFile, compute_U0_start_write, "compute_U0_start_write");
    sc_trace(mVcdFile, store_U0_start_full_n, "store_U0_start_full_n");
    sc_trace(mVcdFile, store_U0_start_write, "store_U0_start_write");
#endif

    }
}

mac_vivado_dma64_w32_dataflow_in_loop_bat::~mac_vivado_dma64_w32_dataflow_in_loop_bat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete p_inbuff_0_V_U;
    delete p_inbuff_1_V_U;
    delete p_outbuff_0_V_U;
    delete p_outbuff_1_V_U;
    delete load32_U0;
    delete compute_U0;
    delete store_U0;
    delete conf_info_mac_vec_c_U;
    delete conf_info_mac_len_c_U;
    delete b_0_c_U;
    delete conf_info_mac_n_c_U;
    delete conf_info_mac_vec_c1_1_U;
    delete conf_info_mac_len_c2_1_U;
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_1;
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_p_inbuff_0_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (load32_U0_ap_done.read() & 
             load32_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_p_inbuff_0_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_p_inbuff_0_V = ap_sync_channel_write_p_inbuff_0_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_p_inbuff_1_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (load32_U0_ap_done.read() & 
             load32_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_p_inbuff_1_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_p_inbuff_1_V = ap_sync_channel_write_p_inbuff_1_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_p_outbuff_0_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (compute_U0_ap_done.read() & 
             compute_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_p_outbuff_0_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_p_outbuff_0_V = ap_sync_channel_write_p_outbuff_0_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_p_outbuff_1_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (compute_U0_ap_done.read() & 
             compute_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_p_outbuff_1_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_p_outbuff_1_V = ap_sync_channel_write_p_outbuff_1_V.read();
        }
    }
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_channel_done_p_inbuff_0_V() {
    ap_channel_done_p_inbuff_0_V = (load32_U0_ap_done.read() & (ap_sync_reg_channel_write_p_inbuff_0_V.read() ^ 
  ap_const_logic_1));
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_channel_done_p_inbuff_1_V() {
    ap_channel_done_p_inbuff_1_V = (load32_U0_ap_done.read() & (ap_sync_reg_channel_write_p_inbuff_1_V.read() ^ 
  ap_const_logic_1));
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_channel_done_p_outbuff_0_V() {
    ap_channel_done_p_outbuff_0_V = (compute_U0_ap_done.read() & (ap_sync_reg_channel_write_p_outbuff_0_V.read() ^ 
  ap_const_logic_1));
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_channel_done_p_outbuff_1_V() {
    ap_channel_done_p_outbuff_1_V = (compute_U0_ap_done.read() & (ap_sync_reg_channel_write_p_outbuff_1_V.read() ^ 
  ap_const_logic_1));
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_done() {
    ap_done = ap_sync_done.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_idle() {
    ap_idle = (load32_U0_ap_idle.read() & compute_U0_ap_idle.read() & store_U0_ap_idle.read() & (p_inbuff_0_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (p_inbuff_1_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (p_outbuff_0_V_t_empty_n.read() ^ 
  ap_const_logic_1) & (p_outbuff_1_V_t_empty_n.read() ^ 
  ap_const_logic_1));
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_ready() {
    ap_ready = load32_U0_ap_ready.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_sync_channel_write_p_inbuff_0_V() {
    ap_sync_channel_write_p_inbuff_0_V = ((ap_channel_done_p_inbuff_0_V.read() & 
  load32_U0_p_inbuff_0_V_full_n.read()) | ap_sync_reg_channel_write_p_inbuff_0_V.read());
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_sync_channel_write_p_inbuff_1_V() {
    ap_sync_channel_write_p_inbuff_1_V = ((ap_channel_done_p_inbuff_1_V.read() & 
  load32_U0_p_inbuff_1_V_full_n.read()) | ap_sync_reg_channel_write_p_inbuff_1_V.read());
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_sync_channel_write_p_outbuff_0_V() {
    ap_sync_channel_write_p_outbuff_0_V = ((ap_channel_done_p_outbuff_0_V.read() & 
  compute_U0_p_outbuff_0_V_full_n.read()) | ap_sync_reg_channel_write_p_outbuff_0_V.read());
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_sync_channel_write_p_outbuff_1_V() {
    ap_sync_channel_write_p_outbuff_1_V = ((ap_channel_done_p_outbuff_1_V.read() & 
  compute_U0_p_outbuff_1_V_full_n.read()) | ap_sync_reg_channel_write_p_outbuff_1_V.read());
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_sync_continue() {
    ap_sync_continue = (ap_sync_done.read() & ap_continue.read());
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_sync_done() {
    ap_sync_done = (load32_U0_ap_done.read() & store_U0_ap_done.read());
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_ap_sync_ready() {
    ap_sync_ready = load32_U0_ap_ready.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_compute_U0_ap_continue() {
    compute_U0_ap_continue = (ap_sync_channel_write_p_outbuff_1_V.read() & ap_sync_channel_write_p_outbuff_0_V.read());
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_compute_U0_ap_start() {
    compute_U0_ap_start = (p_inbuff_0_V_t_empty_n.read() & p_inbuff_1_V_t_empty_n.read());
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_compute_U0_p_outbuff_0_V_full_n() {
    compute_U0_p_outbuff_0_V_full_n = p_outbuff_0_V_i_full_n.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_compute_U0_p_outbuff_1_V_full_n() {
    compute_U0_p_outbuff_1_V_full_n = p_outbuff_1_V_i_full_n.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_compute_U0_start_full_n() {
    compute_U0_start_full_n = ap_const_logic_1;
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_compute_U0_start_write() {
    compute_U0_start_write = ap_const_logic_0;
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_in1_word_V_read() {
    in1_word_V_read = load32_U0_in1_word_V_read.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_load32_U0_ap_continue() {
    load32_U0_ap_continue = (ap_sync_channel_write_p_inbuff_1_V.read() & ap_sync_channel_write_p_inbuff_0_V.read() & ap_sync_continue.read());
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_load32_U0_ap_start() {
    load32_U0_ap_start = ap_start.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_load32_U0_p_inbuff_0_V_full_n() {
    load32_U0_p_inbuff_0_V_full_n = p_inbuff_0_V_i_full_n.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_load32_U0_p_inbuff_1_V_full_n() {
    load32_U0_p_inbuff_1_V_full_n = p_inbuff_1_V_i_full_n.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_load32_U0_start_full_n() {
    load32_U0_start_full_n = ap_const_logic_1;
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_load32_U0_start_write() {
    load32_U0_start_write = ap_const_logic_0;
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_load_ctrl() {
    load_ctrl = load32_U0_load_ctrl.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_load_ctrl_ap_vld() {
    load_ctrl_ap_vld = load32_U0_load_ctrl_ap_vld.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_out_word_V_din() {
    out_word_V_din = store_U0_out_word_V_din.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_out_word_V_write() {
    out_word_V_write = store_U0_out_word_V_write.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_store_U0_ap_continue() {
    store_U0_ap_continue = ap_sync_continue.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_store_U0_ap_start() {
    store_U0_ap_start = (p_outbuff_0_V_t_empty_n.read() & p_outbuff_1_V_t_empty_n.read());
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_store_U0_start_full_n() {
    store_U0_start_full_n = ap_const_logic_1;
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_store_U0_start_write() {
    store_U0_start_write = ap_const_logic_0;
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_store_ctrl() {
    store_ctrl = store_U0_store_ctrl.read();
}

void mac_vivado_dma64_w32_dataflow_in_loop_bat::thread_store_ctrl_ap_vld() {
    store_ctrl_ap_vld = store_U0_store_ctrl_ap_vld.read();
}

}

