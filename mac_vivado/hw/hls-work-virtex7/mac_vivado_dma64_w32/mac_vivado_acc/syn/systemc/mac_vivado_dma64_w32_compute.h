// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mac_vivado_dma64_w32_compute_HH_
#define _mac_vivado_dma64_w32_compute_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mac_vivado_dma64_w32_compute : public sc_module {
    // Port declarations 33
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<12> > p_inbuff_0_V_address0;
    sc_out< sc_logic > p_inbuff_0_V_ce0;
    sc_in< sc_lv<32> > p_inbuff_0_V_q0;
    sc_out< sc_lv<12> > p_inbuff_1_V_address0;
    sc_out< sc_logic > p_inbuff_1_V_ce0;
    sc_in< sc_lv<32> > p_inbuff_1_V_q0;
    sc_in< sc_lv<32> > mac_vec_dout;
    sc_in< sc_logic > mac_vec_empty_n;
    sc_out< sc_logic > mac_vec_read;
    sc_in< sc_lv<32> > mac_len_dout;
    sc_in< sc_logic > mac_len_empty_n;
    sc_out< sc_logic > mac_len_read;
    sc_out< sc_lv<6> > p_outbuff_0_V_address0;
    sc_out< sc_logic > p_outbuff_0_V_ce0;
    sc_out< sc_logic > p_outbuff_0_V_we0;
    sc_out< sc_lv<32> > p_outbuff_0_V_d0;
    sc_out< sc_lv<6> > p_outbuff_1_V_address0;
    sc_out< sc_logic > p_outbuff_1_V_ce0;
    sc_out< sc_logic > p_outbuff_1_V_we0;
    sc_out< sc_lv<32> > p_outbuff_1_V_d0;
    sc_out< sc_lv<32> > mac_vec_out_din;
    sc_in< sc_logic > mac_vec_out_full_n;
    sc_out< sc_logic > mac_vec_out_write;
    sc_out< sc_lv<32> > mac_len_out_din;
    sc_in< sc_logic > mac_len_out_full_n;
    sc_out< sc_logic > mac_len_out_write;


    // Module declarations
    mac_vivado_dma64_w32_compute(sc_module_name name);
    SC_HAS_PROCESS(mac_vivado_dma64_w32_compute);

    ~mac_vivado_dma64_w32_compute();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > mac_vec_blk_n;
    sc_signal< sc_logic > mac_len_blk_n;
    sc_signal< sc_logic > mac_vec_out_blk_n;
    sc_signal< sc_logic > mac_len_out_blk_n;
    sc_signal< sc_lv<32> > mac_vec_read_reg_426;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > mac_len_read_reg_431;
    sc_signal< sc_lv<32> > in_rem_2_fu_223_p2;
    sc_signal< sc_lv<32> > in_rem_2_reg_437;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > length_fu_239_p2;
    sc_signal< sc_lv<32> > length_reg_442;
    sc_signal< sc_lv<32> > i_fu_250_p2;
    sc_signal< sc_lv<32> > i_reg_450;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > trunc_ln180_fu_256_p1;
    sc_signal< sc_lv<1> > trunc_ln180_reg_455;
    sc_signal< sc_lv<1> > icmp_ln75_fu_245_p2;
    sc_signal< sc_lv<6> > p_outbuff_0_V_addr_reg_470;
    sc_signal< sc_lv<6> > p_outbuff_1_V_addr_reg_475;
    sc_signal< sc_lv<13> > in_len_fu_308_p3;
    sc_signal< sc_lv<13> > in_len_reg_505;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln86_fu_292_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > icmp_ln92_fu_316_p2;
    sc_signal< sc_lv<32> > in_rem_fu_337_p2;
    sc_signal< sc_lv<32> > mul_ln95_fu_343_p2;
    sc_signal< sc_lv<32> > mul_ln95_reg_528;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<13> > i_1_fu_420_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > i_0_i_reg_180;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > in_rem_0_i_reg_191;
    sc_signal< sc_lv<13> > i1_0_i_reg_201;
    sc_signal< sc_lv<64> > zext_ln180_fu_270_p1;
    sc_signal< sc_lv<64> > zext_ln215_fu_331_p1;
    sc_signal< sc_lv<64> > zext_ln180_1_fu_400_p1;
    sc_signal< sc_lv<1> > icmp_ln100_fu_368_p2;
    sc_signal< sc_lv<32> > acc_0_i_fu_58;
    sc_signal< sc_lv<32> > acc_fu_355_p2;
    sc_signal< sc_lv<32> > vector_number_1_fu_62;
    sc_signal< sc_lv<32> > vector_number_fu_409_p2;
    sc_signal< sc_lv<32> > vector_index_1_fu_66;
    sc_signal< sc_lv<32> > vector_index_fu_362_p2;
    sc_signal< sc_lv<32> > select_ln180_fu_283_p3;
    sc_signal< sc_lv<1> > trunc_ln180_1_fu_386_p1;
    sc_signal< sc_lv<32> > add_ln73_fu_227_p2;
    sc_signal< sc_lv<32> > or_ln73_fu_233_p2;
    sc_signal< sc_lv<31> > lshr_ln_fu_260_p4;
    sc_signal< sc_lv<1> > icmp_ln89_fu_298_p2;
    sc_signal< sc_lv<13> > trunc_ln86_fu_304_p1;
    sc_signal< sc_lv<12> > lshr_ln1_fu_321_p4;
    sc_signal< sc_lv<32> > mul_ln95_fu_343_p0;
    sc_signal< sc_lv<32> > mul_ln95_fu_343_p1;
    sc_signal< sc_lv<31> > lshr_ln180_1_fu_390_p4;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_1900;
    static const sc_lv<13> ap_const_lv13_1900;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_FFFFE700;
    static const sc_lv<13> ap_const_lv13_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_fu_355_p2();
    void thread_add_ln73_fu_227_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_1_fu_420_p2();
    void thread_i_fu_250_p2();
    void thread_icmp_ln100_fu_368_p2();
    void thread_icmp_ln75_fu_245_p2();
    void thread_icmp_ln86_fu_292_p2();
    void thread_icmp_ln89_fu_298_p2();
    void thread_icmp_ln92_fu_316_p2();
    void thread_in_len_fu_308_p3();
    void thread_in_rem_2_fu_223_p2();
    void thread_in_rem_fu_337_p2();
    void thread_length_fu_239_p2();
    void thread_lshr_ln180_1_fu_390_p4();
    void thread_lshr_ln1_fu_321_p4();
    void thread_lshr_ln_fu_260_p4();
    void thread_mac_len_blk_n();
    void thread_mac_len_out_blk_n();
    void thread_mac_len_out_din();
    void thread_mac_len_out_write();
    void thread_mac_len_read();
    void thread_mac_vec_blk_n();
    void thread_mac_vec_out_blk_n();
    void thread_mac_vec_out_din();
    void thread_mac_vec_out_write();
    void thread_mac_vec_read();
    void thread_mul_ln95_fu_343_p0();
    void thread_mul_ln95_fu_343_p1();
    void thread_mul_ln95_fu_343_p2();
    void thread_or_ln73_fu_233_p2();
    void thread_p_inbuff_0_V_address0();
    void thread_p_inbuff_0_V_ce0();
    void thread_p_inbuff_1_V_address0();
    void thread_p_inbuff_1_V_ce0();
    void thread_p_outbuff_0_V_address0();
    void thread_p_outbuff_0_V_ce0();
    void thread_p_outbuff_0_V_d0();
    void thread_p_outbuff_0_V_we0();
    void thread_p_outbuff_1_V_address0();
    void thread_p_outbuff_1_V_ce0();
    void thread_p_outbuff_1_V_d0();
    void thread_p_outbuff_1_V_we0();
    void thread_select_ln180_fu_283_p3();
    void thread_trunc_ln180_1_fu_386_p1();
    void thread_trunc_ln180_fu_256_p1();
    void thread_trunc_ln86_fu_304_p1();
    void thread_vector_index_fu_362_p2();
    void thread_vector_number_fu_409_p2();
    void thread_zext_ln180_1_fu_400_p1();
    void thread_zext_ln180_fu_270_p1();
    void thread_zext_ln215_fu_331_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
