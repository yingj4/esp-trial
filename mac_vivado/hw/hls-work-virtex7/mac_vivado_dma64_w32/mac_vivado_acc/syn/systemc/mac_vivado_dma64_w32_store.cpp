// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mac_vivado_dma64_w32_store.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mac_vivado_dma64_w32_store::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mac_vivado_dma64_w32_store::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> mac_vivado_dma64_w32_store::ap_ST_fsm_state1 = "1";
const sc_lv<6> mac_vivado_dma64_w32_store::ap_ST_fsm_state2 = "10";
const sc_lv<6> mac_vivado_dma64_w32_store::ap_ST_fsm_state3 = "100";
const sc_lv<6> mac_vivado_dma64_w32_store::ap_ST_fsm_state4 = "1000";
const sc_lv<6> mac_vivado_dma64_w32_store::ap_ST_fsm_state5 = "10000";
const sc_lv<6> mac_vivado_dma64_w32_store::ap_ST_fsm_state6 = "100000";
const sc_lv<32> mac_vivado_dma64_w32_store::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mac_vivado_dma64_w32_store::ap_const_lv32_5 = "101";
const sc_lv<32> mac_vivado_dma64_w32_store::ap_const_lv32_2 = "10";
const sc_lv<32> mac_vivado_dma64_w32_store::ap_const_lv32_3 = "11";
const sc_lv<32> mac_vivado_dma64_w32_store::ap_const_lv32_1 = "1";
const sc_lv<32> mac_vivado_dma64_w32_store::ap_const_lv32_4 = "100";
const sc_lv<1> mac_vivado_dma64_w32_store::ap_const_lv1_0 = "0";
const sc_lv<31> mac_vivado_dma64_w32_store::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> mac_vivado_dma64_w32_store::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> mac_vivado_dma64_w32_store::ap_const_lv32_1F = "11111";
const sc_lv<31> mac_vivado_dma64_w32_store::ap_const_lv31_1 = "1";
const sc_lv<1> mac_vivado_dma64_w32_store::ap_const_lv1_1 = "1";
const bool mac_vivado_dma64_w32_store::ap_const_boolean_1 = true;

mac_vivado_dma64_w32_store::mac_vivado_dma64_w32_store(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_forward_store_ctrl_U = new mac_vivado_dma64_w32_regslice_forward<96>("regslice_forward_store_ctrl_U");
    regslice_forward_store_ctrl_U->ap_clk(ap_clk);
    regslice_forward_store_ctrl_U->ap_rst(ap_rst);
    regslice_forward_store_ctrl_U->data_in(store_ctrl_int);
    regslice_forward_store_ctrl_U->vld_in(store_ctrl_ap_vld_int);
    regslice_forward_store_ctrl_U->ack_in(store_ctrl_ap_ack_int);
    regslice_forward_store_ctrl_U->data_out(store_ctrl);
    regslice_forward_store_ctrl_U->vld_out(regslice_forward_store_ctrl_U_vld_out);
    regslice_forward_store_ctrl_U->ack_out(store_ctrl_ap_ack);
    regslice_forward_store_ctrl_U->apdone_blk(regslice_forward_store_ctrl_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln44_fu_141_p2);
    sensitive << ( mac_vec_read_reg_258 );

    SC_METHOD(thread_add_ln45_1_fu_169_p2);
    sensitive << ( or_ln45_fu_163_p2 );

    SC_METHOD(thread_add_ln45_fu_158_p2);
    sensitive << ( mul_ln45_reg_268 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( mac_n_empty_n );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( chunk_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_forward_store_ctrl_U_apdone_blk );
    sensitive << ( icmp_ln56_fu_227_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_forward_store_ctrl_U_apdone_blk );
    sensitive << ( icmp_ln56_fu_227_p2 );

    SC_METHOD(thread_chunk_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( chunk_empty_n );

    SC_METHOD(thread_chunk_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_n_empty_n );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( chunk_empty_n );

    SC_METHOD(thread_dma_index_1_fu_212_p1);
    sensitive << ( dma_index_fu_202_p4 );

    SC_METHOD(thread_dma_index_fu_202_p4);
    sensitive << ( index_fu_195_p2 );

    SC_METHOD(thread_dma_length_1_fu_199_p1);
    sensitive << ( dma_length_reg_283 );

    SC_METHOD(thread_i_fu_232_p2);
    sensitive << ( i_0_i_i_reg_124 );

    SC_METHOD(thread_icmp_ln56_fu_227_p2);
    sensitive << ( dma_length_reg_283 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_forward_store_ctrl_U_apdone_blk );
    sensitive << ( i_0_i_i_reg_124 );

    SC_METHOD(thread_index_fu_195_p2);
    sensitive << ( store_offset_reg_273 );
    sensitive << ( mul_ln47_reg_278 );

    SC_METHOD(thread_length_fu_152_p2);
    sensitive << ( or_ln44_fu_146_p2 );

    SC_METHOD(thread_mac_len_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_len_empty_n );

    SC_METHOD(thread_mac_len_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_n_empty_n );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( chunk_empty_n );

    SC_METHOD(thread_mac_n_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_n_empty_n );

    SC_METHOD(thread_mac_n_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_n_empty_n );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( chunk_empty_n );

    SC_METHOD(thread_mac_vec_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_empty_n );

    SC_METHOD(thread_mac_vec_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_n_empty_n );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( chunk_empty_n );

    SC_METHOD(thread_mul_ln45_fu_135_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_dout );

    SC_METHOD(thread_mul_ln45_fu_135_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_len_dout );

    SC_METHOD(thread_mul_ln45_fu_135_p2);
    sensitive << ( mul_ln45_fu_135_p0 );
    sensitive << ( mul_ln45_fu_135_p1 );

    SC_METHOD(thread_mul_ln47_fu_180_p2);
    sensitive << ( chunk_read_reg_263 );
    sensitive << ( length_fu_152_p2 );

    SC_METHOD(thread_or_ln44_fu_146_p2);
    sensitive << ( add_ln44_fu_141_p2 );

    SC_METHOD(thread_or_ln45_fu_163_p2);
    sensitive << ( add_ln45_fu_158_p2 );

    SC_METHOD(thread_out_word_V_blk_n);
    sensitive << ( out_word_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_word_V_din);
    sensitive << ( p_outbuff_0_V_q0 );
    sensitive << ( p_outbuff_1_V_q0 );
    sensitive << ( out_word_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_word_V_write);
    sensitive << ( out_word_V_full_n );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_p_outbuff_0_V_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln180_fu_238_p1 );

    SC_METHOD(thread_p_outbuff_0_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_forward_store_ctrl_U_apdone_blk );

    SC_METHOD(thread_p_outbuff_1_V_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln180_fu_238_p1 );

    SC_METHOD(thread_p_outbuff_1_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_forward_store_ctrl_U_apdone_blk );

    SC_METHOD(thread_store_ctrl_ap_vld);
    sensitive << ( regslice_forward_store_ctrl_U_vld_out );

    SC_METHOD(thread_store_ctrl_ap_vld_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( store_ctrl_ap_ack_int );

    SC_METHOD(thread_store_ctrl_blk_n);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( store_ctrl_ap_ack_int );

    SC_METHOD(thread_store_ctrl_int);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( dma_length_1_fu_199_p1 );
    sensitive << ( dma_index_1_fu_212_p1 );

    SC_METHOD(thread_store_offset_fu_175_p2);
    sensitive << ( mac_n_read_reg_253 );
    sensitive << ( add_ln45_1_fu_169_p2 );

    SC_METHOD(thread_zext_ln180_fu_238_p1);
    sensitive << ( i_0_i_i_reg_124 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_word_V_full_n );
    sensitive << ( mac_n_empty_n );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( chunk_empty_n );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_forward_store_ctrl_U_apdone_blk );
    sensitive << ( icmp_ln56_fu_227_p2 );
    sensitive << ( store_ctrl_ap_ack_int );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mac_vivado_dma64_w32_store_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_outbuff_0_V_address0, "(port)p_outbuff_0_V_address0");
    sc_trace(mVcdFile, p_outbuff_0_V_ce0, "(port)p_outbuff_0_V_ce0");
    sc_trace(mVcdFile, p_outbuff_0_V_q0, "(port)p_outbuff_0_V_q0");
    sc_trace(mVcdFile, p_outbuff_1_V_address0, "(port)p_outbuff_1_V_address0");
    sc_trace(mVcdFile, p_outbuff_1_V_ce0, "(port)p_outbuff_1_V_ce0");
    sc_trace(mVcdFile, p_outbuff_1_V_q0, "(port)p_outbuff_1_V_q0");
    sc_trace(mVcdFile, out_word_V_din, "(port)out_word_V_din");
    sc_trace(mVcdFile, out_word_V_full_n, "(port)out_word_V_full_n");
    sc_trace(mVcdFile, out_word_V_write, "(port)out_word_V_write");
    sc_trace(mVcdFile, mac_n_dout, "(port)mac_n_dout");
    sc_trace(mVcdFile, mac_n_empty_n, "(port)mac_n_empty_n");
    sc_trace(mVcdFile, mac_n_read, "(port)mac_n_read");
    sc_trace(mVcdFile, mac_vec_dout, "(port)mac_vec_dout");
    sc_trace(mVcdFile, mac_vec_empty_n, "(port)mac_vec_empty_n");
    sc_trace(mVcdFile, mac_vec_read, "(port)mac_vec_read");
    sc_trace(mVcdFile, mac_len_dout, "(port)mac_len_dout");
    sc_trace(mVcdFile, mac_len_empty_n, "(port)mac_len_empty_n");
    sc_trace(mVcdFile, mac_len_read, "(port)mac_len_read");
    sc_trace(mVcdFile, store_ctrl, "(port)store_ctrl");
    sc_trace(mVcdFile, store_ctrl_ap_vld, "(port)store_ctrl_ap_vld");
    sc_trace(mVcdFile, store_ctrl_ap_ack, "(port)store_ctrl_ap_ack");
    sc_trace(mVcdFile, chunk_dout, "(port)chunk_dout");
    sc_trace(mVcdFile, chunk_empty_n, "(port)chunk_empty_n");
    sc_trace(mVcdFile, chunk_read, "(port)chunk_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_word_V_blk_n, "out_word_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, mac_n_blk_n, "mac_n_blk_n");
    sc_trace(mVcdFile, mac_vec_blk_n, "mac_vec_blk_n");
    sc_trace(mVcdFile, mac_len_blk_n, "mac_len_blk_n");
    sc_trace(mVcdFile, store_ctrl_blk_n, "store_ctrl_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, chunk_blk_n, "chunk_blk_n");
    sc_trace(mVcdFile, mac_n_read_reg_253, "mac_n_read_reg_253");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, mac_vec_read_reg_258, "mac_vec_read_reg_258");
    sc_trace(mVcdFile, chunk_read_reg_263, "chunk_read_reg_263");
    sc_trace(mVcdFile, mul_ln45_fu_135_p2, "mul_ln45_fu_135_p2");
    sc_trace(mVcdFile, mul_ln45_reg_268, "mul_ln45_reg_268");
    sc_trace(mVcdFile, store_offset_fu_175_p2, "store_offset_fu_175_p2");
    sc_trace(mVcdFile, store_offset_reg_273, "store_offset_reg_273");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, mul_ln47_fu_180_p2, "mul_ln47_fu_180_p2");
    sc_trace(mVcdFile, mul_ln47_reg_278, "mul_ln47_reg_278");
    sc_trace(mVcdFile, dma_length_reg_283, "dma_length_reg_283");
    sc_trace(mVcdFile, i_fu_232_p2, "i_fu_232_p2");
    sc_trace(mVcdFile, i_reg_297, "i_reg_297");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, regslice_forward_store_ctrl_U_apdone_blk, "regslice_forward_store_ctrl_U_apdone_blk");
    sc_trace(mVcdFile, icmp_ln56_fu_227_p2, "icmp_ln56_fu_227_p2");
    sc_trace(mVcdFile, i_0_i_i_reg_124, "i_0_i_i_reg_124");
    sc_trace(mVcdFile, zext_ln180_fu_238_p1, "zext_ln180_fu_238_p1");
    sc_trace(mVcdFile, mul_ln45_fu_135_p0, "mul_ln45_fu_135_p0");
    sc_trace(mVcdFile, mul_ln45_fu_135_p1, "mul_ln45_fu_135_p1");
    sc_trace(mVcdFile, add_ln44_fu_141_p2, "add_ln44_fu_141_p2");
    sc_trace(mVcdFile, or_ln44_fu_146_p2, "or_ln44_fu_146_p2");
    sc_trace(mVcdFile, add_ln45_fu_158_p2, "add_ln45_fu_158_p2");
    sc_trace(mVcdFile, or_ln45_fu_163_p2, "or_ln45_fu_163_p2");
    sc_trace(mVcdFile, add_ln45_1_fu_169_p2, "add_ln45_1_fu_169_p2");
    sc_trace(mVcdFile, length_fu_152_p2, "length_fu_152_p2");
    sc_trace(mVcdFile, index_fu_195_p2, "index_fu_195_p2");
    sc_trace(mVcdFile, dma_index_fu_202_p4, "dma_index_fu_202_p4");
    sc_trace(mVcdFile, dma_length_1_fu_199_p1, "dma_length_1_fu_199_p1");
    sc_trace(mVcdFile, dma_index_1_fu_212_p1, "dma_index_1_fu_212_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, store_ctrl_int, "store_ctrl_int");
    sc_trace(mVcdFile, store_ctrl_ap_vld_int, "store_ctrl_ap_vld_int");
    sc_trace(mVcdFile, store_ctrl_ap_ack_int, "store_ctrl_ap_ack_int");
    sc_trace(mVcdFile, regslice_forward_store_ctrl_U_vld_out, "regslice_forward_store_ctrl_U_vld_out");
#endif

    }
}

mac_vivado_dma64_w32_store::~mac_vivado_dma64_w32_store() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_forward_store_ctrl_U;
}

void mac_vivado_dma64_w32_store::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                    esl_seteq<1,1,1>(regslice_forward_store_ctrl_U_apdone_blk.read(), ap_const_logic_0) && 
                    esl_seteq<1,1,1>(icmp_ln56_fu_227_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(out_word_V_full_n.read(), ap_const_logic_1))) {
        i_0_i_i_reg_124 = i_reg_297.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(store_ctrl_ap_ack_int.read(), ap_const_logic_1))) {
        i_0_i_i_reg_124 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_n_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_empty_n.read())))) {
        chunk_read_reg_263 = chunk_dout.read();
        mac_n_read_reg_253 = mac_n_dout.read();
        mac_vec_read_reg_258 = mac_vec_dout.read();
        mul_ln45_reg_268 = mul_ln45_fu_135_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        dma_length_reg_283 = length_fu_152_p2.read().range(31, 1);
        mul_ln47_reg_278 = mul_ln47_fu_180_p2.read();
        store_offset_reg_273 = store_offset_fu_175_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(regslice_forward_store_ctrl_U_apdone_blk.read(), ap_const_logic_0))) {
        i_reg_297 = i_fu_232_p2.read();
    }
}

void mac_vivado_dma64_w32_store::thread_add_ln44_fu_141_p2() {
    add_ln44_fu_141_p2 = (!mac_vec_read_reg_258.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_bigint<32>(mac_vec_read_reg_258.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void mac_vivado_dma64_w32_store::thread_add_ln45_1_fu_169_p2() {
    add_ln45_1_fu_169_p2 = (!or_ln45_fu_163_p2.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(or_ln45_fu_163_p2.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void mac_vivado_dma64_w32_store::thread_add_ln45_fu_158_p2() {
    add_ln45_fu_158_p2 = (!mul_ln45_reg_268.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln45_reg_268.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void mac_vivado_dma64_w32_store::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mac_vivado_dma64_w32_store::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mac_vivado_dma64_w32_store::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mac_vivado_dma64_w32_store::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mac_vivado_dma64_w32_store::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mac_vivado_dma64_w32_store::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mac_vivado_dma64_w32_store::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_n_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_empty_n.read()));
}

void mac_vivado_dma64_w32_store::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_forward_store_ctrl_U_apdone_blk.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(icmp_ln56_fu_227_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void mac_vivado_dma64_w32_store::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_store::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_forward_store_ctrl_U_apdone_blk.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(icmp_ln56_fu_227_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_store::thread_chunk_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        chunk_blk_n = chunk_empty_n.read();
    } else {
        chunk_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_store::thread_chunk_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_n_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_empty_n.read())))) {
        chunk_read = ap_const_logic_1;
    } else {
        chunk_read = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_store::thread_dma_index_1_fu_212_p1() {
    dma_index_1_fu_212_p1 = esl_zext<32,31>(dma_index_fu_202_p4.read());
}

void mac_vivado_dma64_w32_store::thread_dma_index_fu_202_p4() {
    dma_index_fu_202_p4 = index_fu_195_p2.read().range(31, 1);
}

void mac_vivado_dma64_w32_store::thread_dma_length_1_fu_199_p1() {
    dma_length_1_fu_199_p1 = esl_zext<32,31>(dma_length_reg_283.read());
}

void mac_vivado_dma64_w32_store::thread_i_fu_232_p2() {
    i_fu_232_p2 = (!i_0_i_i_reg_124.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_i_i_reg_124.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void mac_vivado_dma64_w32_store::thread_icmp_ln56_fu_227_p2() {
    icmp_ln56_fu_227_p2 = (!i_0_i_i_reg_124.read().is_01() || !dma_length_reg_283.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_reg_124.read() == dma_length_reg_283.read());
}

void mac_vivado_dma64_w32_store::thread_index_fu_195_p2() {
    index_fu_195_p2 = (!mul_ln47_reg_278.read().is_01() || !store_offset_reg_273.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln47_reg_278.read()) + sc_biguint<32>(store_offset_reg_273.read()));
}

void mac_vivado_dma64_w32_store::thread_length_fu_152_p2() {
    length_fu_152_p2 = (!or_ln44_fu_146_p2.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(or_ln44_fu_146_p2.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void mac_vivado_dma64_w32_store::thread_mac_len_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        mac_len_blk_n = mac_len_empty_n.read();
    } else {
        mac_len_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_store::thread_mac_len_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_n_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_empty_n.read())))) {
        mac_len_read = ap_const_logic_1;
    } else {
        mac_len_read = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_store::thread_mac_n_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        mac_n_blk_n = mac_n_empty_n.read();
    } else {
        mac_n_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_store::thread_mac_n_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_n_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_empty_n.read())))) {
        mac_n_read = ap_const_logic_1;
    } else {
        mac_n_read = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_store::thread_mac_vec_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        mac_vec_blk_n = mac_vec_empty_n.read();
    } else {
        mac_vec_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_store::thread_mac_vec_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_n_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_empty_n.read())))) {
        mac_vec_read = ap_const_logic_1;
    } else {
        mac_vec_read = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_store::thread_mul_ln45_fu_135_p0() {
    mul_ln45_fu_135_p0 = mac_vec_dout.read();
}

void mac_vivado_dma64_w32_store::thread_mul_ln45_fu_135_p1() {
    mul_ln45_fu_135_p1 = mac_len_dout.read();
}

void mac_vivado_dma64_w32_store::thread_mul_ln45_fu_135_p2() {
    mul_ln45_fu_135_p2 = (!mul_ln45_fu_135_p0.read().is_01() || !mul_ln45_fu_135_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln45_fu_135_p0.read()) * sc_bigint<32>(mul_ln45_fu_135_p1.read());
}

void mac_vivado_dma64_w32_store::thread_mul_ln47_fu_180_p2() {
    mul_ln47_fu_180_p2 = (!chunk_read_reg_263.read().is_01() || !length_fu_152_p2.read().is_01())? sc_lv<32>(): sc_bigint<32>(chunk_read_reg_263.read()) * sc_bigint<32>(length_fu_152_p2.read());
}

void mac_vivado_dma64_w32_store::thread_or_ln44_fu_146_p2() {
    or_ln44_fu_146_p2 = (add_ln44_fu_141_p2.read() | ap_const_lv32_1);
}

void mac_vivado_dma64_w32_store::thread_or_ln45_fu_163_p2() {
    or_ln45_fu_163_p2 = (add_ln45_fu_158_p2.read() | ap_const_lv32_1);
}

void mac_vivado_dma64_w32_store::thread_out_word_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_word_V_blk_n = out_word_V_full_n.read();
    } else {
        out_word_V_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_store::thread_out_word_V_din() {
    out_word_V_din = esl_concat<32,32>(p_outbuff_1_V_q0.read(), p_outbuff_0_V_q0.read());
}

void mac_vivado_dma64_w32_store::thread_out_word_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(out_word_V_full_n.read(), ap_const_logic_1))) {
        out_word_V_write = ap_const_logic_1;
    } else {
        out_word_V_write = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_store::thread_p_outbuff_0_V_address0() {
    p_outbuff_0_V_address0 =  (sc_lv<6>) (zext_ln180_fu_238_p1.read());
}

void mac_vivado_dma64_w32_store::thread_p_outbuff_0_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_forward_store_ctrl_U_apdone_blk.read(), ap_const_logic_0))) {
        p_outbuff_0_V_ce0 = ap_const_logic_1;
    } else {
        p_outbuff_0_V_ce0 = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_store::thread_p_outbuff_1_V_address0() {
    p_outbuff_1_V_address0 =  (sc_lv<6>) (zext_ln180_fu_238_p1.read());
}

void mac_vivado_dma64_w32_store::thread_p_outbuff_1_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_forward_store_ctrl_U_apdone_blk.read(), ap_const_logic_0))) {
        p_outbuff_1_V_ce0 = ap_const_logic_1;
    } else {
        p_outbuff_1_V_ce0 = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_store::thread_store_ctrl_ap_vld() {
    store_ctrl_ap_vld = regslice_forward_store_ctrl_U_vld_out.read();
}

void mac_vivado_dma64_w32_store::thread_store_ctrl_ap_vld_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(store_ctrl_ap_ack_int.read(), ap_const_logic_1))) {
        store_ctrl_ap_vld_int = ap_const_logic_1;
    } else {
        store_ctrl_ap_vld_int = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_store::thread_store_ctrl_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        store_ctrl_blk_n = store_ctrl_ap_ack_int.read();
    } else {
        store_ctrl_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_store::thread_store_ctrl_int() {
    store_ctrl_int = esl_concat<64,32>(esl_concat<32,32>(ap_const_lv32_2, dma_length_1_fu_199_p1.read()), dma_index_1_fu_212_p1.read());
}

void mac_vivado_dma64_w32_store::thread_store_offset_fu_175_p2() {
    store_offset_fu_175_p2 = (!mac_n_read_reg_253.read().is_01() || !add_ln45_1_fu_169_p2.read().is_01())? sc_lv<32>(): sc_bigint<32>(mac_n_read_reg_253.read()) * sc_bigint<32>(add_ln45_1_fu_169_p2.read());
}

void mac_vivado_dma64_w32_store::thread_zext_ln180_fu_238_p1() {
    zext_ln180_fu_238_p1 = esl_zext<64,31>(i_0_i_i_reg_124.read());
}

void mac_vivado_dma64_w32_store::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_n_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(store_ctrl_ap_ack_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(store_ctrl_ap_ack_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(regslice_forward_store_ctrl_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(icmp_ln56_fu_227_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(regslice_forward_store_ctrl_U_apdone_blk.read(), ap_const_logic_0) && esl_seteq<1,1,1>(icmp_ln56_fu_227_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(out_word_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

}

