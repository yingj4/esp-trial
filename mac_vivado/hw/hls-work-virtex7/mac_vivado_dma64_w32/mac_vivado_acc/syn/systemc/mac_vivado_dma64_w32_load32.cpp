// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mac_vivado_dma64_w32_load32.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mac_vivado_dma64_w32_load32::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mac_vivado_dma64_w32_load32::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> mac_vivado_dma64_w32_load32::ap_ST_fsm_state1 = "1";
const sc_lv<4> mac_vivado_dma64_w32_load32::ap_ST_fsm_state2 = "10";
const sc_lv<4> mac_vivado_dma64_w32_load32::ap_ST_fsm_state3 = "100";
const sc_lv<4> mac_vivado_dma64_w32_load32::ap_ST_fsm_state4 = "1000";
const sc_lv<32> mac_vivado_dma64_w32_load32::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mac_vivado_dma64_w32_load32::ap_const_lv32_3 = "11";
const sc_lv<1> mac_vivado_dma64_w32_load32::ap_const_lv1_0 = "0";
const sc_lv<32> mac_vivado_dma64_w32_load32::ap_const_lv32_1 = "1";
const sc_lv<32> mac_vivado_dma64_w32_load32::ap_const_lv32_2 = "10";
const sc_lv<31> mac_vivado_dma64_w32_load32::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> mac_vivado_dma64_w32_load32::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> mac_vivado_dma64_w32_load32::ap_const_lv32_1F = "11111";
const sc_lv<31> mac_vivado_dma64_w32_load32::ap_const_lv31_1 = "1";
const sc_lv<8> mac_vivado_dma64_w32_load32::ap_const_lv8_20 = "100000";
const sc_lv<8> mac_vivado_dma64_w32_load32::ap_const_lv8_3F = "111111";
const sc_lv<1> mac_vivado_dma64_w32_load32::ap_const_lv1_1 = "1";
const bool mac_vivado_dma64_w32_load32::ap_const_boolean_1 = true;

mac_vivado_dma64_w32_load32::mac_vivado_dma64_w32_load32(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_forward_load_ctrl_U = new mac_vivado_dma64_w32_regslice_forward<96>("regslice_forward_load_ctrl_U");
    regslice_forward_load_ctrl_U->ap_clk(ap_clk);
    regslice_forward_load_ctrl_U->ap_rst(ap_rst);
    regslice_forward_load_ctrl_U->data_in(load_ctrl_int);
    regslice_forward_load_ctrl_U->vld_in(load_ctrl_ap_vld_int);
    regslice_forward_load_ctrl_U->ack_in(load_ctrl_ap_ack_int);
    regslice_forward_load_ctrl_U->data_out(load_ctrl);
    regslice_forward_load_ctrl_U->vld_out(regslice_forward_load_ctrl_U_vld_out);
    regslice_forward_load_ctrl_U->ack_out(load_ctrl_ap_ack);
    regslice_forward_load_ctrl_U->apdone_blk(regslice_forward_load_ctrl_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln18_fu_186_p2);
    sensitive << ( mul_ln18_reg_285 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( chunk_out_full_n );
    sensitive << ( conf_info_mac_n_out_full_n );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( icmp_ln28_fu_247_p2 );
    sensitive << ( regslice_forward_load_ctrl_U_apdone_blk );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln28_fu_247_p2 );
    sensitive << ( regslice_forward_load_ctrl_U_apdone_blk );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln28_fu_247_p2 );
    sensitive << ( regslice_forward_load_ctrl_U_apdone_blk );

    SC_METHOD(thread_chunk_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( chunk_out_full_n );

    SC_METHOD(thread_chunk_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( chunk );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( chunk_out_full_n );
    sensitive << ( conf_info_mac_n_out_full_n );

    SC_METHOD(thread_chunk_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( chunk_out_full_n );
    sensitive << ( conf_info_mac_n_out_full_n );

    SC_METHOD(thread_conf_info_mac_n_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( conf_info_mac_n_out_full_n );

    SC_METHOD(thread_conf_info_mac_n_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( conf_info_mac_n );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( chunk_out_full_n );
    sensitive << ( conf_info_mac_n_out_full_n );

    SC_METHOD(thread_conf_info_mac_n_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( chunk_out_full_n );
    sensitive << ( conf_info_mac_n_out_full_n );

    SC_METHOD(thread_dma_index_2_fu_232_p1);
    sensitive << ( dma_index_fu_222_p4 );

    SC_METHOD(thread_dma_index_fu_222_p4);
    sensitive << ( index_fu_203_p2 );

    SC_METHOD(thread_dma_length_2_fu_218_p1);
    sensitive << ( dma_length_fu_208_p4 );

    SC_METHOD(thread_dma_length_fu_208_p4);
    sensitive << ( length_fu_197_p2 );

    SC_METHOD(thread_i_fu_252_p2);
    sensitive << ( i_0_i_i_i_reg_169 );

    SC_METHOD(thread_icmp_ln28_fu_247_p2);
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln28_fu_247_p2 );
    sensitive << ( dma_length_reg_290 );
    sensitive << ( regslice_forward_load_ctrl_U_apdone_blk );
    sensitive << ( i_0_i_i_i_reg_169 );

    SC_METHOD(thread_in1_word_V_blk_n);
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln28_fu_247_p2 );

    SC_METHOD(thread_in1_word_V_read);
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln28_fu_247_p2 );
    sensitive << ( regslice_forward_load_ctrl_U_apdone_blk );

    SC_METHOD(thread_index_fu_203_p1);
    sensitive << ( chunk );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_index_fu_203_p2);
    sensitive << ( length_fu_197_p2 );
    sensitive << ( index_fu_203_p1 );

    SC_METHOD(thread_length_fu_197_p2);
    sensitive << ( or_ln18_fu_191_p2 );

    SC_METHOD(thread_load_ctrl_ap_vld);
    sensitive << ( regslice_forward_load_ctrl_U_vld_out );

    SC_METHOD(thread_load_ctrl_ap_vld_int);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( load_ctrl_ap_ack_int );

    SC_METHOD(thread_load_ctrl_blk_n);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( load_ctrl_ap_ack_int );

    SC_METHOD(thread_load_ctrl_int);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( dma_length_2_fu_218_p1 );
    sensitive << ( dma_index_2_fu_232_p1 );

    SC_METHOD(thread_mac_len_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_len_out_full_n );

    SC_METHOD(thread_mac_len_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_len );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( chunk_out_full_n );
    sensitive << ( conf_info_mac_n_out_full_n );

    SC_METHOD(thread_mac_len_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( chunk_out_full_n );
    sensitive << ( conf_info_mac_n_out_full_n );

    SC_METHOD(thread_mac_vec_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_out_full_n );

    SC_METHOD(thread_mac_vec_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( chunk_out_full_n );
    sensitive << ( conf_info_mac_n_out_full_n );

    SC_METHOD(thread_mac_vec_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( chunk_out_full_n );
    sensitive << ( conf_info_mac_n_out_full_n );

    SC_METHOD(thread_mul_ln18_fu_180_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec );

    SC_METHOD(thread_mul_ln18_fu_180_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_len );

    SC_METHOD(thread_mul_ln18_fu_180_p2);
    sensitive << ( mul_ln18_fu_180_p0 );
    sensitive << ( mul_ln18_fu_180_p1 );

    SC_METHOD(thread_or_ln18_fu_191_p2);
    sensitive << ( add_ln18_fu_186_p2 );

    SC_METHOD(thread_p_inbuff_0_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln180_fu_263_p1 );

    SC_METHOD(thread_p_inbuff_0_V_ce0);
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln28_fu_247_p2 );
    sensitive << ( regslice_forward_load_ctrl_U_apdone_blk );

    SC_METHOD(thread_p_inbuff_0_V_d0);
    sensitive << ( in1_word_V_dout );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_p_inbuff_0_V_we0);
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln28_fu_247_p2 );
    sensitive << ( regslice_forward_load_ctrl_U_apdone_blk );

    SC_METHOD(thread_p_inbuff_1_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln180_fu_263_p1 );

    SC_METHOD(thread_p_inbuff_1_V_ce0);
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln28_fu_247_p2 );
    sensitive << ( regslice_forward_load_ctrl_U_apdone_blk );

    SC_METHOD(thread_p_inbuff_1_V_d0);
    sensitive << ( in1_word_V_dout );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_p_inbuff_1_V_we0);
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln28_fu_247_p2 );
    sensitive << ( regslice_forward_load_ctrl_U_apdone_blk );

    SC_METHOD(thread_zext_ln180_fu_263_p1);
    sensitive << ( i_0_i_i_i_reg_169 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in1_word_V_empty_n );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( chunk_out_full_n );
    sensitive << ( conf_info_mac_n_out_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln28_fu_247_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( regslice_forward_load_ctrl_U_apdone_blk );
    sensitive << ( load_ctrl_ap_ack_int );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mac_vivado_dma64_w32_load32_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_inbuff_0_V_address0, "(port)p_inbuff_0_V_address0");
    sc_trace(mVcdFile, p_inbuff_0_V_ce0, "(port)p_inbuff_0_V_ce0");
    sc_trace(mVcdFile, p_inbuff_0_V_we0, "(port)p_inbuff_0_V_we0");
    sc_trace(mVcdFile, p_inbuff_0_V_d0, "(port)p_inbuff_0_V_d0");
    sc_trace(mVcdFile, p_inbuff_1_V_address0, "(port)p_inbuff_1_V_address0");
    sc_trace(mVcdFile, p_inbuff_1_V_ce0, "(port)p_inbuff_1_V_ce0");
    sc_trace(mVcdFile, p_inbuff_1_V_we0, "(port)p_inbuff_1_V_we0");
    sc_trace(mVcdFile, p_inbuff_1_V_d0, "(port)p_inbuff_1_V_d0");
    sc_trace(mVcdFile, in1_word_V_dout, "(port)in1_word_V_dout");
    sc_trace(mVcdFile, in1_word_V_empty_n, "(port)in1_word_V_empty_n");
    sc_trace(mVcdFile, in1_word_V_read, "(port)in1_word_V_read");
    sc_trace(mVcdFile, mac_vec, "(port)mac_vec");
    sc_trace(mVcdFile, mac_len, "(port)mac_len");
    sc_trace(mVcdFile, load_ctrl, "(port)load_ctrl");
    sc_trace(mVcdFile, load_ctrl_ap_vld, "(port)load_ctrl_ap_vld");
    sc_trace(mVcdFile, load_ctrl_ap_ack, "(port)load_ctrl_ap_ack");
    sc_trace(mVcdFile, chunk, "(port)chunk");
    sc_trace(mVcdFile, conf_info_mac_n, "(port)conf_info_mac_n");
    sc_trace(mVcdFile, mac_vec_out_din, "(port)mac_vec_out_din");
    sc_trace(mVcdFile, mac_vec_out_full_n, "(port)mac_vec_out_full_n");
    sc_trace(mVcdFile, mac_vec_out_write, "(port)mac_vec_out_write");
    sc_trace(mVcdFile, mac_len_out_din, "(port)mac_len_out_din");
    sc_trace(mVcdFile, mac_len_out_full_n, "(port)mac_len_out_full_n");
    sc_trace(mVcdFile, mac_len_out_write, "(port)mac_len_out_write");
    sc_trace(mVcdFile, chunk_out_din, "(port)chunk_out_din");
    sc_trace(mVcdFile, chunk_out_full_n, "(port)chunk_out_full_n");
    sc_trace(mVcdFile, chunk_out_write, "(port)chunk_out_write");
    sc_trace(mVcdFile, conf_info_mac_n_out_din, "(port)conf_info_mac_n_out_din");
    sc_trace(mVcdFile, conf_info_mac_n_out_full_n, "(port)conf_info_mac_n_out_full_n");
    sc_trace(mVcdFile, conf_info_mac_n_out_write, "(port)conf_info_mac_n_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in1_word_V_blk_n, "in1_word_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln28_fu_247_p2, "icmp_ln28_fu_247_p2");
    sc_trace(mVcdFile, load_ctrl_blk_n, "load_ctrl_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, mac_vec_out_blk_n, "mac_vec_out_blk_n");
    sc_trace(mVcdFile, mac_len_out_blk_n, "mac_len_out_blk_n");
    sc_trace(mVcdFile, chunk_out_blk_n, "chunk_out_blk_n");
    sc_trace(mVcdFile, conf_info_mac_n_out_blk_n, "conf_info_mac_n_out_blk_n");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, mul_ln18_fu_180_p2, "mul_ln18_fu_180_p2");
    sc_trace(mVcdFile, mul_ln18_reg_285, "mul_ln18_reg_285");
    sc_trace(mVcdFile, dma_length_fu_208_p4, "dma_length_fu_208_p4");
    sc_trace(mVcdFile, dma_length_reg_290, "dma_length_reg_290");
    sc_trace(mVcdFile, i_fu_252_p2, "i_fu_252_p2");
    sc_trace(mVcdFile, regslice_forward_load_ctrl_U_apdone_blk, "regslice_forward_load_ctrl_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, i_0_i_i_i_reg_169, "i_0_i_i_i_reg_169");
    sc_trace(mVcdFile, zext_ln180_fu_263_p1, "zext_ln180_fu_263_p1");
    sc_trace(mVcdFile, mul_ln18_fu_180_p0, "mul_ln18_fu_180_p0");
    sc_trace(mVcdFile, mul_ln18_fu_180_p1, "mul_ln18_fu_180_p1");
    sc_trace(mVcdFile, add_ln18_fu_186_p2, "add_ln18_fu_186_p2");
    sc_trace(mVcdFile, or_ln18_fu_191_p2, "or_ln18_fu_191_p2");
    sc_trace(mVcdFile, length_fu_197_p2, "length_fu_197_p2");
    sc_trace(mVcdFile, index_fu_203_p1, "index_fu_203_p1");
    sc_trace(mVcdFile, index_fu_203_p2, "index_fu_203_p2");
    sc_trace(mVcdFile, dma_index_fu_222_p4, "dma_index_fu_222_p4");
    sc_trace(mVcdFile, dma_length_2_fu_218_p1, "dma_length_2_fu_218_p1");
    sc_trace(mVcdFile, dma_index_2_fu_232_p1, "dma_index_2_fu_232_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, load_ctrl_int, "load_ctrl_int");
    sc_trace(mVcdFile, load_ctrl_ap_vld_int, "load_ctrl_ap_vld_int");
    sc_trace(mVcdFile, load_ctrl_ap_ack_int, "load_ctrl_ap_ack_int");
    sc_trace(mVcdFile, regslice_forward_load_ctrl_U_vld_out, "regslice_forward_load_ctrl_U_vld_out");
#endif

    }
}

mac_vivado_dma64_w32_load32::~mac_vivado_dma64_w32_load32() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_forward_load_ctrl_U;
}

void mac_vivado_dma64_w32_load32::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())) && 
                    esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())))) {
        i_0_i_i_i_reg_169 = i_fu_252_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(load_ctrl_ap_ack_int.read(), ap_const_logic_1))) {
        i_0_i_i_i_reg_169 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(load_ctrl_ap_ack_int.read(), ap_const_logic_1))) {
        dma_length_reg_290 = length_fu_197_p2.read().range(31, 1);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, conf_info_mac_n_out_full_n.read())))) {
        mul_ln18_reg_285 = mul_ln18_fu_180_p2.read();
    }
}

void mac_vivado_dma64_w32_load32::thread_add_ln18_fu_186_p2() {
    add_ln18_fu_186_p2 = (!mul_ln18_reg_285.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln18_reg_285.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void mac_vivado_dma64_w32_load32::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mac_vivado_dma64_w32_load32::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mac_vivado_dma64_w32_load32::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mac_vivado_dma64_w32_load32::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mac_vivado_dma64_w32_load32::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, conf_info_mac_n_out_full_n.read()));
}

void mac_vivado_dma64_w32_load32::thread_ap_block_state4() {
    ap_block_state4 = ((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read()));
}

void mac_vivado_dma64_w32_load32::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())) && 
         esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void mac_vivado_dma64_w32_load32::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())) && 
         esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_chunk_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        chunk_out_blk_n = chunk_out_full_n.read();
    } else {
        chunk_out_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_load32::thread_chunk_out_din() {
    chunk_out_din = chunk.read();
}

void mac_vivado_dma64_w32_load32::thread_chunk_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, conf_info_mac_n_out_full_n.read())))) {
        chunk_out_write = ap_const_logic_1;
    } else {
        chunk_out_write = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_conf_info_mac_n_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        conf_info_mac_n_out_blk_n = conf_info_mac_n_out_full_n.read();
    } else {
        conf_info_mac_n_out_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_load32::thread_conf_info_mac_n_out_din() {
    conf_info_mac_n_out_din = conf_info_mac_n.read();
}

void mac_vivado_dma64_w32_load32::thread_conf_info_mac_n_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, conf_info_mac_n_out_full_n.read())))) {
        conf_info_mac_n_out_write = ap_const_logic_1;
    } else {
        conf_info_mac_n_out_write = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_dma_index_2_fu_232_p1() {
    dma_index_2_fu_232_p1 = esl_zext<32,31>(dma_index_fu_222_p4.read());
}

void mac_vivado_dma64_w32_load32::thread_dma_index_fu_222_p4() {
    dma_index_fu_222_p4 = index_fu_203_p2.read().range(31, 1);
}

void mac_vivado_dma64_w32_load32::thread_dma_length_2_fu_218_p1() {
    dma_length_2_fu_218_p1 = esl_zext<32,31>(dma_length_fu_208_p4.read());
}

void mac_vivado_dma64_w32_load32::thread_dma_length_fu_208_p4() {
    dma_length_fu_208_p4 = length_fu_197_p2.read().range(31, 1);
}

void mac_vivado_dma64_w32_load32::thread_i_fu_252_p2() {
    i_fu_252_p2 = (!i_0_i_i_i_reg_169.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_i_i_i_reg_169.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void mac_vivado_dma64_w32_load32::thread_icmp_ln28_fu_247_p2() {
    icmp_ln28_fu_247_p2 = (!i_0_i_i_i_reg_169.read().is_01() || !dma_length_reg_290.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_i_reg_169.read() == dma_length_reg_290.read());
}

void mac_vivado_dma64_w32_load32::thread_in1_word_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0))) {
        in1_word_V_blk_n = in1_word_V_empty_n.read();
    } else {
        in1_word_V_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_load32::thread_in1_word_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())))) {
        in1_word_V_read = ap_const_logic_1;
    } else {
        in1_word_V_read = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_index_fu_203_p1() {
    index_fu_203_p1 = chunk.read();
}

void mac_vivado_dma64_w32_load32::thread_index_fu_203_p2() {
    index_fu_203_p2 = (!length_fu_197_p2.read().is_01() || !index_fu_203_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(length_fu_197_p2.read()) * sc_bigint<32>(index_fu_203_p1.read());
}

void mac_vivado_dma64_w32_load32::thread_length_fu_197_p2() {
    length_fu_197_p2 = (!or_ln18_fu_191_p2.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(or_ln18_fu_191_p2.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void mac_vivado_dma64_w32_load32::thread_load_ctrl_ap_vld() {
    load_ctrl_ap_vld = regslice_forward_load_ctrl_U_vld_out.read();
}

void mac_vivado_dma64_w32_load32::thread_load_ctrl_ap_vld_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(load_ctrl_ap_ack_int.read(), ap_const_logic_1))) {
        load_ctrl_ap_vld_int = ap_const_logic_1;
    } else {
        load_ctrl_ap_vld_int = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_load_ctrl_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        load_ctrl_blk_n = load_ctrl_ap_ack_int.read();
    } else {
        load_ctrl_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_load32::thread_load_ctrl_int() {
    load_ctrl_int = esl_concat<64,32>(esl_concat<32,32>(ap_const_lv32_2, dma_length_2_fu_218_p1.read()), dma_index_2_fu_232_p1.read());
}

void mac_vivado_dma64_w32_load32::thread_mac_len_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        mac_len_out_blk_n = mac_len_out_full_n.read();
    } else {
        mac_len_out_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_load32::thread_mac_len_out_din() {
    mac_len_out_din = mac_len.read();
}

void mac_vivado_dma64_w32_load32::thread_mac_len_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, conf_info_mac_n_out_full_n.read())))) {
        mac_len_out_write = ap_const_logic_1;
    } else {
        mac_len_out_write = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_mac_vec_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        mac_vec_out_blk_n = mac_vec_out_full_n.read();
    } else {
        mac_vec_out_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma64_w32_load32::thread_mac_vec_out_din() {
    mac_vec_out_din = mac_vec.read();
}

void mac_vivado_dma64_w32_load32::thread_mac_vec_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, conf_info_mac_n_out_full_n.read())))) {
        mac_vec_out_write = ap_const_logic_1;
    } else {
        mac_vec_out_write = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_mul_ln18_fu_180_p0() {
    mul_ln18_fu_180_p0 = mac_vec.read();
}

void mac_vivado_dma64_w32_load32::thread_mul_ln18_fu_180_p1() {
    mul_ln18_fu_180_p1 = mac_len.read();
}

void mac_vivado_dma64_w32_load32::thread_mul_ln18_fu_180_p2() {
    mul_ln18_fu_180_p2 = (!mul_ln18_fu_180_p0.read().is_01() || !mul_ln18_fu_180_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln18_fu_180_p0.read()) * sc_bigint<32>(mul_ln18_fu_180_p1.read());
}

void mac_vivado_dma64_w32_load32::thread_or_ln18_fu_191_p2() {
    or_ln18_fu_191_p2 = (add_ln18_fu_186_p2.read() | ap_const_lv32_1);
}

void mac_vivado_dma64_w32_load32::thread_p_inbuff_0_V_address0() {
    p_inbuff_0_V_address0 =  (sc_lv<12>) (zext_ln180_fu_263_p1.read());
}

void mac_vivado_dma64_w32_load32::thread_p_inbuff_0_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())))) {
        p_inbuff_0_V_ce0 = ap_const_logic_1;
    } else {
        p_inbuff_0_V_ce0 = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_p_inbuff_0_V_d0() {
    p_inbuff_0_V_d0 = in1_word_V_dout.read().range(32-1, 0);
}

void mac_vivado_dma64_w32_load32::thread_p_inbuff_0_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())))) {
        p_inbuff_0_V_we0 = ap_const_logic_1;
    } else {
        p_inbuff_0_V_we0 = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_p_inbuff_1_V_address0() {
    p_inbuff_1_V_address0 =  (sc_lv<12>) (zext_ln180_fu_263_p1.read());
}

void mac_vivado_dma64_w32_load32::thread_p_inbuff_1_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())))) {
        p_inbuff_1_V_ce0 = ap_const_logic_1;
    } else {
        p_inbuff_1_V_ce0 = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_p_inbuff_1_V_d0() {
    p_inbuff_1_V_d0 = in1_word_V_dout.read().range(63, 32);
}

void mac_vivado_dma64_w32_load32::thread_p_inbuff_1_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())))) {
        p_inbuff_1_V_we0 = ap_const_logic_1;
    } else {
        p_inbuff_1_V_we0 = ap_const_logic_0;
    }
}

void mac_vivado_dma64_w32_load32::thread_zext_ln180_fu_263_p1() {
    zext_ln180_fu_263_p1 = esl_zext<64,31>(i_0_i_i_i_reg_169.read());
}

void mac_vivado_dma64_w32_load32::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, chunk_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, conf_info_mac_n_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(load_ctrl_ap_ack_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(load_ctrl_ap_ack_int.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())) && esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && !((esl_seteq<1,1,1>(icmp_ln28_fu_247_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in1_word_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_1, regslice_forward_load_ctrl_U_apdone_blk.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

