-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_vivado_dma64_w32_top is
port (
    out_word_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_word_V_full_n : IN STD_LOGIC;
    out_word_V_write : OUT STD_LOGIC;
    in1_word_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in1_word_V_empty_n : IN STD_LOGIC;
    in1_word_V_read : OUT STD_LOGIC;
    conf_info_mac_n : IN STD_LOGIC_VECTOR (31 downto 0);
    conf_info_mac_vec : IN STD_LOGIC_VECTOR (31 downto 0);
    conf_info_mac_len : IN STD_LOGIC_VECTOR (31 downto 0);
    load_ctrl : OUT STD_LOGIC_VECTOR (95 downto 0);
    store_ctrl : OUT STD_LOGIC_VECTOR (95 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    load_ctrl_ap_vld : OUT STD_LOGIC;
    load_ctrl_ap_ack : IN STD_LOGIC;
    store_ctrl_ap_vld : OUT STD_LOGIC;
    store_ctrl_ap_ack : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of mac_vivado_dma64_w32_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mac_vivado_dma64_w32_top,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7v2000t-flg1925-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.508000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=21,HLS_SYN_FF=886,HLS_SYN_LUT=1998,HLS_VERSION=2019_2}";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal dataflow_in_loop_bat_U0_in1_word_V_read : STD_LOGIC;
    signal dataflow_in_loop_bat_U0_load_ctrl : STD_LOGIC_VECTOR (95 downto 0);
    signal dataflow_in_loop_bat_U0_out_word_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_bat_U0_out_word_V_write : STD_LOGIC;
    signal dataflow_in_loop_bat_U0_store_ctrl : STD_LOGIC_VECTOR (95 downto 0);
    signal dataflow_in_loop_bat_U0_load_ctrl_ap_vld : STD_LOGIC;
    signal dataflow_in_loop_bat_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_bat_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_bat_U0_store_ctrl_ap_vld : STD_LOGIC;
    signal dataflow_in_loop_bat_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_bat_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_bat_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_bat_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_bat_U0_start_write : STD_LOGIC;

    component mac_vivado_dma64_w32_dataflow_in_loop_bat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in1_word_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        in1_word_V_empty_n : IN STD_LOGIC;
        in1_word_V_read : OUT STD_LOGIC;
        conf_info_mac_vec : IN STD_LOGIC_VECTOR (31 downto 0);
        conf_info_mac_len : IN STD_LOGIC_VECTOR (31 downto 0);
        load_ctrl : OUT STD_LOGIC_VECTOR (95 downto 0);
        b_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_word_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_word_V_full_n : IN STD_LOGIC;
        out_word_V_write : OUT STD_LOGIC;
        conf_info_mac_n : IN STD_LOGIC_VECTOR (31 downto 0);
        store_ctrl : OUT STD_LOGIC_VECTOR (95 downto 0);
        conf_info_mac_vec_ap_vld : IN STD_LOGIC;
        conf_info_mac_len_ap_vld : IN STD_LOGIC;
        load_ctrl_ap_vld : OUT STD_LOGIC;
        load_ctrl_ap_ack : IN STD_LOGIC;
        b_0_ap_vld : IN STD_LOGIC;
        conf_info_mac_n_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        store_ctrl_ap_vld : OUT STD_LOGIC;
        store_ctrl_ap_ack : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_in_loop_bat_U0 : component mac_vivado_dma64_w32_dataflow_in_loop_bat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in1_word_V_dout => in1_word_V_dout,
        in1_word_V_empty_n => in1_word_V_empty_n,
        in1_word_V_read => dataflow_in_loop_bat_U0_in1_word_V_read,
        conf_info_mac_vec => conf_info_mac_vec,
        conf_info_mac_len => conf_info_mac_len,
        load_ctrl => dataflow_in_loop_bat_U0_load_ctrl,
        b_0 => loop_dataflow_input_count,
        out_word_V_din => dataflow_in_loop_bat_U0_out_word_V_din,
        out_word_V_full_n => out_word_V_full_n,
        out_word_V_write => dataflow_in_loop_bat_U0_out_word_V_write,
        conf_info_mac_n => conf_info_mac_n,
        store_ctrl => dataflow_in_loop_bat_U0_store_ctrl,
        conf_info_mac_vec_ap_vld => ap_const_logic_1,
        conf_info_mac_len_ap_vld => ap_const_logic_1,
        load_ctrl_ap_vld => dataflow_in_loop_bat_U0_load_ctrl_ap_vld,
        load_ctrl_ap_ack => load_ctrl_ap_ack,
        b_0_ap_vld => ap_const_logic_0,
        conf_info_mac_n_ap_vld => ap_const_logic_1,
        ap_start => dataflow_in_loop_bat_U0_ap_start,
        ap_done => dataflow_in_loop_bat_U0_ap_done,
        store_ctrl_ap_vld => dataflow_in_loop_bat_U0_store_ctrl_ap_vld,
        store_ctrl_ap_ack => store_ctrl_ap_ack,
        ap_ready => dataflow_in_loop_bat_U0_ap_ready,
        ap_idle => dataflow_in_loop_bat_U0_ap_idle,
        ap_continue => dataflow_in_loop_bat_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_bat_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_bat_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_in_loop_bat_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_bat_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_bat_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_bat_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(dataflow_in_loop_bat_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_bat_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_in_loop_bat_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((loop_dataflow_output_count = ap_const_lv32_0) and (ap_start = ap_const_logic_0) and (dataflow_in_loop_bat_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_in_loop_bat_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_bat_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= dataflow_in_loop_bat_U0_ap_done;
    ap_sync_ready <= dataflow_in_loop_bat_U0_ap_ready;
    bound_minus_1 <= std_logic_vector(unsigned(conf_info_mac_n) - unsigned(ap_const_lv32_1));
    dataflow_in_loop_bat_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_bat_U0_ap_start <= ap_start;
    dataflow_in_loop_bat_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_bat_U0_start_write <= ap_const_logic_0;
    in1_word_V_read <= dataflow_in_loop_bat_U0_in1_word_V_read;
    load_ctrl <= dataflow_in_loop_bat_U0_load_ctrl;
    load_ctrl_ap_vld <= dataflow_in_loop_bat_U0_load_ctrl_ap_vld;
    out_word_V_din <= dataflow_in_loop_bat_U0_out_word_V_din;
    out_word_V_write <= dataflow_in_loop_bat_U0_out_word_V_write;
    store_ctrl <= dataflow_in_loop_bat_U0_store_ctrl;
    store_ctrl_ap_vld <= dataflow_in_loop_bat_U0_store_ctrl_ap_vld;
end behav;
