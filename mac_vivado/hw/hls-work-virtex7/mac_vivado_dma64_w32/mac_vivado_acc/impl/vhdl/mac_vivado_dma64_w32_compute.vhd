-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_vivado_dma64_w32_compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_inbuff_0_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    p_inbuff_0_V_ce0 : OUT STD_LOGIC;
    p_inbuff_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_inbuff_1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    p_inbuff_1_V_ce0 : OUT STD_LOGIC;
    p_inbuff_1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_empty_n : IN STD_LOGIC;
    mac_vec_read : OUT STD_LOGIC;
    mac_len_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_len_empty_n : IN STD_LOGIC;
    mac_len_read : OUT STD_LOGIC;
    p_outbuff_0_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_outbuff_0_V_ce0 : OUT STD_LOGIC;
    p_outbuff_0_V_we0 : OUT STD_LOGIC;
    p_outbuff_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_outbuff_1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    p_outbuff_1_V_ce0 : OUT STD_LOGIC;
    p_outbuff_1_V_we0 : OUT STD_LOGIC;
    p_outbuff_1_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_out_full_n : IN STD_LOGIC;
    mac_vec_out_write : OUT STD_LOGIC;
    mac_len_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mac_len_out_full_n : IN STD_LOGIC;
    mac_len_out_write : OUT STD_LOGIC );
end;


architecture behav of mac_vivado_dma64_w32_compute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1900 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100100000000";
    constant ap_const_lv13_1900 : STD_LOGIC_VECTOR (12 downto 0) := "1100100000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_FFFFE700 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111110011100000000";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mac_vec_blk_n : STD_LOGIC;
    signal mac_len_blk_n : STD_LOGIC;
    signal mac_vec_out_blk_n : STD_LOGIC;
    signal mac_len_out_blk_n : STD_LOGIC;
    signal mac_vec_read_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mac_len_read_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_rem_2_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_rem_2_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal length_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln180_fu_256_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln180_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_outbuff_0_V_addr_reg_470 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_outbuff_1_V_addr_reg_475 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_len_fu_308_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal in_len_reg_505 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln86_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln92_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_rem_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln95_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln95_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_1_fu_420_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_0_i_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal in_rem_0_i_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_0_i_reg_201 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln180_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_1_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln100_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_0_i_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_number_1_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_number_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_index_1_fu_66 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_index_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln180_fu_283_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln180_1_fu_386_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln73_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln73_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_260_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln89_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln86_fu_304_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln1_fu_321_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln95_fu_343_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln95_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln180_1_fu_390_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln86_fu_292_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    acc_0_i_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln100_fu_368_p2 = ap_const_lv1_0))) then 
                acc_0_i_fu_58 <= acc_fu_355_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln100_fu_368_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln75_fu_245_p2 = ap_const_lv1_1)))) then 
                acc_0_i_fu_58 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_0_i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i1_0_i_reg_201 <= i_1_fu_420_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln86_fu_292_p2 = ap_const_lv1_1))) then 
                i1_0_i_reg_201 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_i_reg_180 <= i_reg_450;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_0_i_reg_180 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    in_rem_0_i_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln75_fu_245_p2 = ap_const_lv1_1))) then 
                in_rem_0_i_reg_191 <= in_rem_2_reg_437;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln92_fu_316_p2 = ap_const_lv1_0))) then 
                in_rem_0_i_reg_191 <= in_rem_fu_337_p2;
            end if; 
        end if;
    end process;

    vector_index_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln100_fu_368_p2 = ap_const_lv1_0))) then 
                vector_index_1_fu_66 <= vector_index_fu_362_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln100_fu_368_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln75_fu_245_p2 = ap_const_lv1_1)))) then 
                vector_index_1_fu_66 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vector_number_1_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln100_fu_368_p2 = ap_const_lv1_1))) then 
                vector_number_1_fu_62 <= vector_number_fu_409_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln75_fu_245_p2 = ap_const_lv1_1))) then 
                vector_number_1_fu_62 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_450 <= i_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln86_fu_292_p2 = ap_const_lv1_1))) then
                in_len_reg_505 <= in_len_fu_308_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                in_rem_2_reg_437 <= in_rem_2_fu_223_p2;
                    length_reg_442(31 downto 1) <= length_fu_239_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mac_len_read_reg_431 <= mac_len_dout;
                mac_vec_read_reg_426 <= mac_vec_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln95_reg_528 <= mul_ln95_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln75_fu_245_p2 = ap_const_lv1_0))) then
                p_outbuff_0_V_addr_reg_470 <= zext_ln180_fu_270_p1(6 - 1 downto 0);
                p_outbuff_1_V_addr_reg_475 <= zext_ln180_fu_270_p1(6 - 1 downto 0);
                trunc_ln180_reg_455 <= trunc_ln180_fu_256_p1;
            end if;
        end if;
    end process;
    length_reg_442(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n, ap_CS_fsm_state3, icmp_ln75_fu_245_p2, ap_CS_fsm_state5, icmp_ln86_fu_292_p2, ap_CS_fsm_state6, icmp_ln92_fu_316_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln75_fu_245_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln86_fu_292_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln92_fu_316_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    acc_fu_355_p2 <= std_logic_vector(unsigned(mul_ln95_reg_528) + unsigned(acc_0_i_fu_58));
    add_ln73_fu_227_p2 <= std_logic_vector(unsigned(in_rem_2_fu_223_p2) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n)
    begin
                ap_block_state1 <= ((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, icmp_ln86_fu_292_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln86_fu_292_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln86_fu_292_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln86_fu_292_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_420_p2 <= std_logic_vector(unsigned(i1_0_i_reg_201) + unsigned(ap_const_lv13_2));
    i_fu_250_p2 <= std_logic_vector(unsigned(i_0_i_reg_180) + unsigned(ap_const_lv32_1));
    icmp_ln100_fu_368_p2 <= "1" when (vector_index_fu_362_p2 = mac_len_read_reg_431) else "0";
    icmp_ln75_fu_245_p2 <= "1" when (i_0_i_reg_180 = length_reg_442) else "0";
    icmp_ln86_fu_292_p2 <= "1" when (signed(in_rem_0_i_reg_191) > signed(ap_const_lv32_0)) else "0";
    icmp_ln89_fu_298_p2 <= "1" when (signed(in_rem_0_i_reg_191) > signed(ap_const_lv32_1900)) else "0";
    icmp_ln92_fu_316_p2 <= "1" when (unsigned(i1_0_i_reg_201) < unsigned(in_len_reg_505)) else "0";
    in_len_fu_308_p3 <= 
        ap_const_lv13_1900 when (icmp_ln89_fu_298_p2(0) = '1') else 
        trunc_ln86_fu_304_p1;
    in_rem_2_fu_223_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mac_len_read_reg_431) * signed(mac_vec_read_reg_426))), 32));
    in_rem_fu_337_p2 <= std_logic_vector(unsigned(in_rem_0_i_reg_191) + unsigned(ap_const_lv32_FFFFE700));
    length_fu_239_p2 <= std_logic_vector(unsigned(or_ln73_fu_233_p2) + unsigned(ap_const_lv32_1));
    lshr_ln180_1_fu_390_p4 <= vector_number_1_fu_62(31 downto 1);
    lshr_ln1_fu_321_p4 <= i1_0_i_reg_201(12 downto 1);
    lshr_ln_fu_260_p4 <= i_0_i_reg_180(31 downto 1);

    mac_len_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_len_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_blk_n <= mac_len_empty_n;
        else 
            mac_len_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mac_len_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_len_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_out_blk_n <= mac_len_out_full_n;
        else 
            mac_len_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mac_len_out_din <= mac_len_dout;

    mac_len_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n)
    begin
        if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_out_write <= ap_const_logic_1;
        else 
            mac_len_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mac_len_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n)
    begin
        if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_read <= ap_const_logic_1;
        else 
            mac_len_read <= ap_const_logic_0;
        end if; 
    end process;


    mac_vec_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_blk_n <= mac_vec_empty_n;
        else 
            mac_vec_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mac_vec_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_out_blk_n <= mac_vec_out_full_n;
        else 
            mac_vec_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mac_vec_out_din <= mac_vec_dout;

    mac_vec_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n)
    begin
        if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_out_write <= ap_const_logic_1;
        else 
            mac_vec_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mac_vec_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n)
    begin
        if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_read <= ap_const_logic_1;
        else 
            mac_vec_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln95_fu_343_p0 <= p_inbuff_1_V_q0;
    mul_ln95_fu_343_p1 <= p_inbuff_0_V_q0;
    mul_ln95_fu_343_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln95_fu_343_p0) * signed(mul_ln95_fu_343_p1))), 32));
    or_ln73_fu_233_p2 <= (ap_const_lv32_1 or add_ln73_fu_227_p2);

    p_inbuff_0_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, zext_ln180_fu_270_p1, zext_ln215_fu_331_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_inbuff_0_V_address0 <= zext_ln215_fu_331_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_inbuff_0_V_address0 <= zext_ln180_fu_270_p1(12 - 1 downto 0);
        else 
            p_inbuff_0_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    p_inbuff_0_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_inbuff_0_V_ce0 <= ap_const_logic_1;
        else 
            p_inbuff_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_inbuff_1_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, zext_ln180_fu_270_p1, zext_ln215_fu_331_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_inbuff_1_V_address0 <= zext_ln215_fu_331_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_inbuff_1_V_address0 <= zext_ln180_fu_270_p1(12 - 1 downto 0);
        else 
            p_inbuff_1_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    p_inbuff_1_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            p_inbuff_1_V_ce0 <= ap_const_logic_1;
        else 
            p_inbuff_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_outbuff_0_V_address0_assign_proc : process(p_outbuff_0_V_addr_reg_470, ap_CS_fsm_state8, ap_CS_fsm_state4, zext_ln180_1_fu_400_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_outbuff_0_V_address0 <= zext_ln180_1_fu_400_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_outbuff_0_V_address0 <= p_outbuff_0_V_addr_reg_470;
        else 
            p_outbuff_0_V_address0 <= "XXXXXX";
        end if; 
    end process;


    p_outbuff_0_V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            p_outbuff_0_V_ce0 <= ap_const_logic_1;
        else 
            p_outbuff_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_outbuff_0_V_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state4, acc_fu_355_p2, select_ln180_fu_283_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_outbuff_0_V_d0 <= acc_fu_355_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_outbuff_0_V_d0 <= select_ln180_fu_283_p3;
        else 
            p_outbuff_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_outbuff_0_V_we0_assign_proc : process(trunc_ln180_reg_455, ap_CS_fsm_state8, ap_CS_fsm_state4, icmp_ln100_fu_368_p2, trunc_ln180_1_fu_386_p1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln180_reg_455 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln100_fu_368_p2 = ap_const_lv1_1) and (trunc_ln180_1_fu_386_p1 = ap_const_lv1_0)))) then 
            p_outbuff_0_V_we0 <= ap_const_logic_1;
        else 
            p_outbuff_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_outbuff_1_V_address0_assign_proc : process(p_outbuff_1_V_addr_reg_475, ap_CS_fsm_state8, ap_CS_fsm_state4, zext_ln180_1_fu_400_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_outbuff_1_V_address0 <= zext_ln180_1_fu_400_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_outbuff_1_V_address0 <= p_outbuff_1_V_addr_reg_475;
        else 
            p_outbuff_1_V_address0 <= "XXXXXX";
        end if; 
    end process;


    p_outbuff_1_V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            p_outbuff_1_V_ce0 <= ap_const_logic_1;
        else 
            p_outbuff_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_outbuff_1_V_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state4, acc_fu_355_p2, select_ln180_fu_283_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_outbuff_1_V_d0 <= acc_fu_355_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_outbuff_1_V_d0 <= select_ln180_fu_283_p3;
        else 
            p_outbuff_1_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_outbuff_1_V_we0_assign_proc : process(trunc_ln180_reg_455, ap_CS_fsm_state8, ap_CS_fsm_state4, icmp_ln100_fu_368_p2, trunc_ln180_1_fu_386_p1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln180_reg_455 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (trunc_ln180_1_fu_386_p1 = ap_const_lv1_1) and (icmp_ln100_fu_368_p2 = ap_const_lv1_1)))) then 
            p_outbuff_1_V_we0 <= ap_const_logic_1;
        else 
            p_outbuff_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln180_fu_283_p3 <= 
        p_inbuff_1_V_q0 when (trunc_ln180_reg_455(0) = '1') else 
        p_inbuff_0_V_q0;
    trunc_ln180_1_fu_386_p1 <= vector_number_1_fu_62(1 - 1 downto 0);
    trunc_ln180_fu_256_p1 <= i_0_i_reg_180(1 - 1 downto 0);
    trunc_ln86_fu_304_p1 <= in_rem_0_i_reg_191(13 - 1 downto 0);
    vector_index_fu_362_p2 <= std_logic_vector(unsigned(vector_index_1_fu_66) + unsigned(ap_const_lv32_2));
    vector_number_fu_409_p2 <= std_logic_vector(unsigned(vector_number_1_fu_62) + unsigned(ap_const_lv32_1));
    zext_ln180_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln180_1_fu_390_p4),64));
    zext_ln180_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_260_p4),64));
    zext_ln215_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_321_p4),64));
end behav;
