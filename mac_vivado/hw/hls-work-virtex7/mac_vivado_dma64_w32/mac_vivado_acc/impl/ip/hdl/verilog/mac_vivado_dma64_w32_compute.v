// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mac_vivado_dma64_w32_compute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_inbuff_0_V_address0,
        p_inbuff_0_V_ce0,
        p_inbuff_0_V_q0,
        p_inbuff_1_V_address0,
        p_inbuff_1_V_ce0,
        p_inbuff_1_V_q0,
        mac_vec_dout,
        mac_vec_empty_n,
        mac_vec_read,
        mac_len_dout,
        mac_len_empty_n,
        mac_len_read,
        p_outbuff_0_V_address0,
        p_outbuff_0_V_ce0,
        p_outbuff_0_V_we0,
        p_outbuff_0_V_d0,
        p_outbuff_1_V_address0,
        p_outbuff_1_V_ce0,
        p_outbuff_1_V_we0,
        p_outbuff_1_V_d0,
        mac_vec_out_din,
        mac_vec_out_full_n,
        mac_vec_out_write,
        mac_len_out_din,
        mac_len_out_full_n,
        mac_len_out_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [11:0] p_inbuff_0_V_address0;
output   p_inbuff_0_V_ce0;
input  [31:0] p_inbuff_0_V_q0;
output  [11:0] p_inbuff_1_V_address0;
output   p_inbuff_1_V_ce0;
input  [31:0] p_inbuff_1_V_q0;
input  [31:0] mac_vec_dout;
input   mac_vec_empty_n;
output   mac_vec_read;
input  [31:0] mac_len_dout;
input   mac_len_empty_n;
output   mac_len_read;
output  [5:0] p_outbuff_0_V_address0;
output   p_outbuff_0_V_ce0;
output   p_outbuff_0_V_we0;
output  [31:0] p_outbuff_0_V_d0;
output  [5:0] p_outbuff_1_V_address0;
output   p_outbuff_1_V_ce0;
output   p_outbuff_1_V_we0;
output  [31:0] p_outbuff_1_V_d0;
output  [31:0] mac_vec_out_din;
input   mac_vec_out_full_n;
output   mac_vec_out_write;
output  [31:0] mac_len_out_din;
input   mac_len_out_full_n;
output   mac_len_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] p_inbuff_0_V_address0;
reg p_inbuff_0_V_ce0;
reg[11:0] p_inbuff_1_V_address0;
reg p_inbuff_1_V_ce0;
reg mac_vec_read;
reg mac_len_read;
reg[5:0] p_outbuff_0_V_address0;
reg p_outbuff_0_V_ce0;
reg p_outbuff_0_V_we0;
reg[31:0] p_outbuff_0_V_d0;
reg[5:0] p_outbuff_1_V_address0;
reg p_outbuff_1_V_ce0;
reg p_outbuff_1_V_we0;
reg[31:0] p_outbuff_1_V_d0;
reg mac_vec_out_write;
reg mac_len_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_vec_blk_n;
reg    mac_len_blk_n;
reg    mac_vec_out_blk_n;
reg    mac_len_out_blk_n;
reg  signed [31:0] mac_vec_read_reg_426;
reg    ap_block_state1;
reg  signed [31:0] mac_len_read_reg_431;
wire   [31:0] in_rem_2_fu_223_p2;
reg   [31:0] in_rem_2_reg_437;
wire    ap_CS_fsm_state2;
wire   [31:0] length_fu_239_p2;
reg   [31:0] length_reg_442;
wire   [31:0] i_fu_250_p2;
reg   [31:0] i_reg_450;
wire    ap_CS_fsm_state3;
wire   [0:0] trunc_ln180_fu_256_p1;
reg   [0:0] trunc_ln180_reg_455;
wire   [0:0] icmp_ln75_fu_245_p2;
reg   [5:0] p_outbuff_0_V_addr_reg_470;
reg   [5:0] p_outbuff_1_V_addr_reg_475;
wire   [12:0] in_len_fu_308_p3;
reg   [12:0] in_len_reg_505;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln86_fu_292_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln92_fu_316_p2;
wire   [31:0] in_rem_fu_337_p2;
wire   [31:0] mul_ln95_fu_343_p2;
reg   [31:0] mul_ln95_reg_528;
wire    ap_CS_fsm_state7;
wire   [12:0] i_1_fu_420_p2;
wire    ap_CS_fsm_state8;
reg   [31:0] i_0_i_reg_180;
wire    ap_CS_fsm_state4;
reg   [31:0] in_rem_0_i_reg_191;
reg   [12:0] i1_0_i_reg_201;
wire   [63:0] zext_ln180_fu_270_p1;
wire   [63:0] zext_ln215_fu_331_p1;
wire   [63:0] zext_ln180_1_fu_400_p1;
wire   [0:0] icmp_ln100_fu_368_p2;
reg   [31:0] acc_0_i_fu_58;
wire   [31:0] acc_fu_355_p2;
reg   [31:0] vector_number_1_fu_62;
wire   [31:0] vector_number_fu_409_p2;
reg   [31:0] vector_index_1_fu_66;
wire   [31:0] vector_index_fu_362_p2;
wire   [31:0] select_ln180_fu_283_p3;
wire   [0:0] trunc_ln180_1_fu_386_p1;
wire   [31:0] add_ln73_fu_227_p2;
wire   [31:0] or_ln73_fu_233_p2;
wire   [30:0] lshr_ln_fu_260_p4;
wire   [0:0] icmp_ln89_fu_298_p2;
wire   [12:0] trunc_ln86_fu_304_p1;
wire   [11:0] lshr_ln1_fu_321_p4;
wire  signed [31:0] mul_ln95_fu_343_p0;
wire  signed [31:0] mul_ln95_fu_343_p1;
wire   [30:0] lshr_ln180_1_fu_390_p4;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln86_fu_292_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln100_fu_368_p2 == 1'd0))) begin
        acc_0_i_fu_58 <= acc_fu_355_p2;
    end else if ((((1'b1 == ap_CS_fsm_state8) & (icmp_ln100_fu_368_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln75_fu_245_p2 == 1'd1)))) begin
        acc_0_i_fu_58 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i1_0_i_reg_201 <= i_1_fu_420_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln86_fu_292_p2 == 1'd1))) begin
        i1_0_i_reg_201 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_reg_180 <= i_reg_450;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_i_reg_180 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln75_fu_245_p2 == 1'd1))) begin
        in_rem_0_i_reg_191 <= in_rem_2_reg_437;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln92_fu_316_p2 == 1'd0))) begin
        in_rem_0_i_reg_191 <= in_rem_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln100_fu_368_p2 == 1'd0))) begin
        vector_index_1_fu_66 <= vector_index_fu_362_p2;
    end else if ((((1'b1 == ap_CS_fsm_state8) & (icmp_ln100_fu_368_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln75_fu_245_p2 == 1'd1)))) begin
        vector_index_1_fu_66 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln100_fu_368_p2 == 1'd1))) begin
        vector_number_1_fu_62 <= vector_number_fu_409_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln75_fu_245_p2 == 1'd1))) begin
        vector_number_1_fu_62 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_450 <= i_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln86_fu_292_p2 == 1'd1))) begin
        in_len_reg_505 <= in_len_fu_308_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_rem_2_reg_437 <= in_rem_2_fu_223_p2;
        length_reg_442[31 : 1] <= length_fu_239_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_len_read_reg_431 <= mac_len_dout;
        mac_vec_read_reg_426 <= mac_vec_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln95_reg_528 <= mul_ln95_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln75_fu_245_p2 == 1'd0))) begin
        p_outbuff_0_V_addr_reg_470 <= zext_ln180_fu_270_p1;
        p_outbuff_1_V_addr_reg_475 <= zext_ln180_fu_270_p1;
        trunc_ln180_reg_455 <= trunc_ln180_fu_256_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln86_fu_292_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln86_fu_292_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_len_blk_n = mac_len_empty_n;
    end else begin
        mac_len_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_len_out_blk_n = mac_len_out_full_n;
    end else begin
        mac_len_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_len_out_write = 1'b1;
    end else begin
        mac_len_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_len_read = 1'b1;
    end else begin
        mac_len_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_vec_blk_n = mac_vec_empty_n;
    end else begin
        mac_vec_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_vec_out_blk_n = mac_vec_out_full_n;
    end else begin
        mac_vec_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_vec_out_write = 1'b1;
    end else begin
        mac_vec_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_vec_read = 1'b1;
    end else begin
        mac_vec_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_inbuff_0_V_address0 = zext_ln215_fu_331_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_inbuff_0_V_address0 = zext_ln180_fu_270_p1;
    end else begin
        p_inbuff_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        p_inbuff_0_V_ce0 = 1'b1;
    end else begin
        p_inbuff_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_inbuff_1_V_address0 = zext_ln215_fu_331_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_inbuff_1_V_address0 = zext_ln180_fu_270_p1;
    end else begin
        p_inbuff_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        p_inbuff_1_V_ce0 = 1'b1;
    end else begin
        p_inbuff_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_outbuff_0_V_address0 = zext_ln180_1_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_outbuff_0_V_address0 = p_outbuff_0_V_addr_reg_470;
    end else begin
        p_outbuff_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        p_outbuff_0_V_ce0 = 1'b1;
    end else begin
        p_outbuff_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_outbuff_0_V_d0 = acc_fu_355_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_outbuff_0_V_d0 = select_ln180_fu_283_p3;
    end else begin
        p_outbuff_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (trunc_ln180_reg_455 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln100_fu_368_p2 == 1'd1) & (trunc_ln180_1_fu_386_p1 == 1'd0)))) begin
        p_outbuff_0_V_we0 = 1'b1;
    end else begin
        p_outbuff_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_outbuff_1_V_address0 = zext_ln180_1_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_outbuff_1_V_address0 = p_outbuff_1_V_addr_reg_475;
    end else begin
        p_outbuff_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        p_outbuff_1_V_ce0 = 1'b1;
    end else begin
        p_outbuff_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_outbuff_1_V_d0 = acc_fu_355_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_outbuff_1_V_d0 = select_ln180_fu_283_p3;
    end else begin
        p_outbuff_1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (trunc_ln180_reg_455 == 1'd1)) | ((1'b1 == ap_CS_fsm_state8) & (trunc_ln180_1_fu_386_p1 == 1'd1) & (icmp_ln100_fu_368_p2 == 1'd1)))) begin
        p_outbuff_1_V_we0 = 1'b1;
    end else begin
        p_outbuff_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln75_fu_245_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln86_fu_292_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln92_fu_316_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_355_p2 = (mul_ln95_reg_528 + acc_0_i_fu_58);

assign add_ln73_fu_227_p2 = ($signed(in_rem_2_fu_223_p2) + $signed(32'd4294967295));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign i_1_fu_420_p2 = (i1_0_i_reg_201 + 13'd2);

assign i_fu_250_p2 = (i_0_i_reg_180 + 32'd1);

assign icmp_ln100_fu_368_p2 = ((vector_index_fu_362_p2 == mac_len_read_reg_431) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_245_p2 = ((i_0_i_reg_180 == length_reg_442) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_292_p2 = (($signed(in_rem_0_i_reg_191) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_298_p2 = (($signed(in_rem_0_i_reg_191) > $signed(32'd6400)) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_316_p2 = ((i1_0_i_reg_201 < in_len_reg_505) ? 1'b1 : 1'b0);

assign in_len_fu_308_p3 = ((icmp_ln89_fu_298_p2[0:0] === 1'b1) ? 13'd6400 : trunc_ln86_fu_304_p1);

assign in_rem_2_fu_223_p2 = ($signed(mac_len_read_reg_431) * $signed(mac_vec_read_reg_426));

assign in_rem_fu_337_p2 = ($signed(in_rem_0_i_reg_191) + $signed(32'd4294960896));

assign length_fu_239_p2 = (or_ln73_fu_233_p2 + 32'd1);

assign lshr_ln180_1_fu_390_p4 = {{vector_number_1_fu_62[31:1]}};

assign lshr_ln1_fu_321_p4 = {{i1_0_i_reg_201[12:1]}};

assign lshr_ln_fu_260_p4 = {{i_0_i_reg_180[31:1]}};

assign mac_len_out_din = mac_len_dout;

assign mac_vec_out_din = mac_vec_dout;

assign mul_ln95_fu_343_p0 = p_inbuff_1_V_q0;

assign mul_ln95_fu_343_p1 = p_inbuff_0_V_q0;

assign mul_ln95_fu_343_p2 = ($signed(mul_ln95_fu_343_p0) * $signed(mul_ln95_fu_343_p1));

assign or_ln73_fu_233_p2 = (32'd1 | add_ln73_fu_227_p2);

assign select_ln180_fu_283_p3 = ((trunc_ln180_reg_455[0:0] === 1'b1) ? p_inbuff_1_V_q0 : p_inbuff_0_V_q0);

assign trunc_ln180_1_fu_386_p1 = vector_number_1_fu_62[0:0];

assign trunc_ln180_fu_256_p1 = i_0_i_reg_180[0:0];

assign trunc_ln86_fu_304_p1 = in_rem_0_i_reg_191[12:0];

assign vector_index_fu_362_p2 = (vector_index_1_fu_66 + 32'd2);

assign vector_number_fu_409_p2 = (vector_number_1_fu_62 + 32'd1);

assign zext_ln180_1_fu_400_p1 = lshr_ln180_1_fu_390_p4;

assign zext_ln180_fu_270_p1 = lshr_ln_fu_260_p4;

assign zext_ln215_fu_331_p1 = lshr_ln1_fu_321_p4;

always @ (posedge ap_clk) begin
    length_reg_442[0] <= 1'b0;
end

endmodule //mac_vivado_dma64_w32_compute
