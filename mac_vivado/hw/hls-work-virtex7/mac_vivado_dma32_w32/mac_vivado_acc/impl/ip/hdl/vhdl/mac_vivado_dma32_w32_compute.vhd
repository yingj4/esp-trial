-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_vivado_dma32_w32_compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_inbuff_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    p_inbuff_V_ce0 : OUT STD_LOGIC;
    p_inbuff_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_inbuff_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    p_inbuff_V_ce1 : OUT STD_LOGIC;
    p_inbuff_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_empty_n : IN STD_LOGIC;
    mac_vec_read : OUT STD_LOGIC;
    mac_len_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_len_empty_n : IN STD_LOGIC;
    mac_len_read : OUT STD_LOGIC;
    p_outbuff_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_outbuff_V_ce0 : OUT STD_LOGIC;
    p_outbuff_V_we0 : OUT STD_LOGIC;
    p_outbuff_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_out_full_n : IN STD_LOGIC;
    mac_vec_out_write : OUT STD_LOGIC;
    mac_len_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mac_len_out_full_n : IN STD_LOGIC;
    mac_len_out_write : OUT STD_LOGIC );
end;


architecture behav of mac_vivado_dma32_w32_compute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_1900 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100100000000";
    constant ap_const_lv13_1900 : STD_LOGIC_VECTOR (12 downto 0) := "1100100000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_FFFFE700 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111110011100000000";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mac_vec_blk_n : STD_LOGIC;
    signal mac_len_blk_n : STD_LOGIC;
    signal mac_vec_out_blk_n : STD_LOGIC;
    signal mac_len_out_blk_n : STD_LOGIC;
    signal mac_len_read_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal in_rem_2_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_rem_2_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln76_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln76_reg_345 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln75_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_len_fu_227_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal in_len_reg_379 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln86_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln92_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_rem_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln95_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln95_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_fu_320_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_i_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal in_rem_0_i_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_0_i_reg_162 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln95_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_1_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln100_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_0_i_fu_46 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_number_1_fu_50 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_number_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_index_1_fu_54 : STD_LOGIC_VECTOR (31 downto 0);
    signal vector_index_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_rem_2_fu_184_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_rem_2_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln89_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln86_fu_223_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln95_fu_245_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln95_fu_262_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln95_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln86_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    acc_0_i_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                acc_0_i_fu_46 <= acc_fu_274_p2;
            elsif ((((icmp_ln75_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln100_fu_286_p2 = ap_const_lv1_1)))) then 
                acc_0_i_fu_46 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_0_i_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i1_0_i_reg_162 <= i_1_fu_320_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln86_fu_211_p2 = ap_const_lv1_1))) then 
                i1_0_i_reg_162 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_i_reg_141 <= i_reg_340;
            elsif ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_141 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    in_rem_0_i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                in_rem_0_i_reg_152 <= in_rem_2_reg_331;
            elsif (((icmp_ln92_fu_235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_rem_0_i_reg_152 <= in_rem_fu_256_p2;
            end if; 
        end if;
    end process;

    vector_index_1_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                vector_index_1_fu_54 <= vector_index_fu_280_p2;
            elsif ((((icmp_ln75_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln100_fu_286_p2 = ap_const_lv1_1)))) then 
                vector_index_1_fu_54 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    vector_number_1_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln100_fu_286_p2 = ap_const_lv1_1))) then 
                vector_number_1_fu_50 <= vector_number_fu_309_p2;
            elsif (((icmp_ln75_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                vector_number_1_fu_50 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_340 <= i_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln86_fu_211_p2 = ap_const_lv1_1))) then
                in_len_reg_379 <= in_len_fu_227_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                in_rem_2_reg_331 <= in_rem_2_fu_184_p2;
                mac_len_read_reg_326 <= mac_len_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln95_reg_402 <= mul_ln95_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sext_ln76_reg_345 <= sext_ln76_fu_201_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n, ap_CS_fsm_state2, icmp_ln75_fu_190_p2, ap_CS_fsm_state4, icmp_ln86_fu_211_p2, ap_CS_fsm_state5, icmp_ln92_fu_235_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln75_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln86_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln92_fu_235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    acc_fu_274_p2 <= std_logic_vector(unsigned(acc_0_i_fu_46) + unsigned(mul_ln95_reg_402));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n)
    begin
                ap_block_state1 <= ((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, icmp_ln86_fu_211_p2)
    begin
        if (((icmp_ln86_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln86_fu_211_p2)
    begin
        if (((icmp_ln86_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_320_p2 <= std_logic_vector(unsigned(i1_0_i_reg_162) + unsigned(ap_const_lv13_2));
    i_fu_195_p2 <= std_logic_vector(signed(i_0_i_reg_141) + signed(ap_const_lv32_1));
    icmp_ln100_fu_286_p2 <= "1" when (vector_index_fu_280_p2 = mac_len_read_reg_326) else "0";
    icmp_ln75_fu_190_p2 <= "1" when (i_0_i_reg_141 = in_rem_2_reg_331) else "0";
    icmp_ln86_fu_211_p2 <= "1" when (signed(in_rem_0_i_reg_152) > signed(ap_const_lv32_0)) else "0";
    icmp_ln89_fu_217_p2 <= "1" when (signed(in_rem_0_i_reg_152) > signed(ap_const_lv32_1900)) else "0";
    icmp_ln92_fu_235_p2 <= "1" when (unsigned(i1_0_i_reg_162) < unsigned(in_len_reg_379)) else "0";
    in_len_fu_227_p3 <= 
        ap_const_lv13_1900 when (icmp_ln89_fu_217_p2(0) = '1') else 
        trunc_ln86_fu_223_p1;
    in_rem_2_fu_184_p0 <= mac_len_dout;
    in_rem_2_fu_184_p1 <= mac_vec_dout;
    in_rem_2_fu_184_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in_rem_2_fu_184_p0) * signed(in_rem_2_fu_184_p1))), 32));
    in_rem_fu_256_p2 <= std_logic_vector(unsigned(in_rem_0_i_reg_152) + unsigned(ap_const_lv32_FFFFE700));

    mac_len_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_len_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_blk_n <= mac_len_empty_n;
        else 
            mac_len_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mac_len_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_len_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_out_blk_n <= mac_len_out_full_n;
        else 
            mac_len_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mac_len_out_din <= mac_len_dout;

    mac_len_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n)
    begin
        if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_out_write <= ap_const_logic_1;
        else 
            mac_len_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mac_len_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n)
    begin
        if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_read <= ap_const_logic_1;
        else 
            mac_len_read <= ap_const_logic_0;
        end if; 
    end process;


    mac_vec_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_blk_n <= mac_vec_empty_n;
        else 
            mac_vec_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mac_vec_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_out_blk_n <= mac_vec_out_full_n;
        else 
            mac_vec_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mac_vec_out_din <= mac_vec_dout;

    mac_vec_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n)
    begin
        if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_out_write <= ap_const_logic_1;
        else 
            mac_vec_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mac_vec_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n, mac_len_empty_n, mac_vec_out_full_n, mac_len_out_full_n)
    begin
        if ((not(((mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_read <= ap_const_logic_1;
        else 
            mac_vec_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln95_fu_262_p0 <= p_inbuff_V_q0;
    mul_ln95_fu_262_p1 <= p_inbuff_V_q1;
    mul_ln95_fu_262_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln95_fu_262_p0) * signed(mul_ln95_fu_262_p1))), 32));
    or_ln95_fu_245_p2 <= (i1_0_i_reg_162 or ap_const_lv13_1);

    p_inbuff_V_address0_assign_proc : process(ap_CS_fsm_state2, sext_ln76_fu_201_p1, ap_CS_fsm_state5, zext_ln95_fu_240_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_inbuff_V_address0 <= zext_ln95_fu_240_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_inbuff_V_address0 <= sext_ln76_fu_201_p1(13 - 1 downto 0);
        else 
            p_inbuff_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    p_inbuff_V_address1 <= zext_ln95_1_fu_251_p1(13 - 1 downto 0);

    p_inbuff_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            p_inbuff_V_ce0 <= ap_const_logic_1;
        else 
            p_inbuff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_inbuff_V_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_inbuff_V_ce1 <= ap_const_logic_1;
        else 
            p_inbuff_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_outbuff_V_address0_assign_proc : process(sext_ln76_reg_345, ap_CS_fsm_state7, ap_CS_fsm_state3, zext_ln101_fu_304_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_outbuff_V_address0 <= zext_ln101_fu_304_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_outbuff_V_address0 <= sext_ln76_reg_345(7 - 1 downto 0);
        else 
            p_outbuff_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    p_outbuff_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            p_outbuff_V_ce0 <= ap_const_logic_1;
        else 
            p_outbuff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_outbuff_V_d0_assign_proc : process(p_inbuff_V_q0, ap_CS_fsm_state7, ap_CS_fsm_state3, acc_fu_274_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_outbuff_V_d0 <= acc_fu_274_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_outbuff_V_d0 <= p_inbuff_V_q0;
        else 
            p_outbuff_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_outbuff_V_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state3, icmp_ln100_fu_286_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln100_fu_286_p2 = ap_const_lv1_1)))) then 
            p_outbuff_V_we0 <= ap_const_logic_1;
        else 
            p_outbuff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln76_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i_reg_141),64));

    trunc_ln86_fu_223_p1 <= in_rem_0_i_reg_152(13 - 1 downto 0);
    vector_index_fu_280_p2 <= std_logic_vector(unsigned(vector_index_1_fu_54) + unsigned(ap_const_lv32_2));
    vector_number_fu_309_p2 <= std_logic_vector(unsigned(vector_number_1_fu_50) + unsigned(ap_const_lv32_1));
    zext_ln101_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vector_number_1_fu_50),64));
    zext_ln95_1_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln95_fu_245_p2),64));
    zext_ln95_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_162),64));
end behav;
