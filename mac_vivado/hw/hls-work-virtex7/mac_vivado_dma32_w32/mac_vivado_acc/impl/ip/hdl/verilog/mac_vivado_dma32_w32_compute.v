// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mac_vivado_dma32_w32_compute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_inbuff_V_address0,
        p_inbuff_V_ce0,
        p_inbuff_V_q0,
        p_inbuff_V_address1,
        p_inbuff_V_ce1,
        p_inbuff_V_q1,
        mac_vec_dout,
        mac_vec_empty_n,
        mac_vec_read,
        mac_len_dout,
        mac_len_empty_n,
        mac_len_read,
        p_outbuff_V_address0,
        p_outbuff_V_ce0,
        p_outbuff_V_we0,
        p_outbuff_V_d0,
        mac_vec_out_din,
        mac_vec_out_full_n,
        mac_vec_out_write,
        mac_len_out_din,
        mac_len_out_full_n,
        mac_len_out_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [12:0] p_inbuff_V_address0;
output   p_inbuff_V_ce0;
input  [31:0] p_inbuff_V_q0;
output  [12:0] p_inbuff_V_address1;
output   p_inbuff_V_ce1;
input  [31:0] p_inbuff_V_q1;
input  [31:0] mac_vec_dout;
input   mac_vec_empty_n;
output   mac_vec_read;
input  [31:0] mac_len_dout;
input   mac_len_empty_n;
output   mac_len_read;
output  [6:0] p_outbuff_V_address0;
output   p_outbuff_V_ce0;
output   p_outbuff_V_we0;
output  [31:0] p_outbuff_V_d0;
output  [31:0] mac_vec_out_din;
input   mac_vec_out_full_n;
output   mac_vec_out_write;
output  [31:0] mac_len_out_din;
input   mac_len_out_full_n;
output   mac_len_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] p_inbuff_V_address0;
reg p_inbuff_V_ce0;
reg p_inbuff_V_ce1;
reg mac_vec_read;
reg mac_len_read;
reg[6:0] p_outbuff_V_address0;
reg p_outbuff_V_ce0;
reg p_outbuff_V_we0;
reg[31:0] p_outbuff_V_d0;
reg mac_vec_out_write;
reg mac_len_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mac_vec_blk_n;
reg    mac_len_blk_n;
reg    mac_vec_out_blk_n;
reg    mac_len_out_blk_n;
reg  signed [31:0] mac_len_read_reg_326;
reg    ap_block_state1;
wire   [31:0] in_rem_2_fu_184_p2;
reg   [31:0] in_rem_2_reg_331;
wire   [31:0] i_fu_195_p2;
reg   [31:0] i_reg_340;
wire    ap_CS_fsm_state2;
wire  signed [63:0] sext_ln76_fu_201_p1;
reg  signed [63:0] sext_ln76_reg_345;
wire   [0:0] icmp_ln75_fu_190_p2;
wire   [12:0] in_len_fu_227_p3;
reg   [12:0] in_len_reg_379;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln86_fu_211_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln92_fu_235_p2;
wire   [31:0] in_rem_fu_256_p2;
wire   [31:0] mul_ln95_fu_262_p2;
reg   [31:0] mul_ln95_reg_402;
wire    ap_CS_fsm_state6;
wire   [12:0] i_1_fu_320_p2;
wire    ap_CS_fsm_state7;
reg  signed [31:0] i_0_i_reg_141;
wire    ap_CS_fsm_state3;
reg   [31:0] in_rem_0_i_reg_152;
reg   [12:0] i1_0_i_reg_162;
wire   [63:0] zext_ln95_fu_240_p1;
wire   [63:0] zext_ln95_1_fu_251_p1;
wire   [63:0] zext_ln101_fu_304_p1;
wire   [0:0] icmp_ln100_fu_286_p2;
reg   [31:0] acc_0_i_fu_46;
wire   [31:0] acc_fu_274_p2;
reg   [31:0] vector_number_1_fu_50;
wire   [31:0] vector_number_fu_309_p2;
reg   [31:0] vector_index_1_fu_54;
wire   [31:0] vector_index_fu_280_p2;
wire  signed [31:0] in_rem_2_fu_184_p0;
wire  signed [31:0] in_rem_2_fu_184_p1;
wire   [0:0] icmp_ln89_fu_217_p2;
wire   [12:0] trunc_ln86_fu_223_p1;
wire   [12:0] or_ln95_fu_245_p2;
wire  signed [31:0] mul_ln95_fu_262_p0;
wire  signed [31:0] mul_ln95_fu_262_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln86_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        acc_0_i_fu_46 <= acc_fu_274_p2;
    end else if ((((icmp_ln75_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln100_fu_286_p2 == 1'd1)))) begin
        acc_0_i_fu_46 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i1_0_i_reg_162 <= i_1_fu_320_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln86_fu_211_p2 == 1'd1))) begin
        i1_0_i_reg_162 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_i_reg_141 <= i_reg_340;
    end else if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_141 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in_rem_0_i_reg_152 <= in_rem_2_reg_331;
    end else if (((icmp_ln92_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_rem_0_i_reg_152 <= in_rem_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_286_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        vector_index_1_fu_54 <= vector_index_fu_280_p2;
    end else if ((((icmp_ln75_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln100_fu_286_p2 == 1'd1)))) begin
        vector_index_1_fu_54 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln100_fu_286_p2 == 1'd1))) begin
        vector_number_1_fu_50 <= vector_number_fu_309_p2;
    end else if (((icmp_ln75_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        vector_number_1_fu_50 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_340 <= i_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln86_fu_211_p2 == 1'd1))) begin
        in_len_reg_379 <= in_len_fu_227_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_rem_2_reg_331 <= in_rem_2_fu_184_p2;
        mac_len_read_reg_326 <= mac_len_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln95_reg_402 <= mul_ln95_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln76_reg_345 <= sext_ln76_fu_201_p1;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_len_blk_n = mac_len_empty_n;
    end else begin
        mac_len_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_len_out_blk_n = mac_len_out_full_n;
    end else begin
        mac_len_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_len_out_write = 1'b1;
    end else begin
        mac_len_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_len_read = 1'b1;
    end else begin
        mac_len_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_vec_blk_n = mac_vec_empty_n;
    end else begin
        mac_vec_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_vec_out_blk_n = mac_vec_out_full_n;
    end else begin
        mac_vec_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_vec_out_write = 1'b1;
    end else begin
        mac_vec_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mac_vec_read = 1'b1;
    end else begin
        mac_vec_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_inbuff_V_address0 = zext_ln95_fu_240_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_inbuff_V_address0 = sext_ln76_fu_201_p1;
    end else begin
        p_inbuff_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        p_inbuff_V_ce0 = 1'b1;
    end else begin
        p_inbuff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_inbuff_V_ce1 = 1'b1;
    end else begin
        p_inbuff_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_outbuff_V_address0 = zext_ln101_fu_304_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_outbuff_V_address0 = sext_ln76_reg_345;
    end else begin
        p_outbuff_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7))) begin
        p_outbuff_V_ce0 = 1'b1;
    end else begin
        p_outbuff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_outbuff_V_d0 = acc_fu_274_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_outbuff_V_d0 = p_inbuff_V_q0;
    end else begin
        p_outbuff_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln100_fu_286_p2 == 1'd1)))) begin
        p_outbuff_V_we0 = 1'b1;
    end else begin
        p_outbuff_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln75_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln86_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln92_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_274_p2 = (acc_0_i_fu_46 + mul_ln95_reg_402);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((mac_len_out_full_n == 1'b0) | (mac_vec_out_full_n == 1'b0) | (mac_len_empty_n == 1'b0) | (mac_vec_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign i_1_fu_320_p2 = (i1_0_i_reg_162 + 13'd2);

assign i_fu_195_p2 = ($signed(i_0_i_reg_141) + $signed(32'd1));

assign icmp_ln100_fu_286_p2 = ((vector_index_fu_280_p2 == mac_len_read_reg_326) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_190_p2 = ((i_0_i_reg_141 == in_rem_2_reg_331) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_211_p2 = (($signed(in_rem_0_i_reg_152) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_217_p2 = (($signed(in_rem_0_i_reg_152) > $signed(32'd6400)) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_235_p2 = ((i1_0_i_reg_162 < in_len_reg_379) ? 1'b1 : 1'b0);

assign in_len_fu_227_p3 = ((icmp_ln89_fu_217_p2[0:0] === 1'b1) ? 13'd6400 : trunc_ln86_fu_223_p1);

assign in_rem_2_fu_184_p0 = mac_len_dout;

assign in_rem_2_fu_184_p1 = mac_vec_dout;

assign in_rem_2_fu_184_p2 = ($signed(in_rem_2_fu_184_p0) * $signed(in_rem_2_fu_184_p1));

assign in_rem_fu_256_p2 = ($signed(in_rem_0_i_reg_152) + $signed(32'd4294960896));

assign mac_len_out_din = mac_len_dout;

assign mac_vec_out_din = mac_vec_dout;

assign mul_ln95_fu_262_p0 = p_inbuff_V_q0;

assign mul_ln95_fu_262_p1 = p_inbuff_V_q1;

assign mul_ln95_fu_262_p2 = ($signed(mul_ln95_fu_262_p0) * $signed(mul_ln95_fu_262_p1));

assign or_ln95_fu_245_p2 = (i1_0_i_reg_162 | 13'd1);

assign p_inbuff_V_address1 = zext_ln95_1_fu_251_p1;

assign sext_ln76_fu_201_p1 = i_0_i_reg_141;

assign trunc_ln86_fu_223_p1 = in_rem_0_i_reg_152[12:0];

assign vector_index_fu_280_p2 = (vector_index_1_fu_54 + 32'd2);

assign vector_number_fu_309_p2 = (vector_number_1_fu_50 + 32'd1);

assign zext_ln101_fu_304_p1 = vector_number_1_fu_50;

assign zext_ln95_1_fu_251_p1 = or_ln95_fu_245_p2;

assign zext_ln95_fu_240_p1 = i1_0_i_reg_162;

endmodule //mac_vivado_dma32_w32_compute
