-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_vivado_dma32_w32_store is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_outbuff_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_outbuff_V_ce0 : OUT STD_LOGIC;
    p_outbuff_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_word_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_word_V_full_n : IN STD_LOGIC;
    out_word_V_write : OUT STD_LOGIC;
    mac_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_n_empty_n : IN STD_LOGIC;
    mac_n_read : OUT STD_LOGIC;
    mac_vec_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_empty_n : IN STD_LOGIC;
    mac_vec_read : OUT STD_LOGIC;
    mac_len_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_len_empty_n : IN STD_LOGIC;
    mac_len_read : OUT STD_LOGIC;
    store_ctrl : OUT STD_LOGIC_VECTOR (95 downto 0);
    store_ctrl_ap_vld : OUT STD_LOGIC;
    store_ctrl_ap_ack : IN STD_LOGIC;
    chunk_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    chunk_empty_n : IN STD_LOGIC;
    chunk_read : OUT STD_LOGIC );
end;


architecture behav of mac_vivado_dma32_w32_store is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_word_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal mac_n_blk_n : STD_LOGIC;
    signal mac_vec_blk_n : STD_LOGIC;
    signal mac_len_blk_n : STD_LOGIC;
    signal store_ctrl_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal chunk_blk_n : STD_LOGIC;
    signal dma_length_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal chunk_read_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal store_offset_fu_109_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal store_offset_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_forward_store_ctrl_U_apdone_blk : STD_LOGIC;
    signal icmp_ln56_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_i_reg_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln58_fu_145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal store_offset_fu_109_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal store_offset_fu_109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_fu_115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal store_ctrl_int : STD_LOGIC_VECTOR (95 downto 0);
    signal store_ctrl_ap_vld_int : STD_LOGIC;
    signal store_ctrl_ap_ack_int : STD_LOGIC;
    signal regslice_forward_store_ctrl_U_vld_out : STD_LOGIC;

    component regslice_forward IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_forward_store_ctrl_U : component regslice_forward
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => store_ctrl_int,
        vld_in => store_ctrl_ap_vld_int,
        ack_in => store_ctrl_ap_ack_int,
        data_out => store_ctrl,
        vld_out => regslice_forward_store_ctrl_U_vld_out,
        ack_out => store_ctrl_ap_ack,
        apdone_blk => regslice_forward_store_ctrl_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln56_fu_134_p2 = ap_const_lv1_1) and (regslice_forward_store_ctrl_U_apdone_blk = ap_const_logic_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_word_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i_i_reg_98 <= i_reg_175;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (store_ctrl_ap_ack_int = ap_const_logic_1))) then 
                i_0_i_i_reg_98 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((chunk_empty_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (mac_n_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                chunk_read_reg_157 <= chunk_dout;
                dma_length_reg_150 <= mac_vec_dout;
                store_offset_reg_162 <= store_offset_fu_109_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_forward_store_ctrl_U_apdone_blk = ap_const_logic_0))) then
                i_reg_175 <= i_fu_139_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_word_V_full_n, mac_n_empty_n, mac_vec_empty_n, mac_len_empty_n, chunk_empty_n, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, regslice_forward_store_ctrl_U_apdone_blk, icmp_ln56_fu_134_p2, store_ctrl_ap_ack_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((chunk_empty_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (mac_n_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (store_ctrl_ap_ack_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (store_ctrl_ap_ack_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln56_fu_134_p2 = ap_const_lv1_1) and (regslice_forward_store_ctrl_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln56_fu_134_p2 = ap_const_lv1_0) and (regslice_forward_store_ctrl_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((out_word_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mac_n_empty_n, mac_vec_empty_n, mac_len_empty_n, chunk_empty_n)
    begin
                ap_block_state1 <= ((chunk_empty_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (mac_n_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, regslice_forward_store_ctrl_U_apdone_blk, icmp_ln56_fu_134_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln56_fu_134_p2 = ap_const_lv1_1) and (regslice_forward_store_ctrl_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, regslice_forward_store_ctrl_U_apdone_blk, icmp_ln56_fu_134_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln56_fu_134_p2 = ap_const_lv1_1) and (regslice_forward_store_ctrl_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    chunk_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, chunk_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            chunk_blk_n <= chunk_empty_n;
        else 
            chunk_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    chunk_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_n_empty_n, mac_vec_empty_n, mac_len_empty_n, chunk_empty_n)
    begin
        if ((not(((chunk_empty_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (mac_n_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            chunk_read <= ap_const_logic_1;
        else 
            chunk_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_139_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_98) + unsigned(ap_const_lv32_1));
    icmp_ln56_fu_134_p2 <= "1" when (i_0_i_i_reg_98 = dma_length_reg_150) else "0";
    index_fu_119_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(dma_length_reg_150) * signed(tmp_i_i_fu_115_p2))), 32));

    mac_len_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_len_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_blk_n <= mac_len_empty_n;
        else 
            mac_len_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mac_len_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_n_empty_n, mac_vec_empty_n, mac_len_empty_n, chunk_empty_n)
    begin
        if ((not(((chunk_empty_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (mac_n_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_read <= ap_const_logic_1;
        else 
            mac_len_read <= ap_const_logic_0;
        end if; 
    end process;


    mac_n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_n_blk_n <= mac_n_empty_n;
        else 
            mac_n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mac_n_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_n_empty_n, mac_vec_empty_n, mac_len_empty_n, chunk_empty_n)
    begin
        if ((not(((chunk_empty_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (mac_n_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_n_read <= ap_const_logic_1;
        else 
            mac_n_read <= ap_const_logic_0;
        end if; 
    end process;


    mac_vec_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_blk_n <= mac_vec_empty_n;
        else 
            mac_vec_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mac_vec_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_n_empty_n, mac_vec_empty_n, mac_len_empty_n, chunk_empty_n)
    begin
        if ((not(((chunk_empty_n = ap_const_logic_0) or (mac_len_empty_n = ap_const_logic_0) or (mac_vec_empty_n = ap_const_logic_0) or (mac_n_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_read <= ap_const_logic_1;
        else 
            mac_vec_read <= ap_const_logic_0;
        end if; 
    end process;


    out_word_V_blk_n_assign_proc : process(out_word_V_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_word_V_blk_n <= out_word_V_full_n;
        else 
            out_word_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_word_V_din <= p_outbuff_V_q0;

    out_word_V_write_assign_proc : process(out_word_V_full_n, ap_CS_fsm_state5)
    begin
        if (((out_word_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_word_V_write <= ap_const_logic_1;
        else 
            out_word_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_outbuff_V_address0 <= zext_ln58_fu_145_p1(7 - 1 downto 0);

    p_outbuff_V_ce0_assign_proc : process(ap_CS_fsm_state4, regslice_forward_store_ctrl_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_forward_store_ctrl_U_apdone_blk = ap_const_logic_0))) then 
            p_outbuff_V_ce0 <= ap_const_logic_1;
        else 
            p_outbuff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    store_ctrl_ap_vld <= regslice_forward_store_ctrl_U_vld_out;

    store_ctrl_ap_vld_int_assign_proc : process(ap_CS_fsm_state2, store_ctrl_ap_ack_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (store_ctrl_ap_ack_int = ap_const_logic_1))) then 
            store_ctrl_ap_vld_int <= ap_const_logic_1;
        else 
            store_ctrl_ap_vld_int <= ap_const_logic_0;
        end if; 
    end process;


    store_ctrl_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, store_ctrl_ap_ack_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            store_ctrl_blk_n <= store_ctrl_ap_ack_int;
        else 
            store_ctrl_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    store_ctrl_int <= ((ap_const_lv32_2 & dma_length_reg_150) & index_fu_119_p2);
    store_offset_fu_109_p0 <= mac_n_dout;
    store_offset_fu_109_p1 <= mac_len_dout;
    store_offset_fu_109_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(store_offset_fu_109_p0) * signed(store_offset_fu_109_p1))), 32));
    tmp_i_i_fu_115_p2 <= std_logic_vector(unsigned(chunk_read_reg_157) + unsigned(store_offset_reg_162));
    zext_ln58_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_98),64));
end behav;
