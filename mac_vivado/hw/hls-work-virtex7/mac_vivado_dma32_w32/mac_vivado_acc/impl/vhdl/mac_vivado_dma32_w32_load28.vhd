-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_vivado_dma32_w32_load28 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_inbuff_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    p_inbuff_V_ce0 : OUT STD_LOGIC;
    p_inbuff_V_we0 : OUT STD_LOGIC;
    p_inbuff_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in1_word_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_word_V_empty_n : IN STD_LOGIC;
    in1_word_V_read : OUT STD_LOGIC;
    mac_vec : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_len : IN STD_LOGIC_VECTOR (31 downto 0);
    load_ctrl : OUT STD_LOGIC_VECTOR (95 downto 0);
    load_ctrl_ap_vld : OUT STD_LOGIC;
    load_ctrl_ap_ack : IN STD_LOGIC;
    chunk : IN STD_LOGIC_VECTOR (31 downto 0);
    conf_info_mac_n : IN STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mac_vec_out_full_n : IN STD_LOGIC;
    mac_vec_out_write : OUT STD_LOGIC;
    mac_len_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    mac_len_out_full_n : IN STD_LOGIC;
    mac_len_out_write : OUT STD_LOGIC;
    chunk_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    chunk_out_full_n : IN STD_LOGIC;
    chunk_out_write : OUT STD_LOGIC;
    conf_info_mac_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    conf_info_mac_n_out_full_n : IN STD_LOGIC;
    conf_info_mac_n_out_write : OUT STD_LOGIC );
end;


architecture behav of mac_vivado_dma32_w32_load28 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in1_word_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln28_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal load_ctrl_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mac_vec_out_blk_n : STD_LOGIC;
    signal mac_len_out_blk_n : STD_LOGIC;
    signal chunk_out_blk_n : STD_LOGIC;
    signal conf_info_mac_n_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal length_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_forward_load_ctrl_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal i_0_i_i_i_reg_139 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal length_fu_150_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal load_ctrl_int : STD_LOGIC_VECTOR (95 downto 0);
    signal load_ctrl_ap_vld_int : STD_LOGIC;
    signal load_ctrl_ap_ack_int : STD_LOGIC;
    signal regslice_forward_load_ctrl_U_vld_out : STD_LOGIC;

    component regslice_forward IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_forward_load_ctrl_U : component regslice_forward
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => load_ctrl_int,
        vld_in => load_ctrl_ap_vld_int,
        ack_in => load_ctrl_ap_ack_int,
        data_out => load_ctrl,
        vld_out => regslice_forward_load_ctrl_U_vld_out,
        ack_out => load_ctrl_ap_ack,
        apdone_blk => regslice_forward_load_ctrl_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((regslice_forward_load_ctrl_U_apdone_blk = ap_const_logic_1) or ((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (in1_word_V_empty_n = ap_const_logic_0)))) and (icmp_ln28_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_forward_load_ctrl_U_apdone_blk = ap_const_logic_1) or ((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (in1_word_V_empty_n = ap_const_logic_0)))) and (icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i_i_i_reg_139 <= i_fu_175_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (load_ctrl_ap_ack_int = ap_const_logic_1))) then 
                i_0_i_i_i_reg_139 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (conf_info_mac_n_out_full_n = ap_const_logic_0) or (chunk_out_full_n = ap_const_logic_0) or (mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                length_reg_191 <= length_fu_150_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in1_word_V_empty_n, mac_vec_out_full_n, mac_len_out_full_n, chunk_out_full_n, conf_info_mac_n_out_full_n, ap_CS_fsm_state4, icmp_ln28_fu_170_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, regslice_forward_load_ctrl_U_apdone_blk, load_ctrl_ap_ack_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (conf_info_mac_n_out_full_n = ap_const_logic_0) or (chunk_out_full_n = ap_const_logic_0) or (mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (load_ctrl_ap_ack_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (load_ctrl_ap_ack_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((regslice_forward_load_ctrl_U_apdone_blk = ap_const_logic_1) or ((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (in1_word_V_empty_n = ap_const_logic_0)))) and (icmp_ln28_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((regslice_forward_load_ctrl_U_apdone_blk = ap_const_logic_1) or ((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (in1_word_V_empty_n = ap_const_logic_0)))) and (icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mac_vec_out_full_n, mac_len_out_full_n, chunk_out_full_n, conf_info_mac_n_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (conf_info_mac_n_out_full_n = ap_const_logic_0) or (chunk_out_full_n = ap_const_logic_0) or (mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_assign_proc : process(in1_word_V_empty_n, icmp_ln28_fu_170_p2, regslice_forward_load_ctrl_U_apdone_blk)
    begin
                ap_block_state4 <= ((regslice_forward_load_ctrl_U_apdone_blk = ap_const_logic_1) or ((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (in1_word_V_empty_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, in1_word_V_empty_n, ap_CS_fsm_state4, icmp_ln28_fu_170_p2, regslice_forward_load_ctrl_U_apdone_blk)
    begin
        if ((not(((regslice_forward_load_ctrl_U_apdone_blk = ap_const_logic_1) or ((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (in1_word_V_empty_n = ap_const_logic_0)))) and (icmp_ln28_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(in1_word_V_empty_n, ap_CS_fsm_state4, icmp_ln28_fu_170_p2, regslice_forward_load_ctrl_U_apdone_blk)
    begin
        if ((not(((regslice_forward_load_ctrl_U_apdone_blk = ap_const_logic_1) or ((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (in1_word_V_empty_n = ap_const_logic_0)))) and (icmp_ln28_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    chunk_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, chunk_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            chunk_out_blk_n <= chunk_out_full_n;
        else 
            chunk_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chunk_out_din <= chunk;

    chunk_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_out_full_n, mac_len_out_full_n, chunk_out_full_n, conf_info_mac_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (conf_info_mac_n_out_full_n = ap_const_logic_0) or (chunk_out_full_n = ap_const_logic_0) or (mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            chunk_out_write <= ap_const_logic_1;
        else 
            chunk_out_write <= ap_const_logic_0;
        end if; 
    end process;


    conf_info_mac_n_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, conf_info_mac_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conf_info_mac_n_out_blk_n <= conf_info_mac_n_out_full_n;
        else 
            conf_info_mac_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conf_info_mac_n_out_din <= conf_info_mac_n;

    conf_info_mac_n_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_out_full_n, mac_len_out_full_n, chunk_out_full_n, conf_info_mac_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (conf_info_mac_n_out_full_n = ap_const_logic_0) or (chunk_out_full_n = ap_const_logic_0) or (mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            conf_info_mac_n_out_write <= ap_const_logic_1;
        else 
            conf_info_mac_n_out_write <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_175_p2 <= std_logic_vector(unsigned(i_0_i_i_i_reg_139) + unsigned(ap_const_lv32_1));
    icmp_ln28_fu_170_p2 <= "1" when (i_0_i_i_i_reg_139 = length_reg_191) else "0";

    in1_word_V_blk_n_assign_proc : process(in1_word_V_empty_n, ap_CS_fsm_state4, icmp_ln28_fu_170_p2)
    begin
        if (((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in1_word_V_blk_n <= in1_word_V_empty_n;
        else 
            in1_word_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in1_word_V_read_assign_proc : process(in1_word_V_empty_n, ap_CS_fsm_state4, icmp_ln28_fu_170_p2, regslice_forward_load_ctrl_U_apdone_blk)
    begin
        if ((not(((regslice_forward_load_ctrl_U_apdone_blk = ap_const_logic_1) or ((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (in1_word_V_empty_n = ap_const_logic_0)))) and (icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in1_word_V_read <= ap_const_logic_1;
        else 
            in1_word_V_read <= ap_const_logic_0;
        end if; 
    end process;

    index_fu_156_p1 <= chunk;
    index_fu_156_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(length_reg_191) * signed(index_fu_156_p1))), 32));
    length_fu_150_p0 <= mac_vec;
    length_fu_150_p1 <= mac_len;
    length_fu_150_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(length_fu_150_p0) * signed(length_fu_150_p1))), 32));
    load_ctrl_ap_vld <= regslice_forward_load_ctrl_U_vld_out;

    load_ctrl_ap_vld_int_assign_proc : process(ap_CS_fsm_state2, load_ctrl_ap_ack_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (load_ctrl_ap_ack_int = ap_const_logic_1))) then 
            load_ctrl_ap_vld_int <= ap_const_logic_1;
        else 
            load_ctrl_ap_vld_int <= ap_const_logic_0;
        end if; 
    end process;


    load_ctrl_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, load_ctrl_ap_ack_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            load_ctrl_blk_n <= load_ctrl_ap_ack_int;
        else 
            load_ctrl_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    load_ctrl_int <= ((ap_const_lv32_2 & length_reg_191) & index_fu_156_p2);

    mac_len_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_len_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_out_blk_n <= mac_len_out_full_n;
        else 
            mac_len_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mac_len_out_din <= mac_len;

    mac_len_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_out_full_n, mac_len_out_full_n, chunk_out_full_n, conf_info_mac_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (conf_info_mac_n_out_full_n = ap_const_logic_0) or (chunk_out_full_n = ap_const_logic_0) or (mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_len_out_write <= ap_const_logic_1;
        else 
            mac_len_out_write <= ap_const_logic_0;
        end if; 
    end process;


    mac_vec_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_out_blk_n <= mac_vec_out_full_n;
        else 
            mac_vec_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mac_vec_out_din <= mac_vec;

    mac_vec_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mac_vec_out_full_n, mac_len_out_full_n, chunk_out_full_n, conf_info_mac_n_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (conf_info_mac_n_out_full_n = ap_const_logic_0) or (chunk_out_full_n = ap_const_logic_0) or (mac_len_out_full_n = ap_const_logic_0) or (mac_vec_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mac_vec_out_write <= ap_const_logic_1;
        else 
            mac_vec_out_write <= ap_const_logic_0;
        end if; 
    end process;

    p_inbuff_V_address0 <= zext_ln30_fu_181_p1(13 - 1 downto 0);

    p_inbuff_V_ce0_assign_proc : process(in1_word_V_empty_n, ap_CS_fsm_state4, icmp_ln28_fu_170_p2, regslice_forward_load_ctrl_U_apdone_blk)
    begin
        if ((not(((regslice_forward_load_ctrl_U_apdone_blk = ap_const_logic_1) or ((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (in1_word_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            p_inbuff_V_ce0 <= ap_const_logic_1;
        else 
            p_inbuff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_inbuff_V_d0 <= in1_word_V_dout;

    p_inbuff_V_we0_assign_proc : process(in1_word_V_empty_n, ap_CS_fsm_state4, icmp_ln28_fu_170_p2, regslice_forward_load_ctrl_U_apdone_blk)
    begin
        if ((not(((regslice_forward_load_ctrl_U_apdone_blk = ap_const_logic_1) or ((icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (in1_word_V_empty_n = ap_const_logic_0)))) and (icmp_ln28_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            p_inbuff_V_we0 <= ap_const_logic_1;
        else 
            p_inbuff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln30_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_i_reg_139),64));
end behav;
