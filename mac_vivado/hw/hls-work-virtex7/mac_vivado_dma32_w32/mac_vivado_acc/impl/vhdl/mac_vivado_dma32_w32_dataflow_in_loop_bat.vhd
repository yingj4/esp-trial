-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_vivado_dma32_w32_dataflow_in_loop_bat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in1_word_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_word_V_empty_n : IN STD_LOGIC;
    in1_word_V_read : OUT STD_LOGIC;
    conf_info_mac_vec : IN STD_LOGIC_VECTOR (31 downto 0);
    conf_info_mac_len : IN STD_LOGIC_VECTOR (31 downto 0);
    load_ctrl : OUT STD_LOGIC_VECTOR (95 downto 0);
    b_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_word_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_word_V_full_n : IN STD_LOGIC;
    out_word_V_write : OUT STD_LOGIC;
    conf_info_mac_n : IN STD_LOGIC_VECTOR (31 downto 0);
    store_ctrl : OUT STD_LOGIC_VECTOR (95 downto 0);
    conf_info_mac_vec_ap_vld : IN STD_LOGIC;
    conf_info_mac_len_ap_vld : IN STD_LOGIC;
    load_ctrl_ap_vld : OUT STD_LOGIC;
    load_ctrl_ap_ack : IN STD_LOGIC;
    b_0_ap_vld : IN STD_LOGIC;
    conf_info_mac_n_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    store_ctrl_ap_vld : OUT STD_LOGIC;
    store_ctrl_ap_ack : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of mac_vivado_dma32_w32_dataflow_in_loop_bat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal p_inbuff_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_inbuff_V_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_inbuff_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_inbuff_V_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_outbuff_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_outbuff_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load28_U0_ap_start : STD_LOGIC;
    signal load28_U0_ap_done : STD_LOGIC;
    signal load28_U0_ap_continue : STD_LOGIC;
    signal load28_U0_ap_idle : STD_LOGIC;
    signal load28_U0_ap_ready : STD_LOGIC;
    signal load28_U0_p_inbuff_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal load28_U0_p_inbuff_V_ce0 : STD_LOGIC;
    signal load28_U0_p_inbuff_V_we0 : STD_LOGIC;
    signal load28_U0_p_inbuff_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load28_U0_in1_word_V_read : STD_LOGIC;
    signal load28_U0_load_ctrl : STD_LOGIC_VECTOR (95 downto 0);
    signal load28_U0_load_ctrl_ap_vld : STD_LOGIC;
    signal load28_U0_mac_vec_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load28_U0_mac_vec_out_write : STD_LOGIC;
    signal load28_U0_mac_len_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load28_U0_mac_len_out_write : STD_LOGIC;
    signal load28_U0_chunk_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load28_U0_chunk_out_write : STD_LOGIC;
    signal load28_U0_conf_info_mac_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load28_U0_conf_info_mac_n_out_write : STD_LOGIC;
    signal ap_channel_done_p_inbuff_V : STD_LOGIC;
    signal load28_U0_p_inbuff_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_p_inbuff_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_p_inbuff_V : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal compute_U0_ap_start : STD_LOGIC;
    signal compute_U0_ap_done : STD_LOGIC;
    signal compute_U0_ap_continue : STD_LOGIC;
    signal compute_U0_ap_idle : STD_LOGIC;
    signal compute_U0_ap_ready : STD_LOGIC;
    signal compute_U0_p_inbuff_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal compute_U0_p_inbuff_V_ce0 : STD_LOGIC;
    signal compute_U0_p_inbuff_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal compute_U0_p_inbuff_V_ce1 : STD_LOGIC;
    signal compute_U0_mac_vec_read : STD_LOGIC;
    signal compute_U0_mac_len_read : STD_LOGIC;
    signal compute_U0_p_outbuff_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal compute_U0_p_outbuff_V_ce0 : STD_LOGIC;
    signal compute_U0_p_outbuff_V_we0 : STD_LOGIC;
    signal compute_U0_p_outbuff_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_mac_vec_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_mac_vec_out_write : STD_LOGIC;
    signal compute_U0_mac_len_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_mac_len_out_write : STD_LOGIC;
    signal ap_channel_done_p_outbuff_V : STD_LOGIC;
    signal compute_U0_p_outbuff_V_full_n : STD_LOGIC;
    signal store_U0_ap_start : STD_LOGIC;
    signal store_U0_ap_done : STD_LOGIC;
    signal store_U0_ap_continue : STD_LOGIC;
    signal store_U0_ap_idle : STD_LOGIC;
    signal store_U0_ap_ready : STD_LOGIC;
    signal store_U0_p_outbuff_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal store_U0_p_outbuff_V_ce0 : STD_LOGIC;
    signal store_U0_out_word_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal store_U0_out_word_V_write : STD_LOGIC;
    signal store_U0_mac_n_read : STD_LOGIC;
    signal store_U0_mac_vec_read : STD_LOGIC;
    signal store_U0_mac_len_read : STD_LOGIC;
    signal store_U0_store_ctrl : STD_LOGIC_VECTOR (95 downto 0);
    signal store_U0_store_ctrl_ap_vld : STD_LOGIC;
    signal store_U0_chunk_read : STD_LOGIC;
    signal p_inbuff_V_i_full_n : STD_LOGIC;
    signal p_inbuff_V_t_empty_n : STD_LOGIC;
    signal p_inbuff_V_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_inbuff_V_t_we1 : STD_LOGIC;
    signal p_outbuff_V_i_full_n : STD_LOGIC;
    signal p_outbuff_V_t_empty_n : STD_LOGIC;
    signal conf_info_mac_vec_c_full_n : STD_LOGIC;
    signal conf_info_mac_vec_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conf_info_mac_vec_c_empty_n : STD_LOGIC;
    signal conf_info_mac_len_c_full_n : STD_LOGIC;
    signal conf_info_mac_len_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conf_info_mac_len_c_empty_n : STD_LOGIC;
    signal b_0_c_full_n : STD_LOGIC;
    signal b_0_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal b_0_c_empty_n : STD_LOGIC;
    signal conf_info_mac_n_c_full_n : STD_LOGIC;
    signal conf_info_mac_n_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conf_info_mac_n_c_empty_n : STD_LOGIC;
    signal conf_info_mac_vec_c1_1_full_n : STD_LOGIC;
    signal conf_info_mac_vec_c1_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conf_info_mac_vec_c1_1_empty_n : STD_LOGIC;
    signal conf_info_mac_len_c2_1_full_n : STD_LOGIC;
    signal conf_info_mac_len_c2_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conf_info_mac_len_c2_1_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal load28_U0_start_full_n : STD_LOGIC;
    signal load28_U0_start_write : STD_LOGIC;
    signal compute_U0_start_full_n : STD_LOGIC;
    signal compute_U0_start_write : STD_LOGIC;
    signal store_U0_start_full_n : STD_LOGIC;
    signal store_U0_start_write : STD_LOGIC;

    component mac_vivado_dma32_w32_load28 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_inbuff_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        p_inbuff_V_ce0 : OUT STD_LOGIC;
        p_inbuff_V_we0 : OUT STD_LOGIC;
        p_inbuff_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        in1_word_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_word_V_empty_n : IN STD_LOGIC;
        in1_word_V_read : OUT STD_LOGIC;
        mac_vec : IN STD_LOGIC_VECTOR (31 downto 0);
        mac_len : IN STD_LOGIC_VECTOR (31 downto 0);
        load_ctrl : OUT STD_LOGIC_VECTOR (95 downto 0);
        load_ctrl_ap_vld : OUT STD_LOGIC;
        load_ctrl_ap_ack : IN STD_LOGIC;
        chunk : IN STD_LOGIC_VECTOR (31 downto 0);
        conf_info_mac_n : IN STD_LOGIC_VECTOR (31 downto 0);
        mac_vec_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mac_vec_out_full_n : IN STD_LOGIC;
        mac_vec_out_write : OUT STD_LOGIC;
        mac_len_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mac_len_out_full_n : IN STD_LOGIC;
        mac_len_out_write : OUT STD_LOGIC;
        chunk_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        chunk_out_full_n : IN STD_LOGIC;
        chunk_out_write : OUT STD_LOGIC;
        conf_info_mac_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conf_info_mac_n_out_full_n : IN STD_LOGIC;
        conf_info_mac_n_out_write : OUT STD_LOGIC );
    end component;


    component mac_vivado_dma32_w32_compute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_inbuff_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        p_inbuff_V_ce0 : OUT STD_LOGIC;
        p_inbuff_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_inbuff_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        p_inbuff_V_ce1 : OUT STD_LOGIC;
        p_inbuff_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        mac_vec_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        mac_vec_empty_n : IN STD_LOGIC;
        mac_vec_read : OUT STD_LOGIC;
        mac_len_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        mac_len_empty_n : IN STD_LOGIC;
        mac_len_read : OUT STD_LOGIC;
        p_outbuff_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_outbuff_V_ce0 : OUT STD_LOGIC;
        p_outbuff_V_we0 : OUT STD_LOGIC;
        p_outbuff_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        mac_vec_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mac_vec_out_full_n : IN STD_LOGIC;
        mac_vec_out_write : OUT STD_LOGIC;
        mac_len_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mac_len_out_full_n : IN STD_LOGIC;
        mac_len_out_write : OUT STD_LOGIC );
    end component;


    component mac_vivado_dma32_w32_store IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_outbuff_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        p_outbuff_V_ce0 : OUT STD_LOGIC;
        p_outbuff_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_word_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_word_V_full_n : IN STD_LOGIC;
        out_word_V_write : OUT STD_LOGIC;
        mac_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        mac_n_empty_n : IN STD_LOGIC;
        mac_n_read : OUT STD_LOGIC;
        mac_vec_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        mac_vec_empty_n : IN STD_LOGIC;
        mac_vec_read : OUT STD_LOGIC;
        mac_len_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        mac_len_empty_n : IN STD_LOGIC;
        mac_len_read : OUT STD_LOGIC;
        store_ctrl : OUT STD_LOGIC_VECTOR (95 downto 0);
        store_ctrl_ap_vld : OUT STD_LOGIC;
        store_ctrl_ap_ack : IN STD_LOGIC;
        chunk_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        chunk_empty_n : IN STD_LOGIC;
        chunk_read : OUT STD_LOGIC );
    end component;


    component mac_vivado_dma32_w32_dataflow_in_loop_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component mac_vivado_dma32_w32_dataflow_in_loop_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component mac_vivado_dma32_w32_fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mac_vivado_dma32_w32_fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    p_inbuff_V_U : component mac_vivado_dma32_w32_dataflow_in_loop_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 6400,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => load28_U0_p_inbuff_V_address0,
        i_ce0 => load28_U0_p_inbuff_V_ce0,
        i_we0 => load28_U0_p_inbuff_V_we0,
        i_d0 => load28_U0_p_inbuff_V_d0,
        i_q0 => p_inbuff_V_i_q0,
        i_address1 => ap_const_lv13_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => p_inbuff_V_i_q1,
        t_address0 => compute_U0_p_inbuff_V_address0,
        t_ce0 => compute_U0_p_inbuff_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => p_inbuff_V_t_q0,
        t_address1 => compute_U0_p_inbuff_V_address1,
        t_ce1 => compute_U0_p_inbuff_V_ce1,
        t_q1 => p_inbuff_V_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => p_inbuff_V_i_full_n,
        i_write => ap_channel_done_p_inbuff_V,
        t_empty_n => p_inbuff_V_t_empty_n,
        t_read => compute_U0_ap_ready);

    p_outbuff_V_U : component mac_vivado_dma32_w32_dataflow_in_loop_cud
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => compute_U0_p_outbuff_V_address0,
        i_ce0 => compute_U0_p_outbuff_V_ce0,
        i_we0 => compute_U0_p_outbuff_V_we0,
        i_d0 => compute_U0_p_outbuff_V_d0,
        i_q0 => p_outbuff_V_i_q0,
        t_address0 => store_U0_p_outbuff_V_address0,
        t_ce0 => store_U0_p_outbuff_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => p_outbuff_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => p_outbuff_V_i_full_n,
        i_write => compute_U0_ap_done,
        t_empty_n => p_outbuff_V_t_empty_n,
        t_read => store_U0_ap_ready);

    load28_U0 : component mac_vivado_dma32_w32_load28
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load28_U0_ap_start,
        ap_done => load28_U0_ap_done,
        ap_continue => load28_U0_ap_continue,
        ap_idle => load28_U0_ap_idle,
        ap_ready => load28_U0_ap_ready,
        p_inbuff_V_address0 => load28_U0_p_inbuff_V_address0,
        p_inbuff_V_ce0 => load28_U0_p_inbuff_V_ce0,
        p_inbuff_V_we0 => load28_U0_p_inbuff_V_we0,
        p_inbuff_V_d0 => load28_U0_p_inbuff_V_d0,
        in1_word_V_dout => in1_word_V_dout,
        in1_word_V_empty_n => in1_word_V_empty_n,
        in1_word_V_read => load28_U0_in1_word_V_read,
        mac_vec => conf_info_mac_vec,
        mac_len => conf_info_mac_len,
        load_ctrl => load28_U0_load_ctrl,
        load_ctrl_ap_vld => load28_U0_load_ctrl_ap_vld,
        load_ctrl_ap_ack => load_ctrl_ap_ack,
        chunk => b_0,
        conf_info_mac_n => conf_info_mac_n,
        mac_vec_out_din => load28_U0_mac_vec_out_din,
        mac_vec_out_full_n => conf_info_mac_vec_c_full_n,
        mac_vec_out_write => load28_U0_mac_vec_out_write,
        mac_len_out_din => load28_U0_mac_len_out_din,
        mac_len_out_full_n => conf_info_mac_len_c_full_n,
        mac_len_out_write => load28_U0_mac_len_out_write,
        chunk_out_din => load28_U0_chunk_out_din,
        chunk_out_full_n => b_0_c_full_n,
        chunk_out_write => load28_U0_chunk_out_write,
        conf_info_mac_n_out_din => load28_U0_conf_info_mac_n_out_din,
        conf_info_mac_n_out_full_n => conf_info_mac_n_c_full_n,
        conf_info_mac_n_out_write => load28_U0_conf_info_mac_n_out_write);

    compute_U0 : component mac_vivado_dma32_w32_compute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => compute_U0_ap_start,
        ap_done => compute_U0_ap_done,
        ap_continue => compute_U0_ap_continue,
        ap_idle => compute_U0_ap_idle,
        ap_ready => compute_U0_ap_ready,
        p_inbuff_V_address0 => compute_U0_p_inbuff_V_address0,
        p_inbuff_V_ce0 => compute_U0_p_inbuff_V_ce0,
        p_inbuff_V_q0 => p_inbuff_V_t_q0,
        p_inbuff_V_address1 => compute_U0_p_inbuff_V_address1,
        p_inbuff_V_ce1 => compute_U0_p_inbuff_V_ce1,
        p_inbuff_V_q1 => p_inbuff_V_t_q1,
        mac_vec_dout => conf_info_mac_vec_c_dout,
        mac_vec_empty_n => conf_info_mac_vec_c_empty_n,
        mac_vec_read => compute_U0_mac_vec_read,
        mac_len_dout => conf_info_mac_len_c_dout,
        mac_len_empty_n => conf_info_mac_len_c_empty_n,
        mac_len_read => compute_U0_mac_len_read,
        p_outbuff_V_address0 => compute_U0_p_outbuff_V_address0,
        p_outbuff_V_ce0 => compute_U0_p_outbuff_V_ce0,
        p_outbuff_V_we0 => compute_U0_p_outbuff_V_we0,
        p_outbuff_V_d0 => compute_U0_p_outbuff_V_d0,
        mac_vec_out_din => compute_U0_mac_vec_out_din,
        mac_vec_out_full_n => conf_info_mac_vec_c1_1_full_n,
        mac_vec_out_write => compute_U0_mac_vec_out_write,
        mac_len_out_din => compute_U0_mac_len_out_din,
        mac_len_out_full_n => conf_info_mac_len_c2_1_full_n,
        mac_len_out_write => compute_U0_mac_len_out_write);

    store_U0 : component mac_vivado_dma32_w32_store
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => store_U0_ap_start,
        ap_done => store_U0_ap_done,
        ap_continue => store_U0_ap_continue,
        ap_idle => store_U0_ap_idle,
        ap_ready => store_U0_ap_ready,
        p_outbuff_V_address0 => store_U0_p_outbuff_V_address0,
        p_outbuff_V_ce0 => store_U0_p_outbuff_V_ce0,
        p_outbuff_V_q0 => p_outbuff_V_t_q0,
        out_word_V_din => store_U0_out_word_V_din,
        out_word_V_full_n => out_word_V_full_n,
        out_word_V_write => store_U0_out_word_V_write,
        mac_n_dout => conf_info_mac_n_c_dout,
        mac_n_empty_n => conf_info_mac_n_c_empty_n,
        mac_n_read => store_U0_mac_n_read,
        mac_vec_dout => conf_info_mac_vec_c1_1_dout,
        mac_vec_empty_n => conf_info_mac_vec_c1_1_empty_n,
        mac_vec_read => store_U0_mac_vec_read,
        mac_len_dout => conf_info_mac_len_c2_1_dout,
        mac_len_empty_n => conf_info_mac_len_c2_1_empty_n,
        mac_len_read => store_U0_mac_len_read,
        store_ctrl => store_U0_store_ctrl,
        store_ctrl_ap_vld => store_U0_store_ctrl_ap_vld,
        store_ctrl_ap_ack => store_ctrl_ap_ack,
        chunk_dout => b_0_c_dout,
        chunk_empty_n => b_0_c_empty_n,
        chunk_read => store_U0_chunk_read);

    conf_info_mac_vec_c_U : component mac_vivado_dma32_w32_fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load28_U0_mac_vec_out_din,
        if_full_n => conf_info_mac_vec_c_full_n,
        if_write => load28_U0_mac_vec_out_write,
        if_dout => conf_info_mac_vec_c_dout,
        if_empty_n => conf_info_mac_vec_c_empty_n,
        if_read => compute_U0_mac_vec_read);

    conf_info_mac_len_c_U : component mac_vivado_dma32_w32_fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load28_U0_mac_len_out_din,
        if_full_n => conf_info_mac_len_c_full_n,
        if_write => load28_U0_mac_len_out_write,
        if_dout => conf_info_mac_len_c_dout,
        if_empty_n => conf_info_mac_len_c_empty_n,
        if_read => compute_U0_mac_len_read);

    b_0_c_U : component mac_vivado_dma32_w32_fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load28_U0_chunk_out_din,
        if_full_n => b_0_c_full_n,
        if_write => load28_U0_chunk_out_write,
        if_dout => b_0_c_dout,
        if_empty_n => b_0_c_empty_n,
        if_read => store_U0_chunk_read);

    conf_info_mac_n_c_U : component mac_vivado_dma32_w32_fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load28_U0_conf_info_mac_n_out_din,
        if_full_n => conf_info_mac_n_c_full_n,
        if_write => load28_U0_conf_info_mac_n_out_write,
        if_dout => conf_info_mac_n_c_dout,
        if_empty_n => conf_info_mac_n_c_empty_n,
        if_read => store_U0_mac_n_read);

    conf_info_mac_vec_c1_1_U : component mac_vivado_dma32_w32_fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_U0_mac_vec_out_din,
        if_full_n => conf_info_mac_vec_c1_1_full_n,
        if_write => compute_U0_mac_vec_out_write,
        if_dout => conf_info_mac_vec_c1_1_dout,
        if_empty_n => conf_info_mac_vec_c1_1_empty_n,
        if_read => store_U0_mac_vec_read);

    conf_info_mac_len_c2_1_U : component mac_vivado_dma32_w32_fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_U0_mac_len_out_din,
        if_full_n => conf_info_mac_len_c2_1_full_n,
        if_write => compute_U0_mac_len_out_write,
        if_dout => conf_info_mac_len_c2_1_dout,
        if_empty_n => conf_info_mac_len_c2_1_empty_n,
        if_read => store_U0_mac_len_read);





    ap_sync_reg_channel_write_p_inbuff_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_p_inbuff_V <= ap_const_logic_0;
            else
                if (((load28_U0_ap_done and load28_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_p_inbuff_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_p_inbuff_V <= ap_sync_channel_write_p_inbuff_V;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_p_inbuff_V <= (load28_U0_ap_done and (ap_sync_reg_channel_write_p_inbuff_V xor ap_const_logic_1));
    ap_channel_done_p_outbuff_V <= compute_U0_ap_done;
    ap_done <= ap_sync_done;
    ap_idle <= (store_U0_ap_idle and load28_U0_ap_idle and (p_outbuff_V_t_empty_n xor ap_const_logic_1) and (p_inbuff_V_t_empty_n xor ap_const_logic_1) and compute_U0_ap_idle);
    ap_ready <= load28_U0_ap_ready;
    ap_sync_channel_write_p_inbuff_V <= ((load28_U0_p_inbuff_V_full_n and ap_channel_done_p_inbuff_V) or ap_sync_reg_channel_write_p_inbuff_V);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (store_U0_ap_done and load28_U0_ap_done);
    ap_sync_ready <= load28_U0_ap_ready;
    compute_U0_ap_continue <= p_outbuff_V_i_full_n;
    compute_U0_ap_start <= p_inbuff_V_t_empty_n;
    compute_U0_p_outbuff_V_full_n <= p_outbuff_V_i_full_n;
    compute_U0_start_full_n <= ap_const_logic_1;
    compute_U0_start_write <= ap_const_logic_0;
    in1_word_V_read <= load28_U0_in1_word_V_read;
    load28_U0_ap_continue <= (ap_sync_continue and ap_sync_channel_write_p_inbuff_V);
    load28_U0_ap_start <= ap_start;
    load28_U0_p_inbuff_V_full_n <= p_inbuff_V_i_full_n;
    load28_U0_start_full_n <= ap_const_logic_1;
    load28_U0_start_write <= ap_const_logic_0;
    load_ctrl <= load28_U0_load_ctrl;
    load_ctrl_ap_vld <= load28_U0_load_ctrl_ap_vld;
    out_word_V_din <= store_U0_out_word_V_din;
    out_word_V_write <= store_U0_out_word_V_write;
    p_inbuff_V_t_d1 <= ap_const_lv32_0;
    p_inbuff_V_t_we1 <= ap_const_logic_0;
    store_U0_ap_continue <= ap_sync_continue;
    store_U0_ap_start <= p_outbuff_V_t_empty_n;
    store_U0_start_full_n <= ap_const_logic_1;
    store_U0_start_write <= ap_const_logic_0;
    store_ctrl <= store_U0_store_ctrl;
    store_ctrl_ap_vld <= store_U0_store_ctrl_ap_vld;
end behav;
