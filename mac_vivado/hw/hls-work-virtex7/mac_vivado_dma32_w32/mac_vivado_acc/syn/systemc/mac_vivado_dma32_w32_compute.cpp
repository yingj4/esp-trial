// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mac_vivado_dma32_w32_compute.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mac_vivado_dma32_w32_compute::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mac_vivado_dma32_w32_compute::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> mac_vivado_dma32_w32_compute::ap_ST_fsm_state1 = "1";
const sc_lv<7> mac_vivado_dma32_w32_compute::ap_ST_fsm_state2 = "10";
const sc_lv<7> mac_vivado_dma32_w32_compute::ap_ST_fsm_state3 = "100";
const sc_lv<7> mac_vivado_dma32_w32_compute::ap_ST_fsm_state4 = "1000";
const sc_lv<7> mac_vivado_dma32_w32_compute::ap_ST_fsm_state5 = "10000";
const sc_lv<7> mac_vivado_dma32_w32_compute::ap_ST_fsm_state6 = "100000";
const sc_lv<7> mac_vivado_dma32_w32_compute::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> mac_vivado_dma32_w32_compute::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mac_vivado_dma32_w32_compute::ap_const_lv32_1 = "1";
const sc_lv<1> mac_vivado_dma32_w32_compute::ap_const_lv1_0 = "0";
const sc_lv<32> mac_vivado_dma32_w32_compute::ap_const_lv32_3 = "11";
const sc_lv<1> mac_vivado_dma32_w32_compute::ap_const_lv1_1 = "1";
const sc_lv<32> mac_vivado_dma32_w32_compute::ap_const_lv32_4 = "100";
const sc_lv<32> mac_vivado_dma32_w32_compute::ap_const_lv32_5 = "101";
const sc_lv<32> mac_vivado_dma32_w32_compute::ap_const_lv32_6 = "110";
const sc_lv<32> mac_vivado_dma32_w32_compute::ap_const_lv32_2 = "10";
const sc_lv<13> mac_vivado_dma32_w32_compute::ap_const_lv13_0 = "0000000000000";
const sc_lv<32> mac_vivado_dma32_w32_compute::ap_const_lv32_1900 = "1100100000000";
const sc_lv<13> mac_vivado_dma32_w32_compute::ap_const_lv13_1900 = "1100100000000";
const sc_lv<13> mac_vivado_dma32_w32_compute::ap_const_lv13_1 = "1";
const sc_lv<32> mac_vivado_dma32_w32_compute::ap_const_lv32_FFFFE700 = "11111111111111111110011100000000";
const sc_lv<13> mac_vivado_dma32_w32_compute::ap_const_lv13_2 = "10";
const bool mac_vivado_dma32_w32_compute::ap_const_boolean_1 = true;

mac_vivado_dma32_w32_compute::mac_vivado_dma32_w32_compute(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_fu_274_p2);
    sensitive << ( mul_ln95_reg_402 );
    sensitive << ( acc_0_i_fu_46 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln86_fu_211_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln86_fu_211_p2 );

    SC_METHOD(thread_i_1_fu_320_p2);
    sensitive << ( i1_0_i_reg_162 );

    SC_METHOD(thread_i_fu_195_p2);
    sensitive << ( i_0_i_reg_141 );

    SC_METHOD(thread_icmp_ln100_fu_286_p2);
    sensitive << ( mac_len_read_reg_326 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( vector_index_fu_280_p2 );

    SC_METHOD(thread_icmp_ln75_fu_190_p2);
    sensitive << ( in_rem_2_reg_331 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_reg_141 );

    SC_METHOD(thread_icmp_ln86_fu_211_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( in_rem_0_i_reg_152 );

    SC_METHOD(thread_icmp_ln89_fu_217_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln86_fu_211_p2 );
    sensitive << ( in_rem_0_i_reg_152 );

    SC_METHOD(thread_icmp_ln92_fu_235_p2);
    sensitive << ( in_len_reg_379 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i1_0_i_reg_162 );

    SC_METHOD(thread_in_len_fu_227_p3);
    sensitive << ( icmp_ln89_fu_217_p2 );
    sensitive << ( trunc_ln86_fu_223_p1 );

    SC_METHOD(thread_in_rem_2_fu_184_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_len_dout );

    SC_METHOD(thread_in_rem_2_fu_184_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_dout );

    SC_METHOD(thread_in_rem_2_fu_184_p2);
    sensitive << ( in_rem_2_fu_184_p0 );
    sensitive << ( in_rem_2_fu_184_p1 );

    SC_METHOD(thread_in_rem_fu_256_p2);
    sensitive << ( in_rem_0_i_reg_152 );

    SC_METHOD(thread_mac_len_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_len_empty_n );

    SC_METHOD(thread_mac_len_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_len_out_full_n );

    SC_METHOD(thread_mac_len_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_dout );
    sensitive << ( mac_len_empty_n );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );

    SC_METHOD(thread_mac_len_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );

    SC_METHOD(thread_mac_len_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );

    SC_METHOD(thread_mac_vec_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_empty_n );

    SC_METHOD(thread_mac_vec_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_out_full_n );

    SC_METHOD(thread_mac_vec_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_dout );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );

    SC_METHOD(thread_mac_vec_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );

    SC_METHOD(thread_mac_vec_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );

    SC_METHOD(thread_mul_ln95_fu_262_p0);
    sensitive << ( p_inbuff_V_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_mul_ln95_fu_262_p1);
    sensitive << ( p_inbuff_V_q1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_mul_ln95_fu_262_p2);
    sensitive << ( mul_ln95_fu_262_p0 );
    sensitive << ( mul_ln95_fu_262_p1 );

    SC_METHOD(thread_or_ln95_fu_245_p2);
    sensitive << ( i1_0_i_reg_162 );

    SC_METHOD(thread_p_inbuff_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sext_ln76_fu_201_p1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln95_fu_240_p1 );

    SC_METHOD(thread_p_inbuff_V_address1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln95_1_fu_251_p1 );

    SC_METHOD(thread_p_inbuff_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_p_inbuff_V_ce1);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_p_outbuff_V_address0);
    sensitive << ( sext_ln76_reg_345 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln101_fu_304_p1 );

    SC_METHOD(thread_p_outbuff_V_ce0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_p_outbuff_V_d0);
    sensitive << ( p_inbuff_V_q0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( acc_fu_274_p2 );

    SC_METHOD(thread_p_outbuff_V_we0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln100_fu_286_p2 );

    SC_METHOD(thread_sext_ln76_fu_201_p1);
    sensitive << ( i_0_i_reg_141 );

    SC_METHOD(thread_trunc_ln86_fu_223_p1);
    sensitive << ( in_rem_0_i_reg_152 );

    SC_METHOD(thread_vector_index_fu_280_p2);
    sensitive << ( vector_index_1_fu_54 );

    SC_METHOD(thread_vector_number_fu_309_p2);
    sensitive << ( vector_number_1_fu_50 );

    SC_METHOD(thread_zext_ln101_fu_304_p1);
    sensitive << ( vector_number_1_fu_50 );

    SC_METHOD(thread_zext_ln95_1_fu_251_p1);
    sensitive << ( or_ln95_fu_245_p2 );

    SC_METHOD(thread_zext_ln95_fu_240_p1);
    sensitive << ( i1_0_i_reg_162 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mac_vec_empty_n );
    sensitive << ( mac_len_empty_n );
    sensitive << ( mac_vec_out_full_n );
    sensitive << ( mac_len_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln75_fu_190_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln86_fu_211_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln92_fu_235_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mac_vivado_dma32_w32_compute_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_inbuff_V_address0, "(port)p_inbuff_V_address0");
    sc_trace(mVcdFile, p_inbuff_V_ce0, "(port)p_inbuff_V_ce0");
    sc_trace(mVcdFile, p_inbuff_V_q0, "(port)p_inbuff_V_q0");
    sc_trace(mVcdFile, p_inbuff_V_address1, "(port)p_inbuff_V_address1");
    sc_trace(mVcdFile, p_inbuff_V_ce1, "(port)p_inbuff_V_ce1");
    sc_trace(mVcdFile, p_inbuff_V_q1, "(port)p_inbuff_V_q1");
    sc_trace(mVcdFile, mac_vec_dout, "(port)mac_vec_dout");
    sc_trace(mVcdFile, mac_vec_empty_n, "(port)mac_vec_empty_n");
    sc_trace(mVcdFile, mac_vec_read, "(port)mac_vec_read");
    sc_trace(mVcdFile, mac_len_dout, "(port)mac_len_dout");
    sc_trace(mVcdFile, mac_len_empty_n, "(port)mac_len_empty_n");
    sc_trace(mVcdFile, mac_len_read, "(port)mac_len_read");
    sc_trace(mVcdFile, p_outbuff_V_address0, "(port)p_outbuff_V_address0");
    sc_trace(mVcdFile, p_outbuff_V_ce0, "(port)p_outbuff_V_ce0");
    sc_trace(mVcdFile, p_outbuff_V_we0, "(port)p_outbuff_V_we0");
    sc_trace(mVcdFile, p_outbuff_V_d0, "(port)p_outbuff_V_d0");
    sc_trace(mVcdFile, mac_vec_out_din, "(port)mac_vec_out_din");
    sc_trace(mVcdFile, mac_vec_out_full_n, "(port)mac_vec_out_full_n");
    sc_trace(mVcdFile, mac_vec_out_write, "(port)mac_vec_out_write");
    sc_trace(mVcdFile, mac_len_out_din, "(port)mac_len_out_din");
    sc_trace(mVcdFile, mac_len_out_full_n, "(port)mac_len_out_full_n");
    sc_trace(mVcdFile, mac_len_out_write, "(port)mac_len_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, mac_vec_blk_n, "mac_vec_blk_n");
    sc_trace(mVcdFile, mac_len_blk_n, "mac_len_blk_n");
    sc_trace(mVcdFile, mac_vec_out_blk_n, "mac_vec_out_blk_n");
    sc_trace(mVcdFile, mac_len_out_blk_n, "mac_len_out_blk_n");
    sc_trace(mVcdFile, mac_len_read_reg_326, "mac_len_read_reg_326");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, in_rem_2_fu_184_p2, "in_rem_2_fu_184_p2");
    sc_trace(mVcdFile, in_rem_2_reg_331, "in_rem_2_reg_331");
    sc_trace(mVcdFile, i_fu_195_p2, "i_fu_195_p2");
    sc_trace(mVcdFile, i_reg_340, "i_reg_340");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sext_ln76_fu_201_p1, "sext_ln76_fu_201_p1");
    sc_trace(mVcdFile, sext_ln76_reg_345, "sext_ln76_reg_345");
    sc_trace(mVcdFile, icmp_ln75_fu_190_p2, "icmp_ln75_fu_190_p2");
    sc_trace(mVcdFile, in_len_fu_227_p3, "in_len_fu_227_p3");
    sc_trace(mVcdFile, in_len_reg_379, "in_len_reg_379");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln86_fu_211_p2, "icmp_ln86_fu_211_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln92_fu_235_p2, "icmp_ln92_fu_235_p2");
    sc_trace(mVcdFile, in_rem_fu_256_p2, "in_rem_fu_256_p2");
    sc_trace(mVcdFile, mul_ln95_fu_262_p2, "mul_ln95_fu_262_p2");
    sc_trace(mVcdFile, mul_ln95_reg_402, "mul_ln95_reg_402");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_1_fu_320_p2, "i_1_fu_320_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_0_i_reg_141, "i_0_i_reg_141");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, in_rem_0_i_reg_152, "in_rem_0_i_reg_152");
    sc_trace(mVcdFile, i1_0_i_reg_162, "i1_0_i_reg_162");
    sc_trace(mVcdFile, zext_ln95_fu_240_p1, "zext_ln95_fu_240_p1");
    sc_trace(mVcdFile, zext_ln95_1_fu_251_p1, "zext_ln95_1_fu_251_p1");
    sc_trace(mVcdFile, zext_ln101_fu_304_p1, "zext_ln101_fu_304_p1");
    sc_trace(mVcdFile, icmp_ln100_fu_286_p2, "icmp_ln100_fu_286_p2");
    sc_trace(mVcdFile, acc_0_i_fu_46, "acc_0_i_fu_46");
    sc_trace(mVcdFile, acc_fu_274_p2, "acc_fu_274_p2");
    sc_trace(mVcdFile, vector_number_1_fu_50, "vector_number_1_fu_50");
    sc_trace(mVcdFile, vector_number_fu_309_p2, "vector_number_fu_309_p2");
    sc_trace(mVcdFile, vector_index_1_fu_54, "vector_index_1_fu_54");
    sc_trace(mVcdFile, vector_index_fu_280_p2, "vector_index_fu_280_p2");
    sc_trace(mVcdFile, in_rem_2_fu_184_p0, "in_rem_2_fu_184_p0");
    sc_trace(mVcdFile, in_rem_2_fu_184_p1, "in_rem_2_fu_184_p1");
    sc_trace(mVcdFile, icmp_ln89_fu_217_p2, "icmp_ln89_fu_217_p2");
    sc_trace(mVcdFile, trunc_ln86_fu_223_p1, "trunc_ln86_fu_223_p1");
    sc_trace(mVcdFile, or_ln95_fu_245_p2, "or_ln95_fu_245_p2");
    sc_trace(mVcdFile, mul_ln95_fu_262_p0, "mul_ln95_fu_262_p0");
    sc_trace(mVcdFile, mul_ln95_fu_262_p1, "mul_ln95_fu_262_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

mac_vivado_dma32_w32_compute::~mac_vivado_dma32_w32_compute() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void mac_vivado_dma32_w32_compute::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln100_fu_286_p2.read()))) {
        acc_0_i_fu_46 = acc_fu_274_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(icmp_ln75_fu_190_p2.read(), ap_const_lv1_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln100_fu_286_p2.read())))) {
        acc_0_i_fu_46 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln86_fu_211_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i1_0_i_reg_162 = i_1_fu_320_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln86_fu_211_p2.read(), ap_const_lv1_1))) {
        i1_0_i_reg_162 = ap_const_lv13_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_i_reg_141 = i_reg_340.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read())))) {
        i_0_i_reg_141 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln75_fu_190_p2.read(), ap_const_lv1_1))) {
        in_rem_0_i_reg_152 = in_rem_2_reg_331.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln92_fu_235_p2.read()))) {
        in_rem_0_i_reg_152 = in_rem_fu_256_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln100_fu_286_p2.read()))) {
        vector_index_1_fu_54 = vector_index_fu_280_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(icmp_ln75_fu_190_p2.read(), ap_const_lv1_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln100_fu_286_p2.read())))) {
        vector_index_1_fu_54 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln100_fu_286_p2.read()))) {
        vector_number_1_fu_50 = vector_number_fu_309_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln75_fu_190_p2.read(), ap_const_lv1_1))) {
        vector_number_1_fu_50 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_340 = i_fu_195_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln86_fu_211_p2.read(), ap_const_lv1_1))) {
        in_len_reg_379 = in_len_fu_227_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read())))) {
        in_rem_2_reg_331 = in_rem_2_fu_184_p2.read();
        mac_len_read_reg_326 = mac_len_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        mul_ln95_reg_402 = mul_ln95_fu_262_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln75_fu_190_p2.read(), ap_const_lv1_0))) {
        sext_ln76_reg_345 = sext_ln76_fu_201_p1.read();
    }
}

void mac_vivado_dma32_w32_compute::thread_acc_fu_274_p2() {
    acc_fu_274_p2 = (!acc_0_i_fu_46.read().is_01() || !mul_ln95_reg_402.read().is_01())? sc_lv<32>(): (sc_biguint<32>(acc_0_i_fu_46.read()) + sc_biguint<32>(mul_ln95_reg_402.read()));
}

void mac_vivado_dma32_w32_compute::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mac_vivado_dma32_w32_compute::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mac_vivado_dma32_w32_compute::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mac_vivado_dma32_w32_compute::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mac_vivado_dma32_w32_compute::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mac_vivado_dma32_w32_compute::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mac_vivado_dma32_w32_compute::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void mac_vivado_dma32_w32_compute::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read()));
}

void mac_vivado_dma32_w32_compute::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln86_fu_211_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void mac_vivado_dma32_w32_compute::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_compute::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln86_fu_211_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_compute::thread_i_1_fu_320_p2() {
    i_1_fu_320_p2 = (!i1_0_i_reg_162.read().is_01() || !ap_const_lv13_2.is_01())? sc_lv<13>(): (sc_biguint<13>(i1_0_i_reg_162.read()) + sc_biguint<13>(ap_const_lv13_2));
}

void mac_vivado_dma32_w32_compute::thread_i_fu_195_p2() {
    i_fu_195_p2 = (!i_0_i_reg_141.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(i_0_i_reg_141.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void mac_vivado_dma32_w32_compute::thread_icmp_ln100_fu_286_p2() {
    icmp_ln100_fu_286_p2 = (!vector_index_fu_280_p2.read().is_01() || !mac_len_read_reg_326.read().is_01())? sc_lv<1>(): sc_lv<1>(vector_index_fu_280_p2.read() == mac_len_read_reg_326.read());
}

void mac_vivado_dma32_w32_compute::thread_icmp_ln75_fu_190_p2() {
    icmp_ln75_fu_190_p2 = (!i_0_i_reg_141.read().is_01() || !in_rem_2_reg_331.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_141.read() == in_rem_2_reg_331.read());
}

void mac_vivado_dma32_w32_compute::thread_icmp_ln86_fu_211_p2() {
    icmp_ln86_fu_211_p2 = (!in_rem_0_i_reg_152.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(in_rem_0_i_reg_152.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void mac_vivado_dma32_w32_compute::thread_icmp_ln89_fu_217_p2() {
    icmp_ln89_fu_217_p2 = (!in_rem_0_i_reg_152.read().is_01() || !ap_const_lv32_1900.is_01())? sc_lv<1>(): (sc_bigint<32>(in_rem_0_i_reg_152.read()) > sc_bigint<32>(ap_const_lv32_1900));
}

void mac_vivado_dma32_w32_compute::thread_icmp_ln92_fu_235_p2() {
    icmp_ln92_fu_235_p2 = (!i1_0_i_reg_162.read().is_01() || !in_len_reg_379.read().is_01())? sc_lv<1>(): (sc_biguint<13>(i1_0_i_reg_162.read()) < sc_biguint<13>(in_len_reg_379.read()));
}

void mac_vivado_dma32_w32_compute::thread_in_len_fu_227_p3() {
    in_len_fu_227_p3 = (!icmp_ln89_fu_217_p2.read()[0].is_01())? sc_lv<13>(): ((icmp_ln89_fu_217_p2.read()[0].to_bool())? ap_const_lv13_1900: trunc_ln86_fu_223_p1.read());
}

void mac_vivado_dma32_w32_compute::thread_in_rem_2_fu_184_p0() {
    in_rem_2_fu_184_p0 = mac_len_dout.read();
}

void mac_vivado_dma32_w32_compute::thread_in_rem_2_fu_184_p1() {
    in_rem_2_fu_184_p1 = mac_vec_dout.read();
}

void mac_vivado_dma32_w32_compute::thread_in_rem_2_fu_184_p2() {
    in_rem_2_fu_184_p2 = (!in_rem_2_fu_184_p0.read().is_01() || !in_rem_2_fu_184_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(in_rem_2_fu_184_p0.read()) * sc_bigint<32>(in_rem_2_fu_184_p1.read());
}

void mac_vivado_dma32_w32_compute::thread_in_rem_fu_256_p2() {
    in_rem_fu_256_p2 = (!in_rem_0_i_reg_152.read().is_01() || !ap_const_lv32_FFFFE700.is_01())? sc_lv<32>(): (sc_biguint<32>(in_rem_0_i_reg_152.read()) + sc_bigint<32>(ap_const_lv32_FFFFE700));
}

void mac_vivado_dma32_w32_compute::thread_mac_len_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        mac_len_blk_n = mac_len_empty_n.read();
    } else {
        mac_len_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma32_w32_compute::thread_mac_len_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        mac_len_out_blk_n = mac_len_out_full_n.read();
    } else {
        mac_len_out_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma32_w32_compute::thread_mac_len_out_din() {
    mac_len_out_din = mac_len_dout.read();
}

void mac_vivado_dma32_w32_compute::thread_mac_len_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read())))) {
        mac_len_out_write = ap_const_logic_1;
    } else {
        mac_len_out_write = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_compute::thread_mac_len_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read())))) {
        mac_len_read = ap_const_logic_1;
    } else {
        mac_len_read = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_compute::thread_mac_vec_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        mac_vec_blk_n = mac_vec_empty_n.read();
    } else {
        mac_vec_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma32_w32_compute::thread_mac_vec_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        mac_vec_out_blk_n = mac_vec_out_full_n.read();
    } else {
        mac_vec_out_blk_n = ap_const_logic_1;
    }
}

void mac_vivado_dma32_w32_compute::thread_mac_vec_out_din() {
    mac_vec_out_din = mac_vec_dout.read();
}

void mac_vivado_dma32_w32_compute::thread_mac_vec_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read())))) {
        mac_vec_out_write = ap_const_logic_1;
    } else {
        mac_vec_out_write = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_compute::thread_mac_vec_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read())))) {
        mac_vec_read = ap_const_logic_1;
    } else {
        mac_vec_read = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_compute::thread_mul_ln95_fu_262_p0() {
    mul_ln95_fu_262_p0 = p_inbuff_V_q0.read();
}

void mac_vivado_dma32_w32_compute::thread_mul_ln95_fu_262_p1() {
    mul_ln95_fu_262_p1 = p_inbuff_V_q1.read();
}

void mac_vivado_dma32_w32_compute::thread_mul_ln95_fu_262_p2() {
    mul_ln95_fu_262_p2 = (!mul_ln95_fu_262_p0.read().is_01() || !mul_ln95_fu_262_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln95_fu_262_p0.read()) * sc_bigint<32>(mul_ln95_fu_262_p1.read());
}

void mac_vivado_dma32_w32_compute::thread_or_ln95_fu_245_p2() {
    or_ln95_fu_245_p2 = (i1_0_i_reg_162.read() | ap_const_lv13_1);
}

void mac_vivado_dma32_w32_compute::thread_p_inbuff_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        p_inbuff_V_address0 =  (sc_lv<13>) (zext_ln95_fu_240_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        p_inbuff_V_address0 =  (sc_lv<13>) (sext_ln76_fu_201_p1.read());
    } else {
        p_inbuff_V_address0 = "XXXXXXXXXXXXX";
    }
}

void mac_vivado_dma32_w32_compute::thread_p_inbuff_V_address1() {
    p_inbuff_V_address1 =  (sc_lv<13>) (zext_ln95_1_fu_251_p1.read());
}

void mac_vivado_dma32_w32_compute::thread_p_inbuff_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        p_inbuff_V_ce0 = ap_const_logic_1;
    } else {
        p_inbuff_V_ce0 = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_compute::thread_p_inbuff_V_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        p_inbuff_V_ce1 = ap_const_logic_1;
    } else {
        p_inbuff_V_ce1 = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_compute::thread_p_outbuff_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_outbuff_V_address0 =  (sc_lv<7>) (zext_ln101_fu_304_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_outbuff_V_address0 =  (sc_lv<7>) (sext_ln76_reg_345.read());
    } else {
        p_outbuff_V_address0 =  (sc_lv<7>) ("XXXXXXX");
    }
}

void mac_vivado_dma32_w32_compute::thread_p_outbuff_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_outbuff_V_ce0 = ap_const_logic_1;
    } else {
        p_outbuff_V_ce0 = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_compute::thread_p_outbuff_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_outbuff_V_d0 = acc_fu_274_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_outbuff_V_d0 = p_inbuff_V_q0.read();
    } else {
        p_outbuff_V_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mac_vivado_dma32_w32_compute::thread_p_outbuff_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln100_fu_286_p2.read())))) {
        p_outbuff_V_we0 = ap_const_logic_1;
    } else {
        p_outbuff_V_we0 = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_compute::thread_sext_ln76_fu_201_p1() {
    sext_ln76_fu_201_p1 = esl_sext<64,32>(i_0_i_reg_141.read());
}

void mac_vivado_dma32_w32_compute::thread_trunc_ln86_fu_223_p1() {
    trunc_ln86_fu_223_p1 = in_rem_0_i_reg_152.read().range(13-1, 0);
}

void mac_vivado_dma32_w32_compute::thread_vector_index_fu_280_p2() {
    vector_index_fu_280_p2 = (!vector_index_1_fu_54.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<32>(): (sc_biguint<32>(vector_index_1_fu_54.read()) + sc_biguint<32>(ap_const_lv32_2));
}

void mac_vivado_dma32_w32_compute::thread_vector_number_fu_309_p2() {
    vector_number_fu_309_p2 = (!vector_number_1_fu_50.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(vector_number_1_fu_50.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void mac_vivado_dma32_w32_compute::thread_zext_ln101_fu_304_p1() {
    zext_ln101_fu_304_p1 = esl_zext<64,32>(vector_number_1_fu_50.read());
}

void mac_vivado_dma32_w32_compute::thread_zext_ln95_1_fu_251_p1() {
    zext_ln95_1_fu_251_p1 = esl_zext<64,13>(or_ln95_fu_245_p2.read());
}

void mac_vivado_dma32_w32_compute::thread_zext_ln95_fu_240_p1() {
    zext_ln95_fu_240_p1 = esl_zext<64,13>(i1_0_i_reg_162.read());
}

void mac_vivado_dma32_w32_compute::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_vec_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, mac_len_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln75_fu_190_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln86_fu_211_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln92_fu_235_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

