// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mac_vivado_dma32_w32_top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<32> mac_vivado_dma32_w32_top::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic mac_vivado_dma32_w32_top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<96> mac_vivado_dma32_w32_top::ap_const_lv96_0 = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_logic mac_vivado_dma32_w32_top::ap_const_logic_1 = sc_dt::Log_1;
const bool mac_vivado_dma32_w32_top::ap_const_boolean_1 = true;
const sc_lv<32> mac_vivado_dma32_w32_top::ap_const_lv32_1 = "1";

mac_vivado_dma32_w32_top::mac_vivado_dma32_w32_top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dataflow_in_loop_bat_U0 = new mac_vivado_dma32_w32_dataflow_in_loop_bat("dataflow_in_loop_bat_U0");
    dataflow_in_loop_bat_U0->ap_clk(ap_clk);
    dataflow_in_loop_bat_U0->ap_rst(ap_rst);
    dataflow_in_loop_bat_U0->in1_word_V_dout(in1_word_V_dout);
    dataflow_in_loop_bat_U0->in1_word_V_empty_n(in1_word_V_empty_n);
    dataflow_in_loop_bat_U0->in1_word_V_read(dataflow_in_loop_bat_U0_in1_word_V_read);
    dataflow_in_loop_bat_U0->conf_info_mac_vec(conf_info_mac_vec);
    dataflow_in_loop_bat_U0->conf_info_mac_len(conf_info_mac_len);
    dataflow_in_loop_bat_U0->load_ctrl(dataflow_in_loop_bat_U0_load_ctrl);
    dataflow_in_loop_bat_U0->b_0(loop_dataflow_input_count);
    dataflow_in_loop_bat_U0->out_word_V_din(dataflow_in_loop_bat_U0_out_word_V_din);
    dataflow_in_loop_bat_U0->out_word_V_full_n(out_word_V_full_n);
    dataflow_in_loop_bat_U0->out_word_V_write(dataflow_in_loop_bat_U0_out_word_V_write);
    dataflow_in_loop_bat_U0->conf_info_mac_n(conf_info_mac_n);
    dataflow_in_loop_bat_U0->store_ctrl(dataflow_in_loop_bat_U0_store_ctrl);
    dataflow_in_loop_bat_U0->conf_info_mac_vec_ap_vld(ap_var_for_const0);
    dataflow_in_loop_bat_U0->conf_info_mac_len_ap_vld(ap_var_for_const0);
    dataflow_in_loop_bat_U0->load_ctrl_ap_vld(dataflow_in_loop_bat_U0_load_ctrl_ap_vld);
    dataflow_in_loop_bat_U0->load_ctrl_ap_ack(load_ctrl_ap_ack);
    dataflow_in_loop_bat_U0->b_0_ap_vld(ap_var_for_const1);
    dataflow_in_loop_bat_U0->conf_info_mac_n_ap_vld(ap_var_for_const0);
    dataflow_in_loop_bat_U0->ap_start(dataflow_in_loop_bat_U0_ap_start);
    dataflow_in_loop_bat_U0->ap_done(dataflow_in_loop_bat_U0_ap_done);
    dataflow_in_loop_bat_U0->store_ctrl_ap_vld(dataflow_in_loop_bat_U0_store_ctrl_ap_vld);
    dataflow_in_loop_bat_U0->store_ctrl_ap_ack(store_ctrl_ap_ack);
    dataflow_in_loop_bat_U0->ap_ready(dataflow_in_loop_bat_U0_ap_ready);
    dataflow_in_loop_bat_U0->ap_idle(dataflow_in_loop_bat_U0_ap_idle);
    dataflow_in_loop_bat_U0->ap_continue(dataflow_in_loop_bat_U0_ap_continue);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( dataflow_in_loop_bat_U0_ap_done );
    sensitive << ( loop_dataflow_output_count );
    sensitive << ( bound_minus_1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( dataflow_in_loop_bat_U0_ap_idle );
    sensitive << ( ap_start );
    sensitive << ( loop_dataflow_output_count );

    SC_METHOD(thread_ap_ready);
    sensitive << ( dataflow_in_loop_bat_U0_ap_ready );
    sensitive << ( ap_start );
    sensitive << ( loop_dataflow_input_count );
    sensitive << ( bound_minus_1 );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( dataflow_in_loop_bat_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( dataflow_in_loop_bat_U0_ap_ready );

    SC_METHOD(thread_bound_minus_1);
    sensitive << ( conf_info_mac_n );

    SC_METHOD(thread_dataflow_in_loop_bat_U0_ap_continue);

    SC_METHOD(thread_dataflow_in_loop_bat_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_dataflow_in_loop_bat_U0_start_full_n);

    SC_METHOD(thread_dataflow_in_loop_bat_U0_start_write);

    SC_METHOD(thread_in1_word_V_read);
    sensitive << ( dataflow_in_loop_bat_U0_in1_word_V_read );

    SC_METHOD(thread_load_ctrl);
    sensitive << ( dataflow_in_loop_bat_U0_load_ctrl );

    SC_METHOD(thread_load_ctrl_ap_vld);
    sensitive << ( dataflow_in_loop_bat_U0_load_ctrl_ap_vld );

    SC_METHOD(thread_out_word_V_din);
    sensitive << ( dataflow_in_loop_bat_U0_out_word_V_din );

    SC_METHOD(thread_out_word_V_write);
    sensitive << ( dataflow_in_loop_bat_U0_out_word_V_write );

    SC_METHOD(thread_store_ctrl);
    sensitive << ( dataflow_in_loop_bat_U0_store_ctrl );

    SC_METHOD(thread_store_ctrl_ap_vld);
    sensitive << ( dataflow_in_loop_bat_U0_store_ctrl_ap_vld );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    loop_dataflow_input_count = "00000000000000000000000000000000";
    loop_dataflow_output_count = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mac_vivado_dma32_w32_top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, out_word_V_din, "(port)out_word_V_din");
    sc_trace(mVcdFile, out_word_V_full_n, "(port)out_word_V_full_n");
    sc_trace(mVcdFile, out_word_V_write, "(port)out_word_V_write");
    sc_trace(mVcdFile, in1_word_V_dout, "(port)in1_word_V_dout");
    sc_trace(mVcdFile, in1_word_V_empty_n, "(port)in1_word_V_empty_n");
    sc_trace(mVcdFile, in1_word_V_read, "(port)in1_word_V_read");
    sc_trace(mVcdFile, conf_info_mac_n, "(port)conf_info_mac_n");
    sc_trace(mVcdFile, conf_info_mac_vec, "(port)conf_info_mac_vec");
    sc_trace(mVcdFile, conf_info_mac_len, "(port)conf_info_mac_len");
    sc_trace(mVcdFile, load_ctrl, "(port)load_ctrl");
    sc_trace(mVcdFile, store_ctrl, "(port)store_ctrl");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, load_ctrl_ap_vld, "(port)load_ctrl_ap_vld");
    sc_trace(mVcdFile, load_ctrl_ap_ack, "(port)load_ctrl_ap_ack");
    sc_trace(mVcdFile, store_ctrl_ap_vld, "(port)store_ctrl_ap_vld");
    sc_trace(mVcdFile, store_ctrl_ap_ack, "(port)store_ctrl_ap_ack");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_in1_word_V_read, "dataflow_in_loop_bat_U0_in1_word_V_read");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_load_ctrl, "dataflow_in_loop_bat_U0_load_ctrl");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_out_word_V_din, "dataflow_in_loop_bat_U0_out_word_V_din");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_out_word_V_write, "dataflow_in_loop_bat_U0_out_word_V_write");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_store_ctrl, "dataflow_in_loop_bat_U0_store_ctrl");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_load_ctrl_ap_vld, "dataflow_in_loop_bat_U0_load_ctrl_ap_vld");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_ap_start, "dataflow_in_loop_bat_U0_ap_start");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_ap_done, "dataflow_in_loop_bat_U0_ap_done");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_store_ctrl_ap_vld, "dataflow_in_loop_bat_U0_store_ctrl_ap_vld");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_ap_ready, "dataflow_in_loop_bat_U0_ap_ready");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_ap_idle, "dataflow_in_loop_bat_U0_ap_idle");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_ap_continue, "dataflow_in_loop_bat_U0_ap_continue");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, loop_dataflow_input_count, "loop_dataflow_input_count");
    sc_trace(mVcdFile, loop_dataflow_output_count, "loop_dataflow_output_count");
    sc_trace(mVcdFile, bound_minus_1, "bound_minus_1");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_start_full_n, "dataflow_in_loop_bat_U0_start_full_n");
    sc_trace(mVcdFile, dataflow_in_loop_bat_U0_start_write, "dataflow_in_loop_bat_U0_start_write");
#endif

    }
    mHdltvinHandle.open("mac_vivado_dma32_w32_top.hdltvin.dat");
    mHdltvoutHandle.open("mac_vivado_dma32_w32_top.hdltvout.dat");
}

mac_vivado_dma32_w32_top::~mac_vivado_dma32_w32_top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete dataflow_in_loop_bat_U0;
}

void mac_vivado_dma32_w32_top::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void mac_vivado_dma32_w32_top::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mac_vivado_dma32_w32_top::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        loop_dataflow_input_count = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(dataflow_in_loop_bat_U0_ap_ready.read(), ap_const_logic_1) && 
             !esl_seteq<1,32,32>(loop_dataflow_input_count.read(), bound_minus_1.read()))) {
            loop_dataflow_input_count = (!loop_dataflow_input_count.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(loop_dataflow_input_count.read()) + sc_biguint<32>(ap_const_lv32_1));
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                    esl_seteq<1,1,1>(dataflow_in_loop_bat_U0_ap_ready.read(), ap_const_logic_1) && 
                    esl_seteq<1,32,32>(loop_dataflow_input_count.read(), bound_minus_1.read()))) {
            loop_dataflow_input_count = ap_const_lv32_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        loop_dataflow_output_count = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(dataflow_in_loop_bat_U0_ap_done.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(dataflow_in_loop_bat_U0_ap_continue.read(), ap_const_logic_1) && 
             !esl_seteq<1,32,32>(loop_dataflow_output_count.read(), bound_minus_1.read()))) {
            loop_dataflow_output_count = (!loop_dataflow_output_count.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(loop_dataflow_output_count.read()) + sc_biguint<32>(ap_const_lv32_1));
        } else if ((esl_seteq<1,1,1>(dataflow_in_loop_bat_U0_ap_done.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(dataflow_in_loop_bat_U0_ap_continue.read(), ap_const_logic_1) && 
                    esl_seteq<1,32,32>(loop_dataflow_output_count.read(), bound_minus_1.read()))) {
            loop_dataflow_output_count = ap_const_lv32_0;
        }
    }
}

void mac_vivado_dma32_w32_top::thread_ap_done() {
    if ((esl_seteq<1,1,1>(dataflow_in_loop_bat_U0_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,32,32>(loop_dataflow_output_count.read(), bound_minus_1.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_top::thread_ap_idle() {
    if ((esl_seteq<1,32,32>(ap_const_lv32_0, loop_dataflow_output_count.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(dataflow_in_loop_bat_U0_ap_idle.read(), ap_const_logic_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_top::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(dataflow_in_loop_bat_U0_ap_ready.read(), ap_const_logic_1) && 
         esl_seteq<1,32,32>(loop_dataflow_input_count.read(), bound_minus_1.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_top::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void mac_vivado_dma32_w32_top::thread_ap_sync_done() {
    ap_sync_done = dataflow_in_loop_bat_U0_ap_done.read();
}

void mac_vivado_dma32_w32_top::thread_ap_sync_ready() {
    ap_sync_ready = dataflow_in_loop_bat_U0_ap_ready.read();
}

void mac_vivado_dma32_w32_top::thread_bound_minus_1() {
    bound_minus_1 = (!conf_info_mac_n.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(conf_info_mac_n.read()) - sc_biguint<32>(ap_const_lv32_1));
}

void mac_vivado_dma32_w32_top::thread_dataflow_in_loop_bat_U0_ap_continue() {
    if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        dataflow_in_loop_bat_U0_ap_continue = ap_const_logic_1;
    } else {
        dataflow_in_loop_bat_U0_ap_continue = ap_const_logic_0;
    }
}

void mac_vivado_dma32_w32_top::thread_dataflow_in_loop_bat_U0_ap_start() {
    dataflow_in_loop_bat_U0_ap_start = ap_start.read();
}

void mac_vivado_dma32_w32_top::thread_dataflow_in_loop_bat_U0_start_full_n() {
    dataflow_in_loop_bat_U0_start_full_n = ap_const_logic_1;
}

void mac_vivado_dma32_w32_top::thread_dataflow_in_loop_bat_U0_start_write() {
    dataflow_in_loop_bat_U0_start_write = ap_const_logic_0;
}

void mac_vivado_dma32_w32_top::thread_in1_word_V_read() {
    in1_word_V_read = dataflow_in_loop_bat_U0_in1_word_V_read.read();
}

void mac_vivado_dma32_w32_top::thread_load_ctrl() {
    load_ctrl = dataflow_in_loop_bat_U0_load_ctrl.read();
}

void mac_vivado_dma32_w32_top::thread_load_ctrl_ap_vld() {
    load_ctrl_ap_vld = dataflow_in_loop_bat_U0_load_ctrl_ap_vld.read();
}

void mac_vivado_dma32_w32_top::thread_out_word_V_din() {
    out_word_V_din = dataflow_in_loop_bat_U0_out_word_V_din.read();
}

void mac_vivado_dma32_w32_top::thread_out_word_V_write() {
    out_word_V_write = dataflow_in_loop_bat_U0_out_word_V_write.read();
}

void mac_vivado_dma32_w32_top::thread_store_ctrl() {
    store_ctrl = dataflow_in_loop_bat_U0_store_ctrl.read();
}

void mac_vivado_dma32_w32_top::thread_store_ctrl_ap_vld() {
    store_ctrl_ap_vld = dataflow_in_loop_bat_U0_store_ctrl_ap_vld.read();
}

void mac_vivado_dma32_w32_top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvoutHandle << mComma << "{"  <<  " \"out_word_V_din\" :  \"" << out_word_V_din.read() << "\" ";
        mHdltvinHandle << mComma << "{"  <<  " \"out_word_V_full_n\" :  \"" << out_word_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_word_V_write\" :  \"" << out_word_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_word_V_dout\" :  \"" << in1_word_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_word_V_empty_n\" :  \"" << in1_word_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in1_word_V_read\" :  \"" << in1_word_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"conf_info_mac_n\" :  \"" << conf_info_mac_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"conf_info_mac_vec\" :  \"" << conf_info_mac_vec.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"conf_info_mac_len\" :  \"" << conf_info_mac_len.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"load_ctrl\" :  \"" << load_ctrl.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"store_ctrl\" :  \"" << store_ctrl.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"load_ctrl_ap_vld\" :  \"" << load_ctrl_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"load_ctrl_ap_ack\" :  \"" << load_ctrl_ap_ack.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"store_ctrl_ap_vld\" :  \"" << store_ctrl_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"store_ctrl_ap_ack\" :  \"" << store_ctrl_ap_ack.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

