
///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2017 Cadence Design Systems, Inc. All rights reserved worldwide.
//
// The code contained herein is the proprietary and confidential information 
// of Cadence or its licensors, and is supplied subject to a previously 
// executed license and maintenance agreement between Cadence and customer. 
// This code is intended for use with Cadence high-level synthesis tools and 
// may not be used with other high-level synthesis tools. Permission is only 
// granted to distribute the code as indicated. Cadence grants permission for 
// customer to distribute a copy of this code to any partner to aid in designing 
// or verifying the customer's intellectual property, as long as such 
// distribution includes a restriction of no additional distributions from the 
// partner, unless the partner receives permission directly from Cadence.
//
// ALL CODE FURNISHED BY CADENCE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
// KIND, AND CADENCE SPECIFICALLY DISCLAIMS ANY WARRANTY OF NONINFRINGEMENT, 
// FITNESS FOR A PARTICULAR PURPOSE OR MERCHANTABILITY. CADENCE SHALL NOT BE 
// LIABLE FOR ANY COSTS OF PROCUREMENT OF SUBSTITUTES, LOSS OF PROFITS, 
// INTERRUPTION OF BUSINESS, OR FOR ANY OTHER SPECIAL, CONSEQUENTIAL OR 
// INCIDENTAL DAMAGES, HOWEVER CAUSED, WHETHER FOR BREACH OF WARRANTY, 
// CONTRACT, TORT, NEGLIGENCE, STRICT LIABILITY OR OTHERWISE.
//
////////////////////////////////////////////////////////////////////////////////


// Generated by bdw_memgen 19.22-s100
// Sun Mar 28 16:19:17 CDT 2021

#if ! defined mac_plm_block_out_dma32_CC
#define mac_plm_block_out_dma32_CC 1
#if defined STRATUS  &&  ! defined CYN_DONT_SUPPRESS_MSGS
#pragma cyn_suppress_msgs NOTE
#endif	// STRATUS  &&  CYN_DONT_SUPPRESS_MSGS
#include "mac_plm_block_out_dma32.h"
 
#ifdef STRATUS_HLS
   sc_uint<32> mac_plm_block_out_dma32::write0(sc_uint<7> A0, sc_uint<32> D0, bool WE0, bool CE0, sc_uint<32> WEM0) {

      CYN_BIND(WE0,this->WE0);
      CYN_BIND(A0,this->A0);
      CYN_BIND(D0,this->D0);
      CYN_BIND(CE0,this->CE0);
      CYN_BIND(WEM0,this->WEM0);
      HLS_CONFIG_INSTRUCTION( "access_port", 1 );
      mem[A0] = CYN_MASKED_READ( mem[A0], D0, WEM0 );
      return D0;
   }

#endif	// STRATUS_HLS
#ifdef STRATUS_HLS
   void mac_plm_block_out_dma32::nop0(bool WE0, bool CE0, sc_uint<32> WEM0) {
      CYN_BIND(WE0,this->WE0);
      CYN_BIND(CE0,this->CE0);
      CYN_BIND(WEM0,this->WEM0);
      HLS_CONFIG_INSTRUCTION( "access_port", 1 );
   }

#endif	// STRATUS_HLS
#ifdef STRATUS_HLS
   sc_uint<32> mac_plm_block_out_dma32::read1(sc_uint<7> A1, bool CE1) {
      sc_uint<32> Q1;
      CYN_BIND(A1,this->A1);
      CYN_BIND(Q1,this->Q1);
      CYN_BIND(CE1,this->CE1);
      HLS_CONFIG_INSTRUCTION( "access_port", 2 );
      Q1 = mem[A1];
      return Q1;
   }

#endif	// STRATUS_HLS
#ifdef STRATUS_HLS
   void mac_plm_block_out_dma32::nop1(bool CE1) {
      CYN_BIND(CE1,this->CE1);
      HLS_CONFIG_INSTRUCTION( "access_port", 2 );
   }

#endif	// STRATUS_HLS
   void mac_plm_block_out_dma32::thread0() {
#if defined(__GNUC__) && BDW_USE_SCV
    if ( m_p1_tx_0.is_active() ) {
        m_p1_tx_stream->end_write_tx( m_p1_tx_0 );
    }
#endif
    if (CE0 == 1) {
#if defined(__GNUC__)
      // Perform an address range check to prevent crashes on out of bounds
      // accesses in SystemC behavioral simulations.
      if((int)(A0.read()) <= 99) {
#endif
        if(WE0.read() == 1) {

#if defined(__GNUC__) && defined(BDW_DEBUG_MEMS)
          if (   (sc_time_stamp().to_double() == m_last_read_time) 
		      && (sc_time_stamp().to_double() > 0.0) 
			  && (m_last_read_addr == A0.read().to_uint64())) {
            fprintf(stderr,"WARNING: %s: %s: Both a read and a write were performed at address %d\n", name(), sc_time_stamp().to_string().c_str(), (int)A0.read());
          }
          m_last_write_time = sc_time_stamp().to_double();
          m_last_write_addr = A0.read().to_uint64();
          m_num_errors++;
#if defined(__GNUC__) && (BDW_DEBUG_MEMS > 1)
          if (m_num_errors > BDW_DEBUG_MEMS) {
            fprintf(stderr,"Stopping simulation because more than %d errors have occurred\n", BDW_DEBUG_MEMS );
		    sc_stop();
          }
#endif
#endif
           if ( WEM0.read()[0] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".0", sc_time_stamp().to_string().c_str(), D0.read().range(0,0).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(0,0) = D0.read().range(0,0);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[1] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".1", sc_time_stamp().to_string().c_str(), D0.read().range(1,1).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(1,1) = D0.read().range(1,1);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[2] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".2", sc_time_stamp().to_string().c_str(), D0.read().range(2,2).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(2,2) = D0.read().range(2,2);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[3] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".3", sc_time_stamp().to_string().c_str(), D0.read().range(3,3).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(3,3) = D0.read().range(3,3);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[4] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".4", sc_time_stamp().to_string().c_str(), D0.read().range(4,4).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(4,4) = D0.read().range(4,4);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[5] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".5", sc_time_stamp().to_string().c_str(), D0.read().range(5,5).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(5,5) = D0.read().range(5,5);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[6] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".6", sc_time_stamp().to_string().c_str(), D0.read().range(6,6).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(6,6) = D0.read().range(6,6);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[7] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".7", sc_time_stamp().to_string().c_str(), D0.read().range(7,7).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(7,7) = D0.read().range(7,7);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[8] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".8", sc_time_stamp().to_string().c_str(), D0.read().range(8,8).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(8,8) = D0.read().range(8,8);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[9] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".9", sc_time_stamp().to_string().c_str(), D0.read().range(9,9).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(9,9) = D0.read().range(9,9);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[10] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".10", sc_time_stamp().to_string().c_str(), D0.read().range(10,10).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(10,10) = D0.read().range(10,10);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[11] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".11", sc_time_stamp().to_string().c_str(), D0.read().range(11,11).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(11,11) = D0.read().range(11,11);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[12] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".12", sc_time_stamp().to_string().c_str(), D0.read().range(12,12).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(12,12) = D0.read().range(12,12);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[13] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".13", sc_time_stamp().to_string().c_str(), D0.read().range(13,13).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(13,13) = D0.read().range(13,13);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[14] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".14", sc_time_stamp().to_string().c_str(), D0.read().range(14,14).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(14,14) = D0.read().range(14,14);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[15] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".15", sc_time_stamp().to_string().c_str(), D0.read().range(15,15).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(15,15) = D0.read().range(15,15);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[16] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".16", sc_time_stamp().to_string().c_str(), D0.read().range(16,16).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(16,16) = D0.read().range(16,16);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[17] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".17", sc_time_stamp().to_string().c_str(), D0.read().range(17,17).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(17,17) = D0.read().range(17,17);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[18] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".18", sc_time_stamp().to_string().c_str(), D0.read().range(18,18).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(18,18) = D0.read().range(18,18);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[19] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".19", sc_time_stamp().to_string().c_str(), D0.read().range(19,19).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(19,19) = D0.read().range(19,19);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[20] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".20", sc_time_stamp().to_string().c_str(), D0.read().range(20,20).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(20,20) = D0.read().range(20,20);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[21] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".21", sc_time_stamp().to_string().c_str(), D0.read().range(21,21).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(21,21) = D0.read().range(21,21);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[22] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".22", sc_time_stamp().to_string().c_str(), D0.read().range(22,22).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(22,22) = D0.read().range(22,22);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[23] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".23", sc_time_stamp().to_string().c_str(), D0.read().range(23,23).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(23,23) = D0.read().range(23,23);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[24] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".24", sc_time_stamp().to_string().c_str(), D0.read().range(24,24).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(24,24) = D0.read().range(24,24);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[25] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".25", sc_time_stamp().to_string().c_str(), D0.read().range(25,25).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(25,25) = D0.read().range(25,25);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[26] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".26", sc_time_stamp().to_string().c_str(), D0.read().range(26,26).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(26,26) = D0.read().range(26,26);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[27] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".27", sc_time_stamp().to_string().c_str(), D0.read().range(27,27).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(27,27) = D0.read().range(27,27);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[28] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".28", sc_time_stamp().to_string().c_str(), D0.read().range(28,28).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(28,28) = D0.read().range(28,28);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[29] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".29", sc_time_stamp().to_string().c_str(), D0.read().range(29,29).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(29,29) = D0.read().range(29,29);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[30] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".30", sc_time_stamp().to_string().c_str(), D0.read().range(30,30).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(30,30) = D0.read().range(30,30);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
           if ( WEM0.read()[31] == 1 ) {

#if defined(__GNUC__) && BDW_USE_SCV
            m_p1_tx_0 = m_p1_tx_stream->begin_write_tx( A0.read(), D0.read() );
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), ".31", sc_time_stamp().to_string().c_str(), D0.read().range(31,31).to_string(SC_HEX).c_str(), (int)A0.read().to_uint());
#endif
        mem[A0.read().to_uint()].range(31,31) = D0.read().range(31,31);
#if defined(__GNUC__)
            sync_put(A0.read().to_uint());
#endif
           }
        }

#if defined(__GNUC__)
      }
#endif
    }
  }
   void mac_plm_block_out_dma32::thread1() {
#if defined(__GNUC__) && BDW_USE_SCV
    if ( m_p2_tx_0.is_active() ) {
        m_p2_tx_stream->end_tx( m_p2_tx_0, Q1.read() );
    }
#endif
    if (CE1 == 1) {
#if defined(__GNUC__)
      // Perform an address range check to prevent crashes on out of bounds
      // accesses in SystemC behavioral simulations.
      if((int)(A1.read()) <= 99) {
#endif

#if defined(__GNUC__) && defined(BDW_DEBUG_MEMS)
          if (   (sc_time_stamp().to_double() == m_last_write_time) 
		      && (sc_time_stamp().to_double() > 0.0) 
			  && (m_last_write_addr == A1.read().to_uint64())) {
            fprintf(stderr,"WARNING: %s: %s: Both a read and a write were performed at address %d\n", name(), sc_time_stamp().to_string().c_str(), (int)A1.read());
          }
          m_last_read_time = sc_time_stamp().to_double();
          m_last_read_addr = A1.read().to_uint64();
          m_num_errors++;
#if defined(__GNUC__) && (BDW_DEBUG_MEMS > 1)
          if (m_num_errors > BDW_DEBUG_MEMS) {
            fprintf(stderr,"Stopping simulation because more than %d errors have occurred\n", BDW_DEBUG_MEMS );
		    sc_stop();
          }
#endif
#endif

#if defined(__GNUC__) 
#if BDW_USE_SCV
            m_p2_tx_0 = m_p2_tx_stream->begin_read_tx( A1.read() );
#endif
            sync_get(A1.read().to_uint());
#endif

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s: %s: read 0x%s from 0x%x\n", name(), sc_time_stamp().to_string().c_str(), mem[A1.read().to_uint()].to_string(SC_HEX).c_str(), (int)A1.read().to_uint());
#endif
        Q1 = mem[A1.read().to_uint()];
#if defined(__GNUC__)
      }
#endif
    } else {
          Q1 = 0;
    }
  }
#if defined(STRATUS_VLG)
   mac_plm_block_out_dma32::mac_plm_block_out_dma32(const sc_module_name name)
      : sc_module( name ) ,CLK("CLK"),WE0("WE0"),CE0("CE0"),D0("D0"),A0("A0"),WEM0("WEM0"),CE1("CE1"),Q1("Q1"),A1("A1"), mem()
#else
   mac_plm_block_out_dma32::mac_plm_block_out_dma32( sc_module_name name)
      : sc_module( name ) ,CLK("CLK"),WE0("WE0"),CE0("CE0"),D0("D0"),A0("A0"),WEM0("WEM0"),CE1("CE1"),Q1("Q1"),A1("A1"), mem() 
#if defined(__GNUC__) 
#if defined(BDW_DEBUG_MEMS)
		, m_last_read_time(-1), m_last_write_time(-1), m_last_read_addr(0), m_last_write_addr(0), m_num_errors(0)
#endif
		, m_iface(0)
#endif
#endif
   {
#ifdef STRATUS_HLS
      SC_CTHREAD( thread0, (CLK).pos() );
#else
      SC_METHOD( thread0 );
      sensitive << (CLK).pos();

#endif
#ifdef STRATUS_HLS
      SC_CTHREAD( thread1, (CLK).pos() );
#else
      SC_METHOD( thread1 );
      sensitive << (CLK).pos();

#endif
#ifndef STRATUS_HLS
      dont_initialize();
#endif
 
   }

const unsigned long mac_plm_block_out_dma32::implemented = 1;
const unsigned long mac_plm_block_out_dma32::pipelined = 0;
const float mac_plm_block_out_dma32::area = 1.0;
const float mac_plm_block_out_dma32::delay = 0.2;
const float mac_plm_block_out_dma32::setup_time = 0.06;
const unsigned long mac_plm_block_out_dma32::latency_WE0 = 1;
const unsigned long mac_plm_block_out_dma32::latency_WEM0 = 1;
const unsigned long mac_plm_block_out_dma32::latency_CE0 = 1;
const unsigned long mac_plm_block_out_dma32::latency_D0 = 1;
const unsigned long mac_plm_block_out_dma32::latency_A0 = 1;
const unsigned long mac_plm_block_out_dma32::bits_per_maskbit_WEM0 = 1;
const unsigned long mac_plm_block_out_dma32::latency_CE1 = 1;
const unsigned long mac_plm_block_out_dma32::latency_A1 = 1;
const unsigned long mac_plm_block_out_dma32::bits_per_maskbit_WM1 = 0;
const unsigned long mac_plm_block_out_dma32::reg_mem_inputs = 0;
const unsigned long mac_plm_block_out_dma32::reg_mem_outputs = 0;
const unsigned long mac_plm_block_out_dma32::regs_at_mem_inputs = 0;
const unsigned long mac_plm_block_out_dma32::regs_at_mem_outputs = 0;
const unsigned long mac_plm_block_out_dma32::no_spec_reads = 1;
const unsigned long mac_plm_block_out_dma32::is_mem = 1;
const unsigned long mac_plm_block_out_dma32::clock_multiplier = 0;
const bool mac_plm_block_out_dma32::has_extra_ports = false;
const bool mac_plm_block_out_dma32::is_prototype = false;
const char* mac_plm_block_out_dma32::naming_convention = 0;
 
#endif // mac_plm_block_out_dma32_CC

