
///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2017 Cadence Design Systems, Inc. All rights reserved worldwide.
//
// The code contained herein is the proprietary and confidential information 
// of Cadence or its licensors, and is supplied subject to a previously 
// executed license and maintenance agreement between Cadence and customer. 
// This code is intended for use with Cadence high-level synthesis tools and 
// may not be used with other high-level synthesis tools. Permission is only 
// granted to distribute the code as indicated. Cadence grants permission for 
// customer to distribute a copy of this code to any partner to aid in designing 
// or verifying the customer's intellectual property, as long as such 
// distribution includes a restriction of no additional distributions from the 
// partner, unless the partner receives permission directly from Cadence.
//
// ALL CODE FURNISHED BY CADENCE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
// KIND, AND CADENCE SPECIFICALLY DISCLAIMS ANY WARRANTY OF NONINFRINGEMENT, 
// FITNESS FOR A PARTICULAR PURPOSE OR MERCHANTABILITY. CADENCE SHALL NOT BE 
// LIABLE FOR ANY COSTS OF PROCUREMENT OF SUBSTITUTES, LOSS OF PROFITS, 
// INTERRUPTION OF BUSINESS, OR FOR ANY OTHER SPECIAL, CONSEQUENTIAL OR 
// INCIDENTAL DAMAGES, HOWEVER CAUSED, WHETHER FOR BREACH OF WARRANTY, 
// CONTRACT, TORT, NEGLIGENCE, STRICT LIABILITY OR OTHERWISE.
//
////////////////////////////////////////////////////////////////////////////////


// Generated by bdw_memgen 19.22-s100
// Sun Mar 28 16:19:17 CDT 2021



#ifndef mac_plm_block_out_dma64_H
#define mac_plm_block_out_dma64_H

#include "systemc.h"
#include "stratus_hls.h"


#if !defined(STRATUS_VLG)
#include "cynw_comm_util.h"
#include "cynw_fifo.h"
#endif
#include "cynw_memory.h"
#if defined STRATUS  &&  ! defined CYN_DONT_SUPPRESS_MSGS
#pragma cyn_suppress_msgs NOTE
#pragma hls_ip_def NOTE
#endif	// STRATUS  &&  CYN_DONT_SUPPRESS_MSGS
#if !defined(STRATUS_VLG)
#endif


#if defined(STRATUS_VLG) || defined(STRATUS_HLS)
SC_MODULE(mac_plm_block_out_dma64)
#else
struct mac_plm_block_out_dma64
  : public sc_module,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
#endif
    {
	HLS_EXTERNAL_MODULE;

   sc_in< bool > CLK;
   sc_in< bool > WE0;
   sc_in< bool > CE0;
   sc_in< sc_uint<32> > D0;
   sc_in< sc_uint<7> > A0;
   sc_in< sc_uint<32> > WEM0;
   sc_in< bool > CE1;
   sc_out< sc_uint<32> > Q1;
   sc_in< sc_uint<7> > A1;
   sc_in< bool > CE2;
   sc_out< sc_uint<32> > Q2;
   sc_in< sc_uint<7> > A2;
   sc_uint<32> mem[100];
 
 

#if defined(__GNUC__) && defined(BDW_DEBUG_MEMS)
    double m_last_read_time;
    double m_last_write_time;
    uint64 m_last_read_addr;
    uint64 m_last_write_addr;
    int m_num_errors;
#endif

#if defined(__GNUC__) 
    cynw_memory_if< sc_uint<7>, sc_uint<32> >* m_iface;

    void set_iface( cynw_memory_if< sc_uint<7>, sc_uint<32> >* iface ) {
        m_iface = iface;
    }
    void sync_get( uint64 a ) {
       if ( m_iface ) {
           mem[ a ] = m_iface->get( a );
       }
    }
    void sync_put( uint64 a ) {
       if ( m_iface ) {
           m_iface->put( a, mem[ a ] );
       }
    }
#endif
#ifdef STRATUS_HLS
   sc_uint<32> write0(sc_uint<7> A0, sc_uint<32> D0, bool WE0=1, bool CE0=1, sc_uint<32> WEM0=~0);

#endif	// STRATUS_HLS
#ifdef STRATUS_HLS
   void nop0(bool WE0=0, bool CE0=0, sc_uint<32> WEM0=~0);

#endif	// STRATUS_HLS
#ifdef STRATUS_HLS
   sc_uint<32> read1(sc_uint<7> A1, bool CE1=1);

#endif	// STRATUS_HLS
#ifdef STRATUS_HLS
   void nop1(bool CE1=0);

#endif	// STRATUS_HLS
#ifdef STRATUS_HLS
   sc_uint<32> read2(sc_uint<7> A2, bool CE2=1);

#endif	// STRATUS_HLS
#ifdef STRATUS_HLS
   void nop2(bool CE2=0);

#endif	// STRATUS_HLS
 
   void thread0();

   void thread1();

   void thread2();

 
#if defined(STRATUS_VLG)
   SC_CTOR( mac_plm_block_out_dma64 );

#else
   SC_HAS_PROCESS( mac_plm_block_out_dma64 );

   mac_plm_block_out_dma64( sc_module_name name = sc_module_name(sc_gen_unique_name("mac_plm_block_out_dma64")));
#endif
   static const unsigned long implemented;
   static const unsigned long pipelined;
   static const float area;
   static const float delay;
   static const float setup_time;
   static const unsigned long latency_WE0;
   static const unsigned long latency_WEM0;
   static const unsigned long latency_CE0;
   static const unsigned long latency_D0;
   static const unsigned long latency_A0;
   static const unsigned long bits_per_maskbit_WEM0;
   static const unsigned long latency_CE1;
   static const unsigned long latency_A1;
   static const unsigned long bits_per_maskbit_WM1;
   static const unsigned long latency_CE2;
   static const unsigned long latency_A2;
   static const unsigned long bits_per_maskbit_WM2;
   static const unsigned long reg_mem_inputs;
   static const unsigned long reg_mem_outputs;
   static const unsigned long regs_at_mem_inputs;
   static const unsigned long regs_at_mem_outputs;
   static const unsigned long no_spec_reads;
   static const unsigned long is_mem;
   static const unsigned long clock_multiplier;
   static const bool has_extra_ports;
   static const bool is_prototype;
   static const char* naming_convention;


   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
   
    enum {
        pipeline_depth = 1,
        mem_size = 100,
        SIZE = 100,
        address_width = 7,
        data_width = 32
    };


#if !defined(STRATUS_VLG) && !defined(STRATUS_HLS)
   // 
   // cynw_memory_if
   //
   data_type get( const address_type& address )
   {

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s: %s: read 0x%s from 0x%x\n", name(), sc_time_stamp().to_string().c_str(), mem[address.to_uint()].to_string(SC_HEX).c_str(), (int)address.to_uint());
#endif
        return mem[address.to_uint()];
   }
   void put( const address_type& address, const data_type& data )
   {

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), "", sc_time_stamp().to_string().c_str(), data.to_string(SC_HEX).c_str(), (int)address.to_uint());
#endif
        mem[address.to_uint()] = data;
#if defined(__GNUC__)
            sync_put(address.to_uint());
#endif

}

#endif



    //
    // External memory classes.
    //

    template <typename HLS_L=CYN::PIN, typename HLS_ACCESS=sc_uint<32>, HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING = HLS::COMPACT > class port;
    template <typename HLS_L=CYN::PIN> class ex_port;

    template <typename HLS_L=CYN::PIN, typename HLS_ACCESS=sc_uint<32>, HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING = HLS::COMPACT > class port_1;
    template <typename HLS_L=CYN::PIN> class ex_port_1;
    template <typename HLS_L=CYN::PIN> class reg_ex_port_1;
    template <typename HLS_L=CYN::PIN, typename HLS_ACCESS=sc_uint<32>, HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING = HLS::COMPACT > class stall_port_1;
    template <typename HLS_L=CYN::PIN, typename HLS_ACCESS=sc_uint<32>, HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING = HLS::COMPACT > class reg_port_1;

    template <typename HLS_L=CYN::PIN, typename HLS_ACCESS=sc_uint<32>, HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING = HLS::COMPACT > class port_2;
    template <typename HLS_L=CYN::PIN> class ex_port_2;
    template <typename HLS_L=CYN::PIN> class reg_ex_port_2;
    template <typename HLS_L=CYN::PIN, typename HLS_ACCESS=sc_uint<32>, HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING = HLS::COMPACT > class stall_port_2;
    template <typename HLS_L=CYN::PIN, typename HLS_ACCESS=sc_uint<32>, HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING = HLS::COMPACT > class reg_port_2;

    template <typename HLS_L=CYN::PIN, typename HLS_ACCESS=sc_uint<32>, HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING = HLS::COMPACT > class port_3;
    template <typename HLS_L=CYN::PIN> class ex_port_3;
    template <typename HLS_L=CYN::PIN> class reg_ex_port_3;
    template <typename HLS_L=CYN::PIN, typename HLS_ACCESS=sc_uint<32>, HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING = HLS::COMPACT > class stall_port_3;
    template <typename HLS_L=CYN::PIN, typename HLS_ACCESS=sc_uint<32>, HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING = HLS::COMPACT > class reg_port_3;
    template <typename HLS_L=CYN::PIN> class shared_2;
    template <typename HLS_L=CYN::PIN> class shared_3;
    template <typename HLS_L=CYN::PIN> class shared_4;
    template <typename HLS_L=CYN::PIN> class shared_5;
    template <typename HLS_L=CYN::PIN> class shared_6;
    template <typename HLS_L=CYN::PIN> class shared_7;
    template <typename HLS_L=CYN::PIN> class shared_8;
    template <typename HLS_L=CYN::PIN> class shared_9;
    template <typename HLS_L=CYN::PIN> class shared_10;
    template <typename HLS_L=CYN::PIN> class shared_11;
    template <typename HLS_L=CYN::PIN> class shared_12;
    template <typename HLS_L=CYN::PIN> class shared_13;
    template <typename HLS_L=CYN::PIN> class shared_14;
    template <typename HLS_L=CYN::PIN> class shared_15;
    template <typename HLS_L=CYN::PIN> class shared_16;
    template <typename HLS_L=CYN::PIN> class shared_17;
    template <typename HLS_L=CYN::PIN> class shared_18;
    template <typename HLS_L=CYN::PIN> class shared_19;
    template <typename HLS_L=CYN::PIN> class shared_20;
    template <typename HLS_L=CYN::PIN> class shared_21;
    template <typename HLS_L=CYN::PIN> class shared_22;
    template <typename HLS_L=CYN::PIN> class shared_23;
    template <typename HLS_L=CYN::PIN> class shared_24;
    template <typename HLS_L=CYN::PIN> class shared_25;
    template <typename HLS_L=CYN::PIN> class shared_26;
    template <typename HLS_L=CYN::PIN> class shared_27;
    template <typename HLS_L=CYN::PIN> class shared_28;
    template <typename HLS_L=CYN::PIN> class shared_29;
    template <typename HLS_L=CYN::PIN> class shared_30;
    template <typename HLS_L=CYN::PIN> class shared_31;
    template <typename HLS_L=CYN::PIN> class shared_32;
    template <typename HLS_L=CYN::PIN> class wrapper;
    template <typename HLS_L=CYN::PIN> struct types;

};

// 
// struct containing signals to which a metaport for all interfaces can be bound.
// 
struct mac_plm_block_out_dma64_ext_signals_0
{
    mac_plm_block_out_dma64_ext_signals_0( const char* prefix=0 ) 
        :WE0(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"WE0")))
        ,CE0(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"CE0")))
        ,D0(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"D0")))
        ,WEM0(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"WEM0")))
        ,A0(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"A0")))
        ,CE1(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"CE1")))
        ,Q1(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"Q1")))
        ,A1(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"A1")))
        ,CE2(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"CE2")))
        ,Q2(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"Q2")))
        ,A2(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"A2")))
    {}
   HLS_SC_SIGNAL_DECL( bool, true ) WE0;
   HLS_SC_SIGNAL_DECL( bool, true ) CE0;
   HLS_SC_SIGNAL_DECL( sc_uint<32>, true ) D0;
   HLS_SC_SIGNAL_DECL( sc_uint<32>, true ) WEM0;
   HLS_SC_SIGNAL_DECL( sc_uint<7>, true ) A0;

   HLS_SC_SIGNAL_DECL( bool, true ) CE1;
   HLS_SC_SIGNAL_DECL( sc_uint<32>, true ) Q1;
   HLS_SC_SIGNAL_DECL( sc_uint<7>, true ) A1;

   HLS_SC_SIGNAL_DECL( bool, true ) CE2;
   HLS_SC_SIGNAL_DECL( sc_uint<32>, true ) Q2;
   HLS_SC_SIGNAL_DECL( sc_uint<7>, true ) A2;

};
// 
// struct containing signals to which a metaport can be bound
// for port #1
// 
struct mac_plm_block_out_dma64_ext_signals_1
{
    mac_plm_block_out_dma64_ext_signals_1( const char* prefix=0 ) 
        :WE0(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"WE0")))
        ,CE0(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"CE0")))
        ,D0(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"D0")))
        ,WEM0(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"WEM0")))
        ,A0(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"A0")))
    {}
   HLS_SC_SIGNAL_DECL( bool, true ) WE0;
   HLS_SC_SIGNAL_DECL( bool, true ) CE0;
   HLS_SC_SIGNAL_DECL( sc_uint<32>, true ) D0;
   HLS_SC_SIGNAL_DECL( sc_uint<32>, true ) WEM0;
   HLS_SC_SIGNAL_DECL( sc_uint<7>, true ) A0;

};
// 
// struct containing signals to which a metaport can be bound
// for port #2
// 
struct mac_plm_block_out_dma64_ext_signals_2
{
    mac_plm_block_out_dma64_ext_signals_2( const char* prefix=0 ) 
        :CE1(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"CE1")))
        ,Q1(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"Q1")))
        ,A1(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"A1")))
    {}
   HLS_SC_SIGNAL_DECL( bool, true ) CE1;
   HLS_SC_SIGNAL_DECL( sc_uint<32>, true ) Q1;
   HLS_SC_SIGNAL_DECL( sc_uint<7>, true ) A1;

};
// 
// struct containing signals to which a metaport can be bound
// for port #3
// 
struct mac_plm_block_out_dma64_ext_signals_3
{
    mac_plm_block_out_dma64_ext_signals_3( const char* prefix=0 ) 
        :CE2(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"CE2")))
        ,Q2(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"Q2")))
        ,A2(sc_gen_unique_name(HLS_CAT_NAMES(prefix,"A2")))
    {}
   HLS_SC_SIGNAL_DECL( bool, true ) CE2;
   HLS_SC_SIGNAL_DECL( sc_uint<32>, true ) Q2;
   HLS_SC_SIGNAL_DECL( sc_uint<7>, true ) A2;

};

//
// Type declarations
//
// The members of this struct can be accessed directly to 
// identify a type related to this memory model.  This same
// struct is also a base class for most other types related
// to the memory, and so its members can be referenced as 
// members of those memory-related classes.
//
// The template parameter HLS_L can have the following values:
//
//	 PIN : Selects types for pin-level implementations.
//   TLM : Selects types for TLM implementations.
//   
// Note that since the memory model class itself if not 
// templated, only the PIN-level classes can be accessed via
// the main memory model class.
//
template <typename HLS_L>
struct mac_plm_block_out_dma64::types
{  
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef sc_int<32>                       signed_type;
    typedef mac_plm_block_out_dma64                             mem_type;
    typedef cynw_memory_if< address_type, data_type >    if_type;
    typedef mac_plm_block_out_dma64::wrapper<HLS_L>                  wrapper;

    typedef mac_plm_block_out_dma64::port<HLS_L,data_type>              port;
    typedef mac_plm_block_out_dma64::ex_port<HLS_L>                     ex_port;
    typedef mac_plm_block_out_dma64::shared_2<HLS_L>                 shared_2;
    typedef mac_plm_block_out_dma64::shared_3<HLS_L>                 shared_3;
    typedef mac_plm_block_out_dma64::shared_4<HLS_L>                 shared_4;
    typedef mac_plm_block_out_dma64::shared_5<HLS_L>                 shared_5;
    typedef mac_plm_block_out_dma64::shared_6<HLS_L>                 shared_6;
    typedef mac_plm_block_out_dma64::shared_7<HLS_L>                 shared_7;
    typedef mac_plm_block_out_dma64::shared_8<HLS_L>                 shared_8;
    typedef mac_plm_block_out_dma64::shared_9<HLS_L>                 shared_9;
    typedef mac_plm_block_out_dma64::shared_10<HLS_L>                 shared_10;
    typedef mac_plm_block_out_dma64::shared_11<HLS_L>                 shared_11;
    typedef mac_plm_block_out_dma64::shared_12<HLS_L>                 shared_12;
    typedef mac_plm_block_out_dma64::shared_13<HLS_L>                 shared_13;
    typedef mac_plm_block_out_dma64::shared_14<HLS_L>                 shared_14;
    typedef mac_plm_block_out_dma64::shared_15<HLS_L>                 shared_15;
    typedef mac_plm_block_out_dma64::shared_16<HLS_L>                 shared_16;
    typedef mac_plm_block_out_dma64::shared_17<HLS_L>                 shared_17;
    typedef mac_plm_block_out_dma64::shared_18<HLS_L>                 shared_18;
    typedef mac_plm_block_out_dma64::shared_19<HLS_L>                 shared_19;
    typedef mac_plm_block_out_dma64::shared_20<HLS_L>                 shared_20;
    typedef mac_plm_block_out_dma64::shared_21<HLS_L>                 shared_21;
    typedef mac_plm_block_out_dma64::shared_22<HLS_L>                 shared_22;
    typedef mac_plm_block_out_dma64::shared_23<HLS_L>                 shared_23;
    typedef mac_plm_block_out_dma64::shared_24<HLS_L>                 shared_24;
    typedef mac_plm_block_out_dma64::shared_25<HLS_L>                 shared_25;
    typedef mac_plm_block_out_dma64::shared_26<HLS_L>                 shared_26;
    typedef mac_plm_block_out_dma64::shared_27<HLS_L>                 shared_27;
    typedef mac_plm_block_out_dma64::shared_28<HLS_L>                 shared_28;
    typedef mac_plm_block_out_dma64::shared_29<HLS_L>                 shared_29;
    typedef mac_plm_block_out_dma64::shared_30<HLS_L>                 shared_30;
    typedef mac_plm_block_out_dma64::shared_31<HLS_L>                 shared_31;
    typedef mac_plm_block_out_dma64::shared_32<HLS_L>                 shared_32;

    typedef mac_plm_block_out_dma64::port_1<HLS_L,data_type>           port_1;
    typedef mac_plm_block_out_dma64::ex_port_1<HLS_L>                  ex_port_1;
    typedef mac_plm_block_out_dma64::reg_ex_port_1<HLS_L>              reg_ex_port_1;
    typedef mac_plm_block_out_dma64::reg_port_1<HLS_L,data_type>       reg_port_1;
    typedef mac_plm_block_out_dma64::stall_port_1<HLS_L,data_type>     stall_port_1;

    typedef mac_plm_block_out_dma64::port_2<HLS_L,data_type>           port_2;
    typedef mac_plm_block_out_dma64::ex_port_2<HLS_L>                  ex_port_2;
    typedef mac_plm_block_out_dma64::reg_ex_port_2<HLS_L>              reg_ex_port_2;
    typedef mac_plm_block_out_dma64::reg_port_2<HLS_L,data_type>       reg_port_2;
    typedef mac_plm_block_out_dma64::stall_port_2<HLS_L,data_type>     stall_port_2;

    typedef mac_plm_block_out_dma64::port_3<HLS_L,data_type>           port_3;
    typedef mac_plm_block_out_dma64::ex_port_3<HLS_L>                  ex_port_3;
    typedef mac_plm_block_out_dma64::reg_ex_port_3<HLS_L>              reg_ex_port_3;
    typedef mac_plm_block_out_dma64::reg_port_3<HLS_L,data_type>       reg_port_3;
    typedef mac_plm_block_out_dma64::stall_port_3<HLS_L,data_type>     stall_port_3;
    typedef mac_plm_block_out_dma64_ext_signals_0             ext_signals_0;
    typedef mac_plm_block_out_dma64_ext_signals_1             ext_signals_1;
    typedef mac_plm_block_out_dma64_ext_signals_2             ext_signals_2;
    typedef mac_plm_block_out_dma64_ext_signals_3             ext_signals_3;

   
    enum {
        pipeline_depth = 1,
        mem_size = 100,
        SIZE = 100,
        address_width = 7,
        data_width = 32
    };

};


//
// Simple external memory wrapper.
//
// PIN-level version.
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
// 
//
template <typename HLS_L>
class mac_plm_block_out_dma64::wrapper :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{
  public:
    typedef mac_plm_block_out_dma64::wrapper<HLS_L>                 this_type;
  public:
    SC_HAS_PROCESS(wrapper);
    wrapper( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())  
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3")
    {

        model.WE0(if1.WE0);
        model.CE0(if1.CE0);
        model.D0(if1.D0);
        model.A0(if1.A0);
        model.WEM0(if1.WEM0);
        model.CE1(if2.CE1);
        model.A1(if2.A1);
        model.Q1(if2.Q1);
        model.CE2(if3.CE2);
        model.A2(if3.A2);
        model.Q2(if3.Q2);
        model.CLK(CLK);
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    mac_plm_block_out_dma64_ext_signals_1 if1;
    mac_plm_block_out_dma64_ext_signals_2 if2;
    mac_plm_block_out_dma64_ext_signals_3 if3;

    //
    // Ports.
    //
        sc_in_clk CLK;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64            model;
};



template <typename HLS_L>
class mac_plm_block_out_dma64::shared_2 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_2<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_2);
    shared_2( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else {
            intsigs.A1 = if2.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else {
            intsigs.A2 = if2.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_3 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_3<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_3);
    shared_3( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else {
            intsigs.A1 = if3.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else {
            intsigs.A2 = if3.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_4 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_4<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_4);
    shared_4( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else {
            intsigs.A1 = if4.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else {
            intsigs.A2 = if4.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_5 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_5<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_5);
    shared_5( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else {
            intsigs.A1 = if5.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else {
            intsigs.A2 = if5.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_6 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_6<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_6);
    shared_6( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else {
            intsigs.A1 = if6.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else {
            intsigs.A2 = if6.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_7 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_7<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_7);
    shared_7( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else {
            intsigs.A1 = if7.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else {
            intsigs.A2 = if7.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_8 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_8<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_8);
    shared_8( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else {
            intsigs.A1 = if8.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else {
            intsigs.A2 = if8.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_9 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_9<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_9);
    shared_9( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else {
            intsigs.A1 = if9.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else {
            intsigs.A2 = if9.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_10 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_10<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_10);
    shared_10( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else {
            intsigs.A1 = if10.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else {
            intsigs.A2 = if10.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_11 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_11<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_11);
    shared_11( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else {
            intsigs.A1 = if11.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else {
            intsigs.A2 = if11.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_12 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_12<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_12);
    shared_12( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else {
            intsigs.A1 = if12.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else {
            intsigs.A2 = if12.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_13 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_13<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_13);
    shared_13( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else {
            intsigs.A1 = if13.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else {
            intsigs.A2 = if13.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_14 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_14<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_14);
    shared_14( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else {
            intsigs.A1 = if14.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else {
            intsigs.A2 = if14.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_15 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_15<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_15);
    shared_15( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else {
            intsigs.A1 = if15.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else {
            intsigs.A2 = if15.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_16 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_16<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_16);
    shared_16( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else {
            intsigs.A1 = if16.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else {
            intsigs.A2 = if16.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_17 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_17<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_17);
    shared_17( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else {
            intsigs.A1 = if17.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else {
            intsigs.A2 = if17.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_18 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_18<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_18);
    shared_18( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else {
            intsigs.A1 = if18.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else {
            intsigs.A2 = if18.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_19 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_19<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_19);
    shared_19( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else {
            intsigs.A1 = if19.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else {
            intsigs.A2 = if19.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_20 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_20<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_20);
    shared_20( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else {
            intsigs.A1 = if20.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else {
            intsigs.A2 = if20.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_21 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_21<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_21);
    shared_21( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else {
            intsigs.A1 = if21.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else {
            intsigs.A2 = if21.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_22 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_22<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_22);
    shared_22( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else {
            intsigs.A1 = if22.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else {
            intsigs.A2 = if22.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_23 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_23<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_23);
    shared_23( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22"),if23("if23")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if23.CE2;
        sensitive << if23.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_23);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;
    mac_plm_block_out_dma64_ext_signals_0    if23;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else if (if23.CE0.read() == 1) {
            intsigs.WE0 = if23.WE0;
            intsigs.CE0 = if23.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else if (if22.CE0.read() == 1) {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        } else {
            intsigs.D0 = if23.D0;
            intsigs.WEM0 = if23.WEM0;
            intsigs.A0 = if23.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else if (if23.CE1.read() == 1) {
            intsigs.CE1 = if23.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            intsigs.A1 = if22.A1;
        } else {
            intsigs.A1 = if23.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else if (if23.CE2.read() == 1) {
            intsigs.CE2 = if23.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            intsigs.A2 = if22.A2;
        } else {
            intsigs.A2 = if23.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = intsigs.Q1;
        if23.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_24 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_24<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_24);
    shared_24( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22"),if23("if23"),if24("if24")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if24.CE2;
        sensitive << if24.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_23);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_24);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;
    mac_plm_block_out_dma64_ext_signals_0    if23;
    mac_plm_block_out_dma64_ext_signals_0    if24;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else if (if23.CE0.read() == 1) {
            intsigs.WE0 = if23.WE0;
            intsigs.CE0 = if23.CE0;
        } else if (if24.CE0.read() == 1) {
            intsigs.WE0 = if24.WE0;
            intsigs.CE0 = if24.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else if (if22.CE0.read() == 1) {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        } else if (if23.CE0.read() == 1) {
            intsigs.D0 = if23.D0;
            intsigs.WEM0 = if23.WEM0;
            intsigs.A0 = if23.A0;
        } else {
            intsigs.D0 = if24.D0;
            intsigs.WEM0 = if24.WEM0;
            intsigs.A0 = if24.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else if (if23.CE1.read() == 1) {
            intsigs.CE1 = if23.CE1;
        } else if (if24.CE1.read() == 1) {
            intsigs.CE1 = if24.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            intsigs.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            intsigs.A1 = if23.A1;
        } else {
            intsigs.A1 = if24.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else if (if23.CE2.read() == 1) {
            intsigs.CE2 = if23.CE2;
        } else if (if24.CE2.read() == 1) {
            intsigs.CE2 = if24.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            intsigs.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            intsigs.A2 = if23.A2;
        } else {
            intsigs.A2 = if24.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = intsigs.Q1;
        if23.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = intsigs.Q1;
        if24.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_25 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_25<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_25);
    shared_25( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22"),if23("if23"),if24("if24"),if25("if25")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if25.CE2;
        sensitive << if25.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_23);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_24);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_25);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;
    mac_plm_block_out_dma64_ext_signals_0    if23;
    mac_plm_block_out_dma64_ext_signals_0    if24;
    mac_plm_block_out_dma64_ext_signals_0    if25;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else if (if23.CE0.read() == 1) {
            intsigs.WE0 = if23.WE0;
            intsigs.CE0 = if23.CE0;
        } else if (if24.CE0.read() == 1) {
            intsigs.WE0 = if24.WE0;
            intsigs.CE0 = if24.CE0;
        } else if (if25.CE0.read() == 1) {
            intsigs.WE0 = if25.WE0;
            intsigs.CE0 = if25.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else if (if22.CE0.read() == 1) {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        } else if (if23.CE0.read() == 1) {
            intsigs.D0 = if23.D0;
            intsigs.WEM0 = if23.WEM0;
            intsigs.A0 = if23.A0;
        } else if (if24.CE0.read() == 1) {
            intsigs.D0 = if24.D0;
            intsigs.WEM0 = if24.WEM0;
            intsigs.A0 = if24.A0;
        } else {
            intsigs.D0 = if25.D0;
            intsigs.WEM0 = if25.WEM0;
            intsigs.A0 = if25.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else if (if23.CE1.read() == 1) {
            intsigs.CE1 = if23.CE1;
        } else if (if24.CE1.read() == 1) {
            intsigs.CE1 = if24.CE1;
        } else if (if25.CE1.read() == 1) {
            intsigs.CE1 = if25.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            intsigs.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            intsigs.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            intsigs.A1 = if24.A1;
        } else {
            intsigs.A1 = if25.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else if (if23.CE2.read() == 1) {
            intsigs.CE2 = if23.CE2;
        } else if (if24.CE2.read() == 1) {
            intsigs.CE2 = if24.CE2;
        } else if (if25.CE2.read() == 1) {
            intsigs.CE2 = if25.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            intsigs.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            intsigs.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            intsigs.A2 = if24.A2;
        } else {
            intsigs.A2 = if25.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = intsigs.Q1;
        if23.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = intsigs.Q1;
        if24.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = intsigs.Q1;
        if25.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_26 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_26<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_26);
    shared_26( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22"),if23("if23"),if24("if24"),if25("if25"),if26("if26")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if26.CE2;
        sensitive << if26.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_23);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_24);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_25);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_26);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;
    mac_plm_block_out_dma64_ext_signals_0    if23;
    mac_plm_block_out_dma64_ext_signals_0    if24;
    mac_plm_block_out_dma64_ext_signals_0    if25;
    mac_plm_block_out_dma64_ext_signals_0    if26;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else if (if23.CE0.read() == 1) {
            intsigs.WE0 = if23.WE0;
            intsigs.CE0 = if23.CE0;
        } else if (if24.CE0.read() == 1) {
            intsigs.WE0 = if24.WE0;
            intsigs.CE0 = if24.CE0;
        } else if (if25.CE0.read() == 1) {
            intsigs.WE0 = if25.WE0;
            intsigs.CE0 = if25.CE0;
        } else if (if26.CE0.read() == 1) {
            intsigs.WE0 = if26.WE0;
            intsigs.CE0 = if26.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else if (if22.CE0.read() == 1) {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        } else if (if23.CE0.read() == 1) {
            intsigs.D0 = if23.D0;
            intsigs.WEM0 = if23.WEM0;
            intsigs.A0 = if23.A0;
        } else if (if24.CE0.read() == 1) {
            intsigs.D0 = if24.D0;
            intsigs.WEM0 = if24.WEM0;
            intsigs.A0 = if24.A0;
        } else if (if25.CE0.read() == 1) {
            intsigs.D0 = if25.D0;
            intsigs.WEM0 = if25.WEM0;
            intsigs.A0 = if25.A0;
        } else {
            intsigs.D0 = if26.D0;
            intsigs.WEM0 = if26.WEM0;
            intsigs.A0 = if26.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else if (if23.CE1.read() == 1) {
            intsigs.CE1 = if23.CE1;
        } else if (if24.CE1.read() == 1) {
            intsigs.CE1 = if24.CE1;
        } else if (if25.CE1.read() == 1) {
            intsigs.CE1 = if25.CE1;
        } else if (if26.CE1.read() == 1) {
            intsigs.CE1 = if26.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            intsigs.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            intsigs.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            intsigs.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            intsigs.A1 = if25.A1;
        } else {
            intsigs.A1 = if26.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else if (if23.CE2.read() == 1) {
            intsigs.CE2 = if23.CE2;
        } else if (if24.CE2.read() == 1) {
            intsigs.CE2 = if24.CE2;
        } else if (if25.CE2.read() == 1) {
            intsigs.CE2 = if25.CE2;
        } else if (if26.CE2.read() == 1) {
            intsigs.CE2 = if26.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            intsigs.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            intsigs.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            intsigs.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            intsigs.A2 = if25.A2;
        } else {
            intsigs.A2 = if26.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = intsigs.Q1;
        if23.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = intsigs.Q1;
        if24.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = intsigs.Q1;
        if25.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = intsigs.Q1;
        if26.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_27 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_27<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_27);
    shared_27( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22"),if23("if23"),if24("if24"),if25("if25"),if26("if26"),if27("if27")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if27.CE2;
        sensitive << if27.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_23);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_24);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_25);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_26);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_27);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;
    mac_plm_block_out_dma64_ext_signals_0    if23;
    mac_plm_block_out_dma64_ext_signals_0    if24;
    mac_plm_block_out_dma64_ext_signals_0    if25;
    mac_plm_block_out_dma64_ext_signals_0    if26;
    mac_plm_block_out_dma64_ext_signals_0    if27;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else if (if23.CE0.read() == 1) {
            intsigs.WE0 = if23.WE0;
            intsigs.CE0 = if23.CE0;
        } else if (if24.CE0.read() == 1) {
            intsigs.WE0 = if24.WE0;
            intsigs.CE0 = if24.CE0;
        } else if (if25.CE0.read() == 1) {
            intsigs.WE0 = if25.WE0;
            intsigs.CE0 = if25.CE0;
        } else if (if26.CE0.read() == 1) {
            intsigs.WE0 = if26.WE0;
            intsigs.CE0 = if26.CE0;
        } else if (if27.CE0.read() == 1) {
            intsigs.WE0 = if27.WE0;
            intsigs.CE0 = if27.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else if (if22.CE0.read() == 1) {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        } else if (if23.CE0.read() == 1) {
            intsigs.D0 = if23.D0;
            intsigs.WEM0 = if23.WEM0;
            intsigs.A0 = if23.A0;
        } else if (if24.CE0.read() == 1) {
            intsigs.D0 = if24.D0;
            intsigs.WEM0 = if24.WEM0;
            intsigs.A0 = if24.A0;
        } else if (if25.CE0.read() == 1) {
            intsigs.D0 = if25.D0;
            intsigs.WEM0 = if25.WEM0;
            intsigs.A0 = if25.A0;
        } else if (if26.CE0.read() == 1) {
            intsigs.D0 = if26.D0;
            intsigs.WEM0 = if26.WEM0;
            intsigs.A0 = if26.A0;
        } else {
            intsigs.D0 = if27.D0;
            intsigs.WEM0 = if27.WEM0;
            intsigs.A0 = if27.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else if (if23.CE1.read() == 1) {
            intsigs.CE1 = if23.CE1;
        } else if (if24.CE1.read() == 1) {
            intsigs.CE1 = if24.CE1;
        } else if (if25.CE1.read() == 1) {
            intsigs.CE1 = if25.CE1;
        } else if (if26.CE1.read() == 1) {
            intsigs.CE1 = if26.CE1;
        } else if (if27.CE1.read() == 1) {
            intsigs.CE1 = if27.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            intsigs.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            intsigs.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            intsigs.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            intsigs.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            intsigs.A1 = if26.A1;
        } else {
            intsigs.A1 = if27.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else if (if23.CE2.read() == 1) {
            intsigs.CE2 = if23.CE2;
        } else if (if24.CE2.read() == 1) {
            intsigs.CE2 = if24.CE2;
        } else if (if25.CE2.read() == 1) {
            intsigs.CE2 = if25.CE2;
        } else if (if26.CE2.read() == 1) {
            intsigs.CE2 = if26.CE2;
        } else if (if27.CE2.read() == 1) {
            intsigs.CE2 = if27.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            intsigs.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            intsigs.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            intsigs.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            intsigs.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            intsigs.A2 = if26.A2;
        } else {
            intsigs.A2 = if27.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = intsigs.Q1;
        if23.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = intsigs.Q1;
        if24.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = intsigs.Q1;
        if25.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = intsigs.Q1;
        if26.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = intsigs.Q1;
        if27.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_28 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_28<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_28);
    shared_28( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22"),if23("if23"),if24("if24"),if25("if25"),if26("if26"),if27("if27"),if28("if28")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if27.CE2;
        sensitive << if27.A2;
        sensitive << if28.WE0;
        sensitive << if28.CE0;
        sensitive << if28.D0;
        sensitive << if28.A0;
        sensitive << if28.WEM0;
        sensitive << if28.CE1;
        sensitive << if28.A1;
        sensitive << if28.CE2;
        sensitive << if28.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_23);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_24);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_25);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_26);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_27);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_28);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;
    mac_plm_block_out_dma64_ext_signals_0    if23;
    mac_plm_block_out_dma64_ext_signals_0    if24;
    mac_plm_block_out_dma64_ext_signals_0    if25;
    mac_plm_block_out_dma64_ext_signals_0    if26;
    mac_plm_block_out_dma64_ext_signals_0    if27;
    mac_plm_block_out_dma64_ext_signals_0    if28;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else if (if23.CE0.read() == 1) {
            intsigs.WE0 = if23.WE0;
            intsigs.CE0 = if23.CE0;
        } else if (if24.CE0.read() == 1) {
            intsigs.WE0 = if24.WE0;
            intsigs.CE0 = if24.CE0;
        } else if (if25.CE0.read() == 1) {
            intsigs.WE0 = if25.WE0;
            intsigs.CE0 = if25.CE0;
        } else if (if26.CE0.read() == 1) {
            intsigs.WE0 = if26.WE0;
            intsigs.CE0 = if26.CE0;
        } else if (if27.CE0.read() == 1) {
            intsigs.WE0 = if27.WE0;
            intsigs.CE0 = if27.CE0;
        } else if (if28.CE0.read() == 1) {
            intsigs.WE0 = if28.WE0;
            intsigs.CE0 = if28.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else if (if22.CE0.read() == 1) {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        } else if (if23.CE0.read() == 1) {
            intsigs.D0 = if23.D0;
            intsigs.WEM0 = if23.WEM0;
            intsigs.A0 = if23.A0;
        } else if (if24.CE0.read() == 1) {
            intsigs.D0 = if24.D0;
            intsigs.WEM0 = if24.WEM0;
            intsigs.A0 = if24.A0;
        } else if (if25.CE0.read() == 1) {
            intsigs.D0 = if25.D0;
            intsigs.WEM0 = if25.WEM0;
            intsigs.A0 = if25.A0;
        } else if (if26.CE0.read() == 1) {
            intsigs.D0 = if26.D0;
            intsigs.WEM0 = if26.WEM0;
            intsigs.A0 = if26.A0;
        } else if (if27.CE0.read() == 1) {
            intsigs.D0 = if27.D0;
            intsigs.WEM0 = if27.WEM0;
            intsigs.A0 = if27.A0;
        } else {
            intsigs.D0 = if28.D0;
            intsigs.WEM0 = if28.WEM0;
            intsigs.A0 = if28.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else if (if23.CE1.read() == 1) {
            intsigs.CE1 = if23.CE1;
        } else if (if24.CE1.read() == 1) {
            intsigs.CE1 = if24.CE1;
        } else if (if25.CE1.read() == 1) {
            intsigs.CE1 = if25.CE1;
        } else if (if26.CE1.read() == 1) {
            intsigs.CE1 = if26.CE1;
        } else if (if27.CE1.read() == 1) {
            intsigs.CE1 = if27.CE1;
        } else if (if28.CE1.read() == 1) {
            intsigs.CE1 = if28.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            intsigs.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            intsigs.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            intsigs.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            intsigs.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            intsigs.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            intsigs.A1 = if27.A1;
        } else {
            intsigs.A1 = if28.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else if (if23.CE2.read() == 1) {
            intsigs.CE2 = if23.CE2;
        } else if (if24.CE2.read() == 1) {
            intsigs.CE2 = if24.CE2;
        } else if (if25.CE2.read() == 1) {
            intsigs.CE2 = if25.CE2;
        } else if (if26.CE2.read() == 1) {
            intsigs.CE2 = if26.CE2;
        } else if (if27.CE2.read() == 1) {
            intsigs.CE2 = if27.CE2;
        } else if (if28.CE2.read() == 1) {
            intsigs.CE2 = if28.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            intsigs.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            intsigs.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            intsigs.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            intsigs.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            intsigs.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            intsigs.A2 = if27.A2;
        } else {
            intsigs.A2 = if28.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = intsigs.Q1;
        if23.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = intsigs.Q1;
        if24.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = intsigs.Q1;
        if25.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = intsigs.Q1;
        if26.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = intsigs.Q1;
        if27.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q1 = intsigs.Q1;
        if28.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_29 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_29<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_29);
    shared_29( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22"),if23("if23"),if24("if24"),if25("if25"),if26("if26"),if27("if27"),if28("if28"),if29("if29")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if27.CE2;
        sensitive << if27.A2;
        sensitive << if28.WE0;
        sensitive << if28.CE0;
        sensitive << if28.D0;
        sensitive << if28.A0;
        sensitive << if28.WEM0;
        sensitive << if28.CE1;
        sensitive << if28.A1;
        sensitive << if28.CE2;
        sensitive << if28.A2;
        sensitive << if29.WE0;
        sensitive << if29.CE0;
        sensitive << if29.D0;
        sensitive << if29.A0;
        sensitive << if29.WEM0;
        sensitive << if29.CE1;
        sensitive << if29.A1;
        sensitive << if29.CE2;
        sensitive << if29.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_23);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_24);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_25);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_26);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_27);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_28);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_29);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;
    mac_plm_block_out_dma64_ext_signals_0    if23;
    mac_plm_block_out_dma64_ext_signals_0    if24;
    mac_plm_block_out_dma64_ext_signals_0    if25;
    mac_plm_block_out_dma64_ext_signals_0    if26;
    mac_plm_block_out_dma64_ext_signals_0    if27;
    mac_plm_block_out_dma64_ext_signals_0    if28;
    mac_plm_block_out_dma64_ext_signals_0    if29;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else if (if23.CE0.read() == 1) {
            intsigs.WE0 = if23.WE0;
            intsigs.CE0 = if23.CE0;
        } else if (if24.CE0.read() == 1) {
            intsigs.WE0 = if24.WE0;
            intsigs.CE0 = if24.CE0;
        } else if (if25.CE0.read() == 1) {
            intsigs.WE0 = if25.WE0;
            intsigs.CE0 = if25.CE0;
        } else if (if26.CE0.read() == 1) {
            intsigs.WE0 = if26.WE0;
            intsigs.CE0 = if26.CE0;
        } else if (if27.CE0.read() == 1) {
            intsigs.WE0 = if27.WE0;
            intsigs.CE0 = if27.CE0;
        } else if (if28.CE0.read() == 1) {
            intsigs.WE0 = if28.WE0;
            intsigs.CE0 = if28.CE0;
        } else if (if29.CE0.read() == 1) {
            intsigs.WE0 = if29.WE0;
            intsigs.CE0 = if29.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else if (if22.CE0.read() == 1) {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        } else if (if23.CE0.read() == 1) {
            intsigs.D0 = if23.D0;
            intsigs.WEM0 = if23.WEM0;
            intsigs.A0 = if23.A0;
        } else if (if24.CE0.read() == 1) {
            intsigs.D0 = if24.D0;
            intsigs.WEM0 = if24.WEM0;
            intsigs.A0 = if24.A0;
        } else if (if25.CE0.read() == 1) {
            intsigs.D0 = if25.D0;
            intsigs.WEM0 = if25.WEM0;
            intsigs.A0 = if25.A0;
        } else if (if26.CE0.read() == 1) {
            intsigs.D0 = if26.D0;
            intsigs.WEM0 = if26.WEM0;
            intsigs.A0 = if26.A0;
        } else if (if27.CE0.read() == 1) {
            intsigs.D0 = if27.D0;
            intsigs.WEM0 = if27.WEM0;
            intsigs.A0 = if27.A0;
        } else if (if28.CE0.read() == 1) {
            intsigs.D0 = if28.D0;
            intsigs.WEM0 = if28.WEM0;
            intsigs.A0 = if28.A0;
        } else {
            intsigs.D0 = if29.D0;
            intsigs.WEM0 = if29.WEM0;
            intsigs.A0 = if29.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else if (if23.CE1.read() == 1) {
            intsigs.CE1 = if23.CE1;
        } else if (if24.CE1.read() == 1) {
            intsigs.CE1 = if24.CE1;
        } else if (if25.CE1.read() == 1) {
            intsigs.CE1 = if25.CE1;
        } else if (if26.CE1.read() == 1) {
            intsigs.CE1 = if26.CE1;
        } else if (if27.CE1.read() == 1) {
            intsigs.CE1 = if27.CE1;
        } else if (if28.CE1.read() == 1) {
            intsigs.CE1 = if28.CE1;
        } else if (if29.CE1.read() == 1) {
            intsigs.CE1 = if29.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            intsigs.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            intsigs.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            intsigs.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            intsigs.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            intsigs.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            intsigs.A1 = if27.A1;
        } else if (if28.CE1.read() == 1) {
            intsigs.A1 = if28.A1;
        } else {
            intsigs.A1 = if29.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else if (if23.CE2.read() == 1) {
            intsigs.CE2 = if23.CE2;
        } else if (if24.CE2.read() == 1) {
            intsigs.CE2 = if24.CE2;
        } else if (if25.CE2.read() == 1) {
            intsigs.CE2 = if25.CE2;
        } else if (if26.CE2.read() == 1) {
            intsigs.CE2 = if26.CE2;
        } else if (if27.CE2.read() == 1) {
            intsigs.CE2 = if27.CE2;
        } else if (if28.CE2.read() == 1) {
            intsigs.CE2 = if28.CE2;
        } else if (if29.CE2.read() == 1) {
            intsigs.CE2 = if29.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            intsigs.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            intsigs.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            intsigs.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            intsigs.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            intsigs.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            intsigs.A2 = if27.A2;
        } else if (if28.CE2.read() == 1) {
            intsigs.A2 = if28.A2;
        } else {
            intsigs.A2 = if29.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = intsigs.Q1;
        if23.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = intsigs.Q1;
        if24.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = intsigs.Q1;
        if25.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = intsigs.Q1;
        if26.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = intsigs.Q1;
        if27.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q1 = intsigs.Q1;
        if28.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q1 = intsigs.Q1;
        if29.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_30 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_30<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_30);
    shared_30( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22"),if23("if23"),if24("if24"),if25("if25"),if26("if26"),if27("if27"),if28("if28"),if29("if29"),if30("if30")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if27.CE2;
        sensitive << if27.A2;
        sensitive << if28.WE0;
        sensitive << if28.CE0;
        sensitive << if28.D0;
        sensitive << if28.A0;
        sensitive << if28.WEM0;
        sensitive << if28.CE1;
        sensitive << if28.A1;
        sensitive << if28.CE2;
        sensitive << if28.A2;
        sensitive << if29.WE0;
        sensitive << if29.CE0;
        sensitive << if29.D0;
        sensitive << if29.A0;
        sensitive << if29.WEM0;
        sensitive << if29.CE1;
        sensitive << if29.A1;
        sensitive << if29.CE2;
        sensitive << if29.A2;
        sensitive << if30.WE0;
        sensitive << if30.CE0;
        sensitive << if30.D0;
        sensitive << if30.A0;
        sensitive << if30.WEM0;
        sensitive << if30.CE1;
        sensitive << if30.A1;
        sensitive << if30.CE2;
        sensitive << if30.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_23);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_24);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_25);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_26);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_27);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_28);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_29);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_30);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;
    mac_plm_block_out_dma64_ext_signals_0    if23;
    mac_plm_block_out_dma64_ext_signals_0    if24;
    mac_plm_block_out_dma64_ext_signals_0    if25;
    mac_plm_block_out_dma64_ext_signals_0    if26;
    mac_plm_block_out_dma64_ext_signals_0    if27;
    mac_plm_block_out_dma64_ext_signals_0    if28;
    mac_plm_block_out_dma64_ext_signals_0    if29;
    mac_plm_block_out_dma64_ext_signals_0    if30;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else if (if23.CE0.read() == 1) {
            intsigs.WE0 = if23.WE0;
            intsigs.CE0 = if23.CE0;
        } else if (if24.CE0.read() == 1) {
            intsigs.WE0 = if24.WE0;
            intsigs.CE0 = if24.CE0;
        } else if (if25.CE0.read() == 1) {
            intsigs.WE0 = if25.WE0;
            intsigs.CE0 = if25.CE0;
        } else if (if26.CE0.read() == 1) {
            intsigs.WE0 = if26.WE0;
            intsigs.CE0 = if26.CE0;
        } else if (if27.CE0.read() == 1) {
            intsigs.WE0 = if27.WE0;
            intsigs.CE0 = if27.CE0;
        } else if (if28.CE0.read() == 1) {
            intsigs.WE0 = if28.WE0;
            intsigs.CE0 = if28.CE0;
        } else if (if29.CE0.read() == 1) {
            intsigs.WE0 = if29.WE0;
            intsigs.CE0 = if29.CE0;
        } else if (if30.CE0.read() == 1) {
            intsigs.WE0 = if30.WE0;
            intsigs.CE0 = if30.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else if (if22.CE0.read() == 1) {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        } else if (if23.CE0.read() == 1) {
            intsigs.D0 = if23.D0;
            intsigs.WEM0 = if23.WEM0;
            intsigs.A0 = if23.A0;
        } else if (if24.CE0.read() == 1) {
            intsigs.D0 = if24.D0;
            intsigs.WEM0 = if24.WEM0;
            intsigs.A0 = if24.A0;
        } else if (if25.CE0.read() == 1) {
            intsigs.D0 = if25.D0;
            intsigs.WEM0 = if25.WEM0;
            intsigs.A0 = if25.A0;
        } else if (if26.CE0.read() == 1) {
            intsigs.D0 = if26.D0;
            intsigs.WEM0 = if26.WEM0;
            intsigs.A0 = if26.A0;
        } else if (if27.CE0.read() == 1) {
            intsigs.D0 = if27.D0;
            intsigs.WEM0 = if27.WEM0;
            intsigs.A0 = if27.A0;
        } else if (if28.CE0.read() == 1) {
            intsigs.D0 = if28.D0;
            intsigs.WEM0 = if28.WEM0;
            intsigs.A0 = if28.A0;
        } else if (if29.CE0.read() == 1) {
            intsigs.D0 = if29.D0;
            intsigs.WEM0 = if29.WEM0;
            intsigs.A0 = if29.A0;
        } else {
            intsigs.D0 = if30.D0;
            intsigs.WEM0 = if30.WEM0;
            intsigs.A0 = if30.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else if (if23.CE1.read() == 1) {
            intsigs.CE1 = if23.CE1;
        } else if (if24.CE1.read() == 1) {
            intsigs.CE1 = if24.CE1;
        } else if (if25.CE1.read() == 1) {
            intsigs.CE1 = if25.CE1;
        } else if (if26.CE1.read() == 1) {
            intsigs.CE1 = if26.CE1;
        } else if (if27.CE1.read() == 1) {
            intsigs.CE1 = if27.CE1;
        } else if (if28.CE1.read() == 1) {
            intsigs.CE1 = if28.CE1;
        } else if (if29.CE1.read() == 1) {
            intsigs.CE1 = if29.CE1;
        } else if (if30.CE1.read() == 1) {
            intsigs.CE1 = if30.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            intsigs.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            intsigs.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            intsigs.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            intsigs.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            intsigs.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            intsigs.A1 = if27.A1;
        } else if (if28.CE1.read() == 1) {
            intsigs.A1 = if28.A1;
        } else if (if29.CE1.read() == 1) {
            intsigs.A1 = if29.A1;
        } else {
            intsigs.A1 = if30.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else if (if23.CE2.read() == 1) {
            intsigs.CE2 = if23.CE2;
        } else if (if24.CE2.read() == 1) {
            intsigs.CE2 = if24.CE2;
        } else if (if25.CE2.read() == 1) {
            intsigs.CE2 = if25.CE2;
        } else if (if26.CE2.read() == 1) {
            intsigs.CE2 = if26.CE2;
        } else if (if27.CE2.read() == 1) {
            intsigs.CE2 = if27.CE2;
        } else if (if28.CE2.read() == 1) {
            intsigs.CE2 = if28.CE2;
        } else if (if29.CE2.read() == 1) {
            intsigs.CE2 = if29.CE2;
        } else if (if30.CE2.read() == 1) {
            intsigs.CE2 = if30.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            intsigs.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            intsigs.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            intsigs.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            intsigs.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            intsigs.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            intsigs.A2 = if27.A2;
        } else if (if28.CE2.read() == 1) {
            intsigs.A2 = if28.A2;
        } else if (if29.CE2.read() == 1) {
            intsigs.A2 = if29.A2;
        } else {
            intsigs.A2 = if30.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = intsigs.Q1;
        if23.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = intsigs.Q1;
        if24.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = intsigs.Q1;
        if25.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = intsigs.Q1;
        if26.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = intsigs.Q1;
        if27.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q1 = intsigs.Q1;
        if28.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q1 = intsigs.Q1;
        if29.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if30
    //
    void gen_out_30()
    {
        if30.Q1 = intsigs.Q1;
        if30.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_31 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_31<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_31);
    shared_31( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22"),if23("if23"),if24("if24"),if25("if25"),if26("if26"),if27("if27"),if28("if28"),if29("if29"),if30("if30"),if31("if31")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if27.CE2;
        sensitive << if27.A2;
        sensitive << if28.WE0;
        sensitive << if28.CE0;
        sensitive << if28.D0;
        sensitive << if28.A0;
        sensitive << if28.WEM0;
        sensitive << if28.CE1;
        sensitive << if28.A1;
        sensitive << if28.CE2;
        sensitive << if28.A2;
        sensitive << if29.WE0;
        sensitive << if29.CE0;
        sensitive << if29.D0;
        sensitive << if29.A0;
        sensitive << if29.WEM0;
        sensitive << if29.CE1;
        sensitive << if29.A1;
        sensitive << if29.CE2;
        sensitive << if29.A2;
        sensitive << if30.WE0;
        sensitive << if30.CE0;
        sensitive << if30.D0;
        sensitive << if30.A0;
        sensitive << if30.WEM0;
        sensitive << if30.CE1;
        sensitive << if30.A1;
        sensitive << if30.CE2;
        sensitive << if30.A2;
        sensitive << if31.WE0;
        sensitive << if31.CE0;
        sensitive << if31.D0;
        sensitive << if31.A0;
        sensitive << if31.WEM0;
        sensitive << if31.CE1;
        sensitive << if31.A1;
        sensitive << if31.CE2;
        sensitive << if31.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_23);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_24);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_25);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_26);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_27);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_28);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_29);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_30);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_31);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;
    mac_plm_block_out_dma64_ext_signals_0    if23;
    mac_plm_block_out_dma64_ext_signals_0    if24;
    mac_plm_block_out_dma64_ext_signals_0    if25;
    mac_plm_block_out_dma64_ext_signals_0    if26;
    mac_plm_block_out_dma64_ext_signals_0    if27;
    mac_plm_block_out_dma64_ext_signals_0    if28;
    mac_plm_block_out_dma64_ext_signals_0    if29;
    mac_plm_block_out_dma64_ext_signals_0    if30;
    mac_plm_block_out_dma64_ext_signals_0    if31;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else if (if23.CE0.read() == 1) {
            intsigs.WE0 = if23.WE0;
            intsigs.CE0 = if23.CE0;
        } else if (if24.CE0.read() == 1) {
            intsigs.WE0 = if24.WE0;
            intsigs.CE0 = if24.CE0;
        } else if (if25.CE0.read() == 1) {
            intsigs.WE0 = if25.WE0;
            intsigs.CE0 = if25.CE0;
        } else if (if26.CE0.read() == 1) {
            intsigs.WE0 = if26.WE0;
            intsigs.CE0 = if26.CE0;
        } else if (if27.CE0.read() == 1) {
            intsigs.WE0 = if27.WE0;
            intsigs.CE0 = if27.CE0;
        } else if (if28.CE0.read() == 1) {
            intsigs.WE0 = if28.WE0;
            intsigs.CE0 = if28.CE0;
        } else if (if29.CE0.read() == 1) {
            intsigs.WE0 = if29.WE0;
            intsigs.CE0 = if29.CE0;
        } else if (if30.CE0.read() == 1) {
            intsigs.WE0 = if30.WE0;
            intsigs.CE0 = if30.CE0;
        } else if (if31.CE0.read() == 1) {
            intsigs.WE0 = if31.WE0;
            intsigs.CE0 = if31.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else if (if22.CE0.read() == 1) {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        } else if (if23.CE0.read() == 1) {
            intsigs.D0 = if23.D0;
            intsigs.WEM0 = if23.WEM0;
            intsigs.A0 = if23.A0;
        } else if (if24.CE0.read() == 1) {
            intsigs.D0 = if24.D0;
            intsigs.WEM0 = if24.WEM0;
            intsigs.A0 = if24.A0;
        } else if (if25.CE0.read() == 1) {
            intsigs.D0 = if25.D0;
            intsigs.WEM0 = if25.WEM0;
            intsigs.A0 = if25.A0;
        } else if (if26.CE0.read() == 1) {
            intsigs.D0 = if26.D0;
            intsigs.WEM0 = if26.WEM0;
            intsigs.A0 = if26.A0;
        } else if (if27.CE0.read() == 1) {
            intsigs.D0 = if27.D0;
            intsigs.WEM0 = if27.WEM0;
            intsigs.A0 = if27.A0;
        } else if (if28.CE0.read() == 1) {
            intsigs.D0 = if28.D0;
            intsigs.WEM0 = if28.WEM0;
            intsigs.A0 = if28.A0;
        } else if (if29.CE0.read() == 1) {
            intsigs.D0 = if29.D0;
            intsigs.WEM0 = if29.WEM0;
            intsigs.A0 = if29.A0;
        } else if (if30.CE0.read() == 1) {
            intsigs.D0 = if30.D0;
            intsigs.WEM0 = if30.WEM0;
            intsigs.A0 = if30.A0;
        } else {
            intsigs.D0 = if31.D0;
            intsigs.WEM0 = if31.WEM0;
            intsigs.A0 = if31.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else if (if23.CE1.read() == 1) {
            intsigs.CE1 = if23.CE1;
        } else if (if24.CE1.read() == 1) {
            intsigs.CE1 = if24.CE1;
        } else if (if25.CE1.read() == 1) {
            intsigs.CE1 = if25.CE1;
        } else if (if26.CE1.read() == 1) {
            intsigs.CE1 = if26.CE1;
        } else if (if27.CE1.read() == 1) {
            intsigs.CE1 = if27.CE1;
        } else if (if28.CE1.read() == 1) {
            intsigs.CE1 = if28.CE1;
        } else if (if29.CE1.read() == 1) {
            intsigs.CE1 = if29.CE1;
        } else if (if30.CE1.read() == 1) {
            intsigs.CE1 = if30.CE1;
        } else if (if31.CE1.read() == 1) {
            intsigs.CE1 = if31.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            intsigs.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            intsigs.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            intsigs.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            intsigs.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            intsigs.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            intsigs.A1 = if27.A1;
        } else if (if28.CE1.read() == 1) {
            intsigs.A1 = if28.A1;
        } else if (if29.CE1.read() == 1) {
            intsigs.A1 = if29.A1;
        } else if (if30.CE1.read() == 1) {
            intsigs.A1 = if30.A1;
        } else {
            intsigs.A1 = if31.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else if (if23.CE2.read() == 1) {
            intsigs.CE2 = if23.CE2;
        } else if (if24.CE2.read() == 1) {
            intsigs.CE2 = if24.CE2;
        } else if (if25.CE2.read() == 1) {
            intsigs.CE2 = if25.CE2;
        } else if (if26.CE2.read() == 1) {
            intsigs.CE2 = if26.CE2;
        } else if (if27.CE2.read() == 1) {
            intsigs.CE2 = if27.CE2;
        } else if (if28.CE2.read() == 1) {
            intsigs.CE2 = if28.CE2;
        } else if (if29.CE2.read() == 1) {
            intsigs.CE2 = if29.CE2;
        } else if (if30.CE2.read() == 1) {
            intsigs.CE2 = if30.CE2;
        } else if (if31.CE2.read() == 1) {
            intsigs.CE2 = if31.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            intsigs.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            intsigs.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            intsigs.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            intsigs.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            intsigs.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            intsigs.A2 = if27.A2;
        } else if (if28.CE2.read() == 1) {
            intsigs.A2 = if28.A2;
        } else if (if29.CE2.read() == 1) {
            intsigs.A2 = if29.A2;
        } else if (if30.CE2.read() == 1) {
            intsigs.A2 = if30.A2;
        } else {
            intsigs.A2 = if31.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = intsigs.Q1;
        if23.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = intsigs.Q1;
        if24.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = intsigs.Q1;
        if25.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = intsigs.Q1;
        if26.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = intsigs.Q1;
        if27.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q1 = intsigs.Q1;
        if28.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q1 = intsigs.Q1;
        if29.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if30
    //
    void gen_out_30()
    {
        if30.Q1 = intsigs.Q1;
        if30.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if31
    //
    void gen_out_31()
    {
        if31.Q1 = intsigs.Q1;
        if31.Q2 = intsigs.Q2;
    }

};

template <typename HLS_L>
class mac_plm_block_out_dma64::shared_32 :
    public sc_module,
    public mac_plm_block_out_dma64::types<HLS_L>
{   
  public:
    typedef mac_plm_block_out_dma64::shared_32<HLS_L>               this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;
  public:
    SC_HAS_PROCESS(shared_32);
    shared_32( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name)
      , model(basename())
	  ,CLK("CLK")
      ,if1("if1"),if2("if2"),if3("if3"),if4("if4"),if5("if5"),if6("if6"),if7("if7"),if8("if8"),if9("if9"),if10("if10"),if11("if11"),if12("if12"),if13("if13"),if14("if14"),if15("if15"),if16("if16"),if17("if17"),if18("if18"),if19("if19"),if20("if20"),if21("if21"),if22("if22"),if23("if23"),if24("if24"),if25("if25"),if26("if26"),if27("if27"),if28("if28"),if29("if29"),if30("if30"),if31("if31"),if32("if32")
    {

        model.WE0(intsigs.WE0);
        model.CE0(intsigs.CE0);
        model.D0(intsigs.D0);
        model.A0(intsigs.A0);
        model.WEM0(intsigs.WEM0);
        model.CE1(intsigs.CE1);
        model.A1(intsigs.A1);
        model.CE2(intsigs.CE2);
        model.A2(intsigs.A2);
        model.Q1(intsigs.Q1);
        model.Q2(intsigs.Q2);
        model.CLK(CLK);

        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if27.CE2;
        sensitive << if27.A2;
        sensitive << if28.WE0;
        sensitive << if28.CE0;
        sensitive << if28.D0;
        sensitive << if28.A0;
        sensitive << if28.WEM0;
        sensitive << if28.CE1;
        sensitive << if28.A1;
        sensitive << if28.CE2;
        sensitive << if28.A2;
        sensitive << if29.WE0;
        sensitive << if29.CE0;
        sensitive << if29.D0;
        sensitive << if29.A0;
        sensitive << if29.WEM0;
        sensitive << if29.CE1;
        sensitive << if29.A1;
        sensitive << if29.CE2;
        sensitive << if29.A2;
        sensitive << if30.WE0;
        sensitive << if30.CE0;
        sensitive << if30.D0;
        sensitive << if30.A0;
        sensitive << if30.WEM0;
        sensitive << if30.CE1;
        sensitive << if30.A1;
        sensitive << if30.CE2;
        sensitive << if30.A2;
        sensitive << if31.WE0;
        sensitive << if31.CE0;
        sensitive << if31.D0;
        sensitive << if31.A0;
        sensitive << if31.WEM0;
        sensitive << if31.CE1;
        sensitive << if31.A1;
        sensitive << if31.CE2;
        sensitive << if31.A2;
        sensitive << if32.WE0;
        sensitive << if32.CE0;
        sensitive << if32.D0;
        sensitive << if32.A0;
        sensitive << if32.WEM0;
        sensitive << if32.CE1;
        sensitive << if32.A1;
        sensitive << if32.CE2;
        sensitive << if32.A2;

        SC_METHOD(gen_out_1);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_2);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_3);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_4);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_5);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_6);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_7);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_8);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_9);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_10);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_11);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_12);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_13);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_14);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_15);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_16);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_17);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_18);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_19);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_20);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_21);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_22);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_23);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_24);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_25);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_26);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_27);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_28);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_29);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_30);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_31);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;

        SC_METHOD(gen_out_32);
        sensitive << intsigs.Q1;
        sensitive << intsigs.Q2;
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

  public:

    //
    // Ports.
    //
    sc_in_clk CLK;


    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_0    if1;
    mac_plm_block_out_dma64_ext_signals_0    if2;
    mac_plm_block_out_dma64_ext_signals_0    if3;
    mac_plm_block_out_dma64_ext_signals_0    if4;
    mac_plm_block_out_dma64_ext_signals_0    if5;
    mac_plm_block_out_dma64_ext_signals_0    if6;
    mac_plm_block_out_dma64_ext_signals_0    if7;
    mac_plm_block_out_dma64_ext_signals_0    if8;
    mac_plm_block_out_dma64_ext_signals_0    if9;
    mac_plm_block_out_dma64_ext_signals_0    if10;
    mac_plm_block_out_dma64_ext_signals_0    if11;
    mac_plm_block_out_dma64_ext_signals_0    if12;
    mac_plm_block_out_dma64_ext_signals_0    if13;
    mac_plm_block_out_dma64_ext_signals_0    if14;
    mac_plm_block_out_dma64_ext_signals_0    if15;
    mac_plm_block_out_dma64_ext_signals_0    if16;
    mac_plm_block_out_dma64_ext_signals_0    if17;
    mac_plm_block_out_dma64_ext_signals_0    if18;
    mac_plm_block_out_dma64_ext_signals_0    if19;
    mac_plm_block_out_dma64_ext_signals_0    if20;
    mac_plm_block_out_dma64_ext_signals_0    if21;
    mac_plm_block_out_dma64_ext_signals_0    if22;
    mac_plm_block_out_dma64_ext_signals_0    if23;
    mac_plm_block_out_dma64_ext_signals_0    if24;
    mac_plm_block_out_dma64_ext_signals_0    if25;
    mac_plm_block_out_dma64_ext_signals_0    if26;
    mac_plm_block_out_dma64_ext_signals_0    if27;
    mac_plm_block_out_dma64_ext_signals_0    if28;
    mac_plm_block_out_dma64_ext_signals_0    if29;
    mac_plm_block_out_dma64_ext_signals_0    if30;
    mac_plm_block_out_dma64_ext_signals_0    if31;
    mac_plm_block_out_dma64_ext_signals_0    if32;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64                    model;

  public:

    mac_plm_block_out_dma64_ext_signals_0    intsigs;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
        if (if1.CE0.read() == 1) {
            intsigs.WE0 = if1.WE0;
            intsigs.CE0 = if1.CE0;
        } else if (if2.CE0.read() == 1) {
            intsigs.WE0 = if2.WE0;
            intsigs.CE0 = if2.CE0;
        } else if (if3.CE0.read() == 1) {
            intsigs.WE0 = if3.WE0;
            intsigs.CE0 = if3.CE0;
        } else if (if4.CE0.read() == 1) {
            intsigs.WE0 = if4.WE0;
            intsigs.CE0 = if4.CE0;
        } else if (if5.CE0.read() == 1) {
            intsigs.WE0 = if5.WE0;
            intsigs.CE0 = if5.CE0;
        } else if (if6.CE0.read() == 1) {
            intsigs.WE0 = if6.WE0;
            intsigs.CE0 = if6.CE0;
        } else if (if7.CE0.read() == 1) {
            intsigs.WE0 = if7.WE0;
            intsigs.CE0 = if7.CE0;
        } else if (if8.CE0.read() == 1) {
            intsigs.WE0 = if8.WE0;
            intsigs.CE0 = if8.CE0;
        } else if (if9.CE0.read() == 1) {
            intsigs.WE0 = if9.WE0;
            intsigs.CE0 = if9.CE0;
        } else if (if10.CE0.read() == 1) {
            intsigs.WE0 = if10.WE0;
            intsigs.CE0 = if10.CE0;
        } else if (if11.CE0.read() == 1) {
            intsigs.WE0 = if11.WE0;
            intsigs.CE0 = if11.CE0;
        } else if (if12.CE0.read() == 1) {
            intsigs.WE0 = if12.WE0;
            intsigs.CE0 = if12.CE0;
        } else if (if13.CE0.read() == 1) {
            intsigs.WE0 = if13.WE0;
            intsigs.CE0 = if13.CE0;
        } else if (if14.CE0.read() == 1) {
            intsigs.WE0 = if14.WE0;
            intsigs.CE0 = if14.CE0;
        } else if (if15.CE0.read() == 1) {
            intsigs.WE0 = if15.WE0;
            intsigs.CE0 = if15.CE0;
        } else if (if16.CE0.read() == 1) {
            intsigs.WE0 = if16.WE0;
            intsigs.CE0 = if16.CE0;
        } else if (if17.CE0.read() == 1) {
            intsigs.WE0 = if17.WE0;
            intsigs.CE0 = if17.CE0;
        } else if (if18.CE0.read() == 1) {
            intsigs.WE0 = if18.WE0;
            intsigs.CE0 = if18.CE0;
        } else if (if19.CE0.read() == 1) {
            intsigs.WE0 = if19.WE0;
            intsigs.CE0 = if19.CE0;
        } else if (if20.CE0.read() == 1) {
            intsigs.WE0 = if20.WE0;
            intsigs.CE0 = if20.CE0;
        } else if (if21.CE0.read() == 1) {
            intsigs.WE0 = if21.WE0;
            intsigs.CE0 = if21.CE0;
        } else if (if22.CE0.read() == 1) {
            intsigs.WE0 = if22.WE0;
            intsigs.CE0 = if22.CE0;
        } else if (if23.CE0.read() == 1) {
            intsigs.WE0 = if23.WE0;
            intsigs.CE0 = if23.CE0;
        } else if (if24.CE0.read() == 1) {
            intsigs.WE0 = if24.WE0;
            intsigs.CE0 = if24.CE0;
        } else if (if25.CE0.read() == 1) {
            intsigs.WE0 = if25.WE0;
            intsigs.CE0 = if25.CE0;
        } else if (if26.CE0.read() == 1) {
            intsigs.WE0 = if26.WE0;
            intsigs.CE0 = if26.CE0;
        } else if (if27.CE0.read() == 1) {
            intsigs.WE0 = if27.WE0;
            intsigs.CE0 = if27.CE0;
        } else if (if28.CE0.read() == 1) {
            intsigs.WE0 = if28.WE0;
            intsigs.CE0 = if28.CE0;
        } else if (if29.CE0.read() == 1) {
            intsigs.WE0 = if29.WE0;
            intsigs.CE0 = if29.CE0;
        } else if (if30.CE0.read() == 1) {
            intsigs.WE0 = if30.WE0;
            intsigs.CE0 = if30.CE0;
        } else if (if31.CE0.read() == 1) {
            intsigs.WE0 = if31.WE0;
            intsigs.CE0 = if31.CE0;
        } else if (if32.CE0.read() == 1) {
            intsigs.WE0 = if32.WE0;
            intsigs.CE0 = if32.CE0;
        } else {
            intsigs.WE0 = 0;
            intsigs.CE0 = 0;
        }
        if (if1.CE0.read() == 1) {
            intsigs.D0 = if1.D0;
            intsigs.WEM0 = if1.WEM0;
            intsigs.A0 = if1.A0;
        } else if (if2.CE0.read() == 1) {
            intsigs.D0 = if2.D0;
            intsigs.WEM0 = if2.WEM0;
            intsigs.A0 = if2.A0;
        } else if (if3.CE0.read() == 1) {
            intsigs.D0 = if3.D0;
            intsigs.WEM0 = if3.WEM0;
            intsigs.A0 = if3.A0;
        } else if (if4.CE0.read() == 1) {
            intsigs.D0 = if4.D0;
            intsigs.WEM0 = if4.WEM0;
            intsigs.A0 = if4.A0;
        } else if (if5.CE0.read() == 1) {
            intsigs.D0 = if5.D0;
            intsigs.WEM0 = if5.WEM0;
            intsigs.A0 = if5.A0;
        } else if (if6.CE0.read() == 1) {
            intsigs.D0 = if6.D0;
            intsigs.WEM0 = if6.WEM0;
            intsigs.A0 = if6.A0;
        } else if (if7.CE0.read() == 1) {
            intsigs.D0 = if7.D0;
            intsigs.WEM0 = if7.WEM0;
            intsigs.A0 = if7.A0;
        } else if (if8.CE0.read() == 1) {
            intsigs.D0 = if8.D0;
            intsigs.WEM0 = if8.WEM0;
            intsigs.A0 = if8.A0;
        } else if (if9.CE0.read() == 1) {
            intsigs.D0 = if9.D0;
            intsigs.WEM0 = if9.WEM0;
            intsigs.A0 = if9.A0;
        } else if (if10.CE0.read() == 1) {
            intsigs.D0 = if10.D0;
            intsigs.WEM0 = if10.WEM0;
            intsigs.A0 = if10.A0;
        } else if (if11.CE0.read() == 1) {
            intsigs.D0 = if11.D0;
            intsigs.WEM0 = if11.WEM0;
            intsigs.A0 = if11.A0;
        } else if (if12.CE0.read() == 1) {
            intsigs.D0 = if12.D0;
            intsigs.WEM0 = if12.WEM0;
            intsigs.A0 = if12.A0;
        } else if (if13.CE0.read() == 1) {
            intsigs.D0 = if13.D0;
            intsigs.WEM0 = if13.WEM0;
            intsigs.A0 = if13.A0;
        } else if (if14.CE0.read() == 1) {
            intsigs.D0 = if14.D0;
            intsigs.WEM0 = if14.WEM0;
            intsigs.A0 = if14.A0;
        } else if (if15.CE0.read() == 1) {
            intsigs.D0 = if15.D0;
            intsigs.WEM0 = if15.WEM0;
            intsigs.A0 = if15.A0;
        } else if (if16.CE0.read() == 1) {
            intsigs.D0 = if16.D0;
            intsigs.WEM0 = if16.WEM0;
            intsigs.A0 = if16.A0;
        } else if (if17.CE0.read() == 1) {
            intsigs.D0 = if17.D0;
            intsigs.WEM0 = if17.WEM0;
            intsigs.A0 = if17.A0;
        } else if (if18.CE0.read() == 1) {
            intsigs.D0 = if18.D0;
            intsigs.WEM0 = if18.WEM0;
            intsigs.A0 = if18.A0;
        } else if (if19.CE0.read() == 1) {
            intsigs.D0 = if19.D0;
            intsigs.WEM0 = if19.WEM0;
            intsigs.A0 = if19.A0;
        } else if (if20.CE0.read() == 1) {
            intsigs.D0 = if20.D0;
            intsigs.WEM0 = if20.WEM0;
            intsigs.A0 = if20.A0;
        } else if (if21.CE0.read() == 1) {
            intsigs.D0 = if21.D0;
            intsigs.WEM0 = if21.WEM0;
            intsigs.A0 = if21.A0;
        } else if (if22.CE0.read() == 1) {
            intsigs.D0 = if22.D0;
            intsigs.WEM0 = if22.WEM0;
            intsigs.A0 = if22.A0;
        } else if (if23.CE0.read() == 1) {
            intsigs.D0 = if23.D0;
            intsigs.WEM0 = if23.WEM0;
            intsigs.A0 = if23.A0;
        } else if (if24.CE0.read() == 1) {
            intsigs.D0 = if24.D0;
            intsigs.WEM0 = if24.WEM0;
            intsigs.A0 = if24.A0;
        } else if (if25.CE0.read() == 1) {
            intsigs.D0 = if25.D0;
            intsigs.WEM0 = if25.WEM0;
            intsigs.A0 = if25.A0;
        } else if (if26.CE0.read() == 1) {
            intsigs.D0 = if26.D0;
            intsigs.WEM0 = if26.WEM0;
            intsigs.A0 = if26.A0;
        } else if (if27.CE0.read() == 1) {
            intsigs.D0 = if27.D0;
            intsigs.WEM0 = if27.WEM0;
            intsigs.A0 = if27.A0;
        } else if (if28.CE0.read() == 1) {
            intsigs.D0 = if28.D0;
            intsigs.WEM0 = if28.WEM0;
            intsigs.A0 = if28.A0;
        } else if (if29.CE0.read() == 1) {
            intsigs.D0 = if29.D0;
            intsigs.WEM0 = if29.WEM0;
            intsigs.A0 = if29.A0;
        } else if (if30.CE0.read() == 1) {
            intsigs.D0 = if30.D0;
            intsigs.WEM0 = if30.WEM0;
            intsigs.A0 = if30.A0;
        } else if (if31.CE0.read() == 1) {
            intsigs.D0 = if31.D0;
            intsigs.WEM0 = if31.WEM0;
            intsigs.A0 = if31.A0;
        } else {
            intsigs.D0 = if32.D0;
            intsigs.WEM0 = if32.WEM0;
            intsigs.A0 = if32.A0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.CE1 = if1.CE1;
        } else if (if2.CE1.read() == 1) {
            intsigs.CE1 = if2.CE1;
        } else if (if3.CE1.read() == 1) {
            intsigs.CE1 = if3.CE1;
        } else if (if4.CE1.read() == 1) {
            intsigs.CE1 = if4.CE1;
        } else if (if5.CE1.read() == 1) {
            intsigs.CE1 = if5.CE1;
        } else if (if6.CE1.read() == 1) {
            intsigs.CE1 = if6.CE1;
        } else if (if7.CE1.read() == 1) {
            intsigs.CE1 = if7.CE1;
        } else if (if8.CE1.read() == 1) {
            intsigs.CE1 = if8.CE1;
        } else if (if9.CE1.read() == 1) {
            intsigs.CE1 = if9.CE1;
        } else if (if10.CE1.read() == 1) {
            intsigs.CE1 = if10.CE1;
        } else if (if11.CE1.read() == 1) {
            intsigs.CE1 = if11.CE1;
        } else if (if12.CE1.read() == 1) {
            intsigs.CE1 = if12.CE1;
        } else if (if13.CE1.read() == 1) {
            intsigs.CE1 = if13.CE1;
        } else if (if14.CE1.read() == 1) {
            intsigs.CE1 = if14.CE1;
        } else if (if15.CE1.read() == 1) {
            intsigs.CE1 = if15.CE1;
        } else if (if16.CE1.read() == 1) {
            intsigs.CE1 = if16.CE1;
        } else if (if17.CE1.read() == 1) {
            intsigs.CE1 = if17.CE1;
        } else if (if18.CE1.read() == 1) {
            intsigs.CE1 = if18.CE1;
        } else if (if19.CE1.read() == 1) {
            intsigs.CE1 = if19.CE1;
        } else if (if20.CE1.read() == 1) {
            intsigs.CE1 = if20.CE1;
        } else if (if21.CE1.read() == 1) {
            intsigs.CE1 = if21.CE1;
        } else if (if22.CE1.read() == 1) {
            intsigs.CE1 = if22.CE1;
        } else if (if23.CE1.read() == 1) {
            intsigs.CE1 = if23.CE1;
        } else if (if24.CE1.read() == 1) {
            intsigs.CE1 = if24.CE1;
        } else if (if25.CE1.read() == 1) {
            intsigs.CE1 = if25.CE1;
        } else if (if26.CE1.read() == 1) {
            intsigs.CE1 = if26.CE1;
        } else if (if27.CE1.read() == 1) {
            intsigs.CE1 = if27.CE1;
        } else if (if28.CE1.read() == 1) {
            intsigs.CE1 = if28.CE1;
        } else if (if29.CE1.read() == 1) {
            intsigs.CE1 = if29.CE1;
        } else if (if30.CE1.read() == 1) {
            intsigs.CE1 = if30.CE1;
        } else if (if31.CE1.read() == 1) {
            intsigs.CE1 = if31.CE1;
        } else if (if32.CE1.read() == 1) {
            intsigs.CE1 = if32.CE1;
        } else {
            intsigs.CE1 = 0;
        }
        if (if1.CE1.read() == 1) {
            intsigs.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            intsigs.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            intsigs.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            intsigs.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            intsigs.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            intsigs.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            intsigs.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            intsigs.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            intsigs.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            intsigs.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            intsigs.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            intsigs.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            intsigs.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            intsigs.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            intsigs.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            intsigs.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            intsigs.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            intsigs.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            intsigs.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            intsigs.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            intsigs.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            intsigs.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            intsigs.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            intsigs.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            intsigs.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            intsigs.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            intsigs.A1 = if27.A1;
        } else if (if28.CE1.read() == 1) {
            intsigs.A1 = if28.A1;
        } else if (if29.CE1.read() == 1) {
            intsigs.A1 = if29.A1;
        } else if (if30.CE1.read() == 1) {
            intsigs.A1 = if30.A1;
        } else if (if31.CE1.read() == 1) {
            intsigs.A1 = if31.A1;
        } else {
            intsigs.A1 = if32.A1;
        }
        if (if1.CE2.read() == 1) {
            intsigs.CE2 = if1.CE2;
        } else if (if2.CE2.read() == 1) {
            intsigs.CE2 = if2.CE2;
        } else if (if3.CE2.read() == 1) {
            intsigs.CE2 = if3.CE2;
        } else if (if4.CE2.read() == 1) {
            intsigs.CE2 = if4.CE2;
        } else if (if5.CE2.read() == 1) {
            intsigs.CE2 = if5.CE2;
        } else if (if6.CE2.read() == 1) {
            intsigs.CE2 = if6.CE2;
        } else if (if7.CE2.read() == 1) {
            intsigs.CE2 = if7.CE2;
        } else if (if8.CE2.read() == 1) {
            intsigs.CE2 = if8.CE2;
        } else if (if9.CE2.read() == 1) {
            intsigs.CE2 = if9.CE2;
        } else if (if10.CE2.read() == 1) {
            intsigs.CE2 = if10.CE2;
        } else if (if11.CE2.read() == 1) {
            intsigs.CE2 = if11.CE2;
        } else if (if12.CE2.read() == 1) {
            intsigs.CE2 = if12.CE2;
        } else if (if13.CE2.read() == 1) {
            intsigs.CE2 = if13.CE2;
        } else if (if14.CE2.read() == 1) {
            intsigs.CE2 = if14.CE2;
        } else if (if15.CE2.read() == 1) {
            intsigs.CE2 = if15.CE2;
        } else if (if16.CE2.read() == 1) {
            intsigs.CE2 = if16.CE2;
        } else if (if17.CE2.read() == 1) {
            intsigs.CE2 = if17.CE2;
        } else if (if18.CE2.read() == 1) {
            intsigs.CE2 = if18.CE2;
        } else if (if19.CE2.read() == 1) {
            intsigs.CE2 = if19.CE2;
        } else if (if20.CE2.read() == 1) {
            intsigs.CE2 = if20.CE2;
        } else if (if21.CE2.read() == 1) {
            intsigs.CE2 = if21.CE2;
        } else if (if22.CE2.read() == 1) {
            intsigs.CE2 = if22.CE2;
        } else if (if23.CE2.read() == 1) {
            intsigs.CE2 = if23.CE2;
        } else if (if24.CE2.read() == 1) {
            intsigs.CE2 = if24.CE2;
        } else if (if25.CE2.read() == 1) {
            intsigs.CE2 = if25.CE2;
        } else if (if26.CE2.read() == 1) {
            intsigs.CE2 = if26.CE2;
        } else if (if27.CE2.read() == 1) {
            intsigs.CE2 = if27.CE2;
        } else if (if28.CE2.read() == 1) {
            intsigs.CE2 = if28.CE2;
        } else if (if29.CE2.read() == 1) {
            intsigs.CE2 = if29.CE2;
        } else if (if30.CE2.read() == 1) {
            intsigs.CE2 = if30.CE2;
        } else if (if31.CE2.read() == 1) {
            intsigs.CE2 = if31.CE2;
        } else if (if32.CE2.read() == 1) {
            intsigs.CE2 = if32.CE2;
        } else {
            intsigs.CE2 = 0;
        }
        if (if1.CE2.read() == 1) {
            intsigs.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            intsigs.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            intsigs.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            intsigs.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            intsigs.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            intsigs.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            intsigs.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            intsigs.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            intsigs.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            intsigs.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            intsigs.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            intsigs.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            intsigs.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            intsigs.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            intsigs.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            intsigs.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            intsigs.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            intsigs.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            intsigs.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            intsigs.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            intsigs.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            intsigs.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            intsigs.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            intsigs.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            intsigs.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            intsigs.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            intsigs.A2 = if27.A2;
        } else if (if28.CE2.read() == 1) {
            intsigs.A2 = if28.A2;
        } else if (if29.CE2.read() == 1) {
            intsigs.A2 = if29.A2;
        } else if (if30.CE2.read() == 1) {
            intsigs.A2 = if30.A2;
        } else if (if31.CE2.read() == 1) {
            intsigs.A2 = if31.A2;
        } else {
            intsigs.A2 = if32.A2;
        }

    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = intsigs.Q1;
        if1.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = intsigs.Q1;
        if2.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = intsigs.Q1;
        if3.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = intsigs.Q1;
        if4.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = intsigs.Q1;
        if5.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = intsigs.Q1;
        if6.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = intsigs.Q1;
        if7.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = intsigs.Q1;
        if8.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = intsigs.Q1;
        if9.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = intsigs.Q1;
        if10.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = intsigs.Q1;
        if11.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = intsigs.Q1;
        if12.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = intsigs.Q1;
        if13.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = intsigs.Q1;
        if14.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = intsigs.Q1;
        if15.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = intsigs.Q1;
        if16.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = intsigs.Q1;
        if17.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = intsigs.Q1;
        if18.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = intsigs.Q1;
        if19.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = intsigs.Q1;
        if20.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = intsigs.Q1;
        if21.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = intsigs.Q1;
        if22.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = intsigs.Q1;
        if23.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = intsigs.Q1;
        if24.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = intsigs.Q1;
        if25.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = intsigs.Q1;
        if26.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = intsigs.Q1;
        if27.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q1 = intsigs.Q1;
        if28.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q1 = intsigs.Q1;
        if29.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if30
    //
    void gen_out_30()
    {
        if30.Q1 = intsigs.Q1;
        if30.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if31
    //
    void gen_out_31()
    {
        if31.Q1 = intsigs.Q1;
        if31.Q2 = intsigs.Q2;
    }


    //
    // Method to transfer memory output to if32
    //
    void gen_out_32()
    {
        if32.Q1 = intsigs.Q1;
        if32.Q2 = intsigs.Q2;
    }

};

#if !defined(STRATUS_VLG)
//
// PIN-level metaport for hierarchical binding to all memory ports.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port
  : public mac_plm_block_out_dma64::types<HLS_L>
  , public cynw_clk_rst_facade
{
  public:
    HLS_METAPORT;
    typedef mac_plm_block_out_dma64::port<HLS_L,HLS_ACCESS,HLS_MAPPING>            this_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS, HLS_MAPPING > ref_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;

    port( 
		const char* in_name=sc_gen_unique_name("port") )
    {
        p_name = new char[strlen(in_name)+1];
        strcpy(p_name,in_name);
	}

    ~port()
    {
        delete p_name;
    }

  public:
	char* p_name;

	const char* name() { return p_name; }


    void bind( this_type& p )
    {
        this->WE0(p.WE0);
        this->CE0(p.CE0);
        this->D0(p.D0);
        this->A0(p.A0);
        this->WEM0(p.WEM0);
        this->CE1(p.CE1);
        this->Q1(p.Q1);
        this->A1(p.A1);
        this->CE2(p.CE2);
        this->Q2(p.Q2);
        this->A2(p.A2);

    }

    void bind( mac_plm_block_out_dma64_ext_signals_0& s )
    {
        this->WE0(s.WE0);
        this->CE0(s.CE0);
        this->D0(s.D0);
        this->A0(s.A0);
        this->WEM0(s.WEM0);
        this->CE1(s.CE1);
        this->Q1(s.Q1);
        this->A1(s.A1);
        this->CE2(s.CE2);
        this->Q2(s.Q2);
        this->A2(s.A2);

    }

    void bind( mac_plm_block_out_dma64::wrapper<HLS_L>& w )
    {
        this->WE0(w.if1.WE0);
        this->CE0(w.if1.CE0);
        this->D0(w.if1.D0);
        this->A0(w.if1.A0);
        this->WEM0(w.if1.WEM0);
        this->CE1(w.if2.CE1);
        this->Q1(w.if2.Q1);
        this->A1(w.if2.A1);
        this->CE2(w.if3.CE2);
        this->Q2(w.if3.Q2);
        this->A2(w.if3.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	public:

   sc_out< bool > WE0;
   sc_out< bool > CE0;
   sc_out< sc_uint<32> > D0;
   sc_out< sc_uint<7> > A0;
   sc_out< sc_uint<32> > WEM0;
 
   sc_out< bool > CE1;
   sc_in< sc_uint<32> > Q1;
   sc_out< sc_uint<7> > A1;
 
   sc_out< bool > CE2;
   sc_in< sc_uint<32> > Q2;
   sc_out< sc_uint<7> > A2;
 
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level export metaport.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L>
class mac_plm_block_out_dma64::ex_port
  : public mac_plm_block_out_dma64::types<HLS_L>
{
  public:
    HLS_METAPORT;
    typedef mac_plm_block_out_dma64::ex_port<HLS_L>            this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    ex_port( const char* in_name=sc_gen_unique_name("ex_port") )
    {}

  public:


    template <class W>
    void bind( W& iface )
    {
        WE0(iface.WE0);
        CE0(iface.CE0);
        D0(iface.D0);
        A0(iface.A0);
        WEM0(iface.WEM0);
        CE1(iface.CE1);
        Q1(iface.Q1);
        A1(iface.A1);
        CE2(iface.CE2);
        Q2(iface.Q2);
        A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

  public:

   sc_export< sc_signal_out_if< bool > > WE0;
   sc_export< sc_signal_out_if< bool > > CE0;
   sc_export< sc_signal_out_if< sc_uint<32> > > D0;
   sc_export< sc_signal_out_if< sc_uint<7> > > A0;
   sc_export< sc_signal_out_if< sc_uint<32> > > WEM0;
 
   sc_export< sc_signal_out_if< bool > > CE1;
   sc_export< sc_signal_in_if< sc_uint<32> > > Q1;
   sc_export< sc_signal_out_if< sc_uint<7> > > A1;
 
   sc_export< sc_signal_out_if< bool > > CE2;
   sc_export< sc_signal_in_if< sc_uint<32> > > Q2;
   sc_export< sc_signal_out_if< sc_uint<7> > > A2;
 
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level metaport.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1
  : public mac_plm_block_out_dma64::types<HLS_L>
  , public cynw_clk_rst_facade
{
  public:
    HLS_METAPORT;
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>            this_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS, HLS_MAPPING > ref_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef sc_uint<32>         mask_type;
    class shared_2;
    class shared_3;
    class shared_4;
    class shared_5;
    class shared_6;
    class shared_7;
    class shared_8;
    class shared_9;
    class shared_10;
    class shared_11;
    class shared_12;
    class shared_13;
    class shared_14;
    class shared_15;
    class shared_16;
    class shared_17;
    class shared_18;
    class shared_19;
    class shared_20;
    class shared_21;
    class shared_22;
    class shared_23;
    class shared_24;
    class shared_25;
    class shared_26;
    class shared_27;
    class shared_28;
    class shared_29;
    class shared_30;
    class shared_31;
    class shared_32;

    port_1( 
		const char* in_name=sc_gen_unique_name("port_1"),
		  unsigned options_in=0)
        : m_options(options_in|HLS_DEF_CHAIN_MEM_IO | HLS_DEF_NO_SPEC_READS), 
          WE0( HLS_CAT_NAMES(in_name,"WE0") ),
        CE0( HLS_CAT_NAMES(in_name,"CE0") ),
        D0( HLS_CAT_NAMES(in_name,"D0") ),
        A0( HLS_CAT_NAMES(in_name,"A0") ),
        WEM0( HLS_CAT_NAMES(in_name,"WEM0") ),
          m_reset_done(false)
    {
        p_name = new char[strlen(in_name)+1];
        strcpy(p_name,in_name);
#if !STRATUS
        m_tx_stream = 0;
#endif
        m_stream_name = (std::string("sc_main.") + std::string(::sc_core::sc_get_curr_simcontext()->hierarchy_curr()->name()) + std::string(".") + std::string(in_name));
    }

    ~port_1()
    {
        delete p_name;
	}

    CYNW_MEM_SQUARE_BRACKETS( ref_type )
  public:
	char* p_name;
	bool m_reset_done;

	const char* name() { return p_name; }

    cynw_scv_memory_tx_stream< address_type, data_type >* tx_stream()
    {
#if !STRATUS
      if (m_tx_stream == 0) {
        esc_enable_scv_logging();
        m_tx_stream = new cynw_scv_memory_tx_stream< address_type, data_type >( m_stream_name.c_str(), esc_get_scv_tr_db() );
	  }
      return m_tx_stream;
#else
      return 0;
#endif
    }

    data_type get( const address_type& address )
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        printf("WARNING: %s: Attempting to read from a write-only memory port\n", name());
#endif
        data_type rslt;
        return rslt;
    }
    void nb_put( const address_type& address, const data_type& data, const mask_type mask )
    {
        this->CE0 = 1;
        this->WE0 = 1;
        this->WEM0 = mask;
        this->A0 = address;
        this->D0 = data;
    }
    void put( const address_type& address, const data_type& data, mask_type mask )
    {
        HLS_DEFINE_FLOATING_PROTOCOL( 0.06, 0.0, 1, this, this->m_options|HLS::HLS_MEM_WRITE_FP|HLS::HLS_USING_REG_EX_PORT, address, "mem_write" );
        HLS_SET_OUTPUT_OPTIONS(this->D0,ASYNC_POWER_HOLD);
        HLS_SET_OUTPUT_OPTIONS(this->A0,ASYNC_POWER_HOLD);
        this->check_reset();
        cynw_scv_memory_tx< address_type, data_type > tx = this->tx_stream()->begin_write_tx( address, data );
        nb_put(address,data,mask);
        ::wait(1);
        nb_deassert();
        this->tx_stream()->end_write_tx( tx );
    }
    void nb_put( const address_type& address, const data_type& data )
    {
        nb_put(address, data, ~0);
    }
    void put( const address_type& address, const data_type& data )
    {
        put(address, data, ~0);
    }
    void reset( bool control_only=true )
    {
        HLS_DEFINE_PROTOCOL("reset");
        this->m_reset_done = true;
        this->WE0 = 0;
        if (!control_only) this->WEM0 = 0;
        this->CE0 = 0;
        if (!control_only) this->A0 = 0;
        if (!control_only) this->D0 = 0;
        HLS_SUPPRESS_MSG_SYM( 1435, this->A0 );
        HLS_SUPPRESS_MSG_SYM( 1435, this->D0 );
        HLS_SET_STALL_VALUE( this->CE0, 0);
    }

    void nb_deassert()
    {
        this->m_reset_done = true;
        this->WE0 = 0;
        this->WEM0 = 0;
        this->CE0 = 0;
    }

    void check_reset()
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        if (!m_reset_done)
        {
            printf("WARNING: Access to external memory port '%s' before calling reset()\n", name());
            m_reset_done = true;
        }
#endif
    }

    template <class W>
    void bind( W& iface )
    {
        this->WE0(iface.WE0);
        this->CE0(iface.CE0);
        this->D0(iface.D0);
        this->A0(iface.A0);
        this->WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

  public:
	unsigned m_options;
#if !STRATUS
    cynw_scv_memory_tx_stream< address_type, data_type >* m_tx_stream;
#endif
	std::string m_stream_name;

   sc_out< bool > WE0;
   sc_out< bool > CE0;
   sc_out< sc_uint<32> > D0;
   sc_out< sc_uint<7> > A0;
   sc_out< sc_uint<32> > WEM0;
 
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level export metaport.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L>
class mac_plm_block_out_dma64::ex_port_1
  : public mac_plm_block_out_dma64::types<HLS_L>
{
  public:
    HLS_METAPORT;
    typedef mac_plm_block_out_dma64::ex_port_1<HLS_L>            this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    ex_port_1( const char* in_name=sc_gen_unique_name("ex_port_1") )
        : WE0( HLS_CAT_NAMES(in_name,"WE0") ),
        CE0( HLS_CAT_NAMES(in_name,"CE0") ),
        D0( HLS_CAT_NAMES(in_name,"D0") ),
        A0( HLS_CAT_NAMES(in_name,"A0") ),
        WEM0( HLS_CAT_NAMES(in_name,"WEM0") )
    {}

  public:


    template <class W>
    void bind( W& iface )
    {
        WE0(iface.WE0);
        CE0(iface.CE0);
        D0(iface.D0);
        A0(iface.A0);
        WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

  public:

   sc_export< sc_signal_out_if< bool > > WE0;
   sc_export< sc_signal_out_if< bool > > CE0;
   sc_export< sc_signal_out_if< sc_uint<32> > > D0;
   sc_export< sc_signal_out_if< sc_uint<7> > > A0;
   sc_export< sc_signal_out_if< sc_uint<32> > > WEM0;
 
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level export metaport with a register included.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L>
class mac_plm_block_out_dma64::reg_ex_port_1
  : public mac_plm_block_out_dma64::ex_port_1<HLS_L>,
	public sc_module,
	public cynw_clk_rst

{
  public:
    typedef mac_plm_block_out_dma64::reg_ex_port_1<HLS_L>            this_type;
    typedef mac_plm_block_out_dma64::ex_port_1<HLS_L>            base_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    SC_HAS_PROCESS(this_type);

    reg_ex_port_1( sc_module_name in_name=sc_module_name( sc_gen_unique_name("reg_ex_port_1") ) )
        : base_type(in_name)
		, sc_module(in_name)
		, WE0_reg( HLS_CAT_NAMES(in_name,"WE0_reg") ),
        CE0_reg( HLS_CAT_NAMES(in_name,"CE0_reg") ),
        D0_reg( HLS_CAT_NAMES(in_name,"D0_reg") ),
        A0_reg( HLS_CAT_NAMES(in_name,"A0_reg") ),
        WEM0_reg( HLS_CAT_NAMES(in_name,"WEM0_reg") )
		, WE0_p( HLS_CAT_NAMES(in_name,"WE0_p") ),
        CE0_p( HLS_CAT_NAMES(in_name,"CE0_p") ),
        D0_p( HLS_CAT_NAMES(in_name,"D0_p") ),
        A0_p( HLS_CAT_NAMES(in_name,"A0_p") ),
        WEM0_p( HLS_CAT_NAMES(in_name,"WEM0_p") )
    {
        this->WE0(WE0_reg);
        this->CE0(CE0_reg);
        this->D0(D0_reg);
        this->A0(A0_reg);
        this->WEM0(WEM0_reg);


        SC_METHOD(do_reg);
        sensitive << clk.pos();
        dont_initialize();

	}

  public:


    template <class W>
    void bind( W& iface )
    {
        WE0_p(iface.WE0);
        CE0_p(iface.CE0);
        D0_p(iface.D0);
        A0_p(iface.A0);
        WEM0_p(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

    void do_reg()
    {
        if ( rst_active() ) 
        {
	         HLS_SET_IS_RESET_BLOCK("do_reg");
            WE0_p = 0;
            WEM0_p = 0;
            CE0_p = 0;
        } else {
            WE0_p.write( WE0_reg.read() );
            CE0_p.write( CE0_reg.read() );
            WEM0_p.write( WEM0_reg.read() );
            D0_p.write( D0_reg.read() );
            A0_p.write( A0_reg.read() );

        }
    }
  public:

        sc_signal< bool > WE0_reg;
        sc_signal< bool > CE0_reg;
        sc_signal< sc_uint<32> > D0_reg;
        sc_signal< sc_uint<7> > A0_reg;
        sc_signal< sc_uint<32> > WEM0_reg;
        sc_out< bool > WE0_p;
        sc_out< bool > CE0_p;
        sc_out< sc_uint<32> > D0_p;
        sc_out< sc_uint<7> > A0_p;
        sc_out< sc_uint<32> > WEM0_p;
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level metaport with stalling support.
// Since this is a write-only port, no stalling support is required.
//
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::stall_port_1
  : public mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>
{
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>       base_type;

    stall_port_1( const char* in_name=sc_gen_unique_name("port_1"), unsigned options_in=0 )
      : base_type(in_name,options_in)
    {}
};
#endif

#if !defined(STRATUS_VLG)
//
// PIN-level metaport with an explicit register on DOUT support.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::reg_port_1
  : public mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>,
    public sc_module,
    public cynw_clk_rst
{
  public:
    typedef mac_plm_block_out_dma64::reg_port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>       this_type;
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>       base_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS, HLS_MAPPING > ref_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef sc_uint<32>           mask_type;

    SC_HAS_PROCESS(this_type);

    HLS_EXPOSE_PORT( OFF, clk );
    HLS_EXPOSE_PORT( OFF, rst );

    reg_port_1( 
	  sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1") ), 
	  unsigned options_in=0 )
      : sc_module(in_name)
	  ,	cynw_clk_rst(in_name)
	  ,	base_type(in_name,options_in|HLS_DEF_CHAIN_MEM_IO | HLS_DEF_NO_SPEC_READS)
    {

	  SC_METHOD(do_reg_c);
      sensitive << clk.pos();
      dont_initialize();

	  SC_METHOD(do_reg_din);
      sensitive << clk.pos();
      dont_initialize();

    }

    CYNW_MEM_SQUARE_BRACKETS( ref_type )

	CYNW_CLK_RST_FUNCS

  public:
    data_type get( const address_type& address )
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        printf("WARNING: %s: Attempting to read from a write-only memory port\n", name());
#endif
        data_type rslt;
        return rslt;
    }
    void nb_put( const address_type& address, const data_type& data, const mask_type mask )
    {
        this->if_inner.CE0 = 1;
        this->if_inner.WE0 = 1;
        this->if_inner.WEM0 = mask;
        this->if_inner.A0 = address;
        this->if_inner.D0 = data;
    }
    void put( const address_type& address, const data_type& data, mask_type mask )
    {
        HLS_DEFINE_FLOATING_PROTOCOL( HLS_REG_SETUP_TIME, 0.0, 1, this, this->m_options|HLS::HLS_MEM_WRITE_FP|HLS::HLS_USING_REG_EX_PORT, address, "mem_write" );
        HLS_SET_OUTPUT_OPTIONS(this->if_inner.D0,ASYNC_POWER_HOLD);
        HLS_SET_OUTPUT_OPTIONS(this->if_inner.A0,ASYNC_POWER_HOLD);
        this->check_reset();
        cynw_scv_memory_tx< address_type, data_type > tx = this->tx_stream()->begin_write_tx( address, data );
        nb_put(address,data,mask);
        ::wait(1);
        nb_deassert();
        this->tx_stream()->end_write_tx( tx );
    }
    void nb_put( const address_type& address, const data_type& data )
    {
        nb_put(address, data, ~0);
    }
    void put( const address_type& address, const data_type& data )
    {
        put(address, data, ~0);
    }
    void reset( bool control_only=true )
    {
        HLS_DEFINE_PROTOCOL("reset");
        this->m_reset_done = true;
        this->if_inner.WE0 = 0;
        if (!control_only) this->if_inner.WEM0 = 0;
        this->if_inner.CE0 = 0;
        if (!control_only) this->if_inner.A0 = 0;
        if (!control_only) this->if_inner.D0 = 0;
        HLS_SUPPRESS_MSG_SYM( 1435, this->if_inner.A0 );
        HLS_SUPPRESS_MSG_SYM( 1435, this->if_inner.D0 );
        HLS_SET_STALL_VALUE( this->if_inner.CE0, 0);
    }

    void nb_deassert()
    {
        this->m_reset_done = true;
        this->if_inner.WE0 = 0;
        this->if_inner.WEM0 = 0;
        this->if_inner.CE0 = 0;
    }

    template <class W>
    void bind( W& iface )
    {
        this->WE0(iface.WE0);
        this->CE0(iface.CE0);
        this->D0(iface.D0);
        this->A0(iface.A0);
        this->WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }
    mac_plm_block_out_dma64_ext_signals_1    if_inner;

    void do_reg_c()
    {
        if ( rst_active() ) 
        {
            HLS_SET_IS_RESET_BLOCK("do_reg_c");
            this->WE0 = 0;
            this->WEM0 = 0;
            this->CE0 = 0;
        } else {
            this->WE0.write( if_inner.WE0.read() );
            this->CE0.write( if_inner.CE0.read() );
            this->WEM0.write( if_inner.WEM0.read() );

        }
    }

    void do_reg_din()
    {
	bool rst = rst_active(); 
         if ( if_inner.CE0.read() == 1 ) {
             HLS_REMOVE_CONTROL(OFF,"");
            this->D0.write( if_inner.D0.read() );
            this->A0.write( if_inner.A0.read() );
         }

    }

};
#endif

#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_2 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_2                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_2);
    shared_2( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_2") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_3 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_3                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_3);
    shared_3( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_3") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_4 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_4                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_4);
    shared_4( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_4") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_5 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_5                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_5);
    shared_5( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_5") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_6 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_6                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_6);
    shared_6( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_6") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_7 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_7                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_7);
    shared_7( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_7") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_8 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_8                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_8);
    shared_8( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_8") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_9 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_9                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_9);
    shared_9( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_9") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_10 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_10                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_10);
    shared_10( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_10") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_11 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_11                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_11);
    shared_11( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_11") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_12 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_12                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_12);
    shared_12( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_12") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_13 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_13                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_13);
    shared_13( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_13") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_14 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_14                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_14);
    shared_14( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_14") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_15 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_15                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_15);
    shared_15( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_15") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_16 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_16                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_16);
    shared_16( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_16") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_17 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_17                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_17);
    shared_17( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_17") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_18 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_18                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_18);
    shared_18( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_18") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_19 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_19                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_19);
    shared_19( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_19") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_20 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_20                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_20);
    shared_20( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_20") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_21 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_21                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_21);
    shared_21( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_21") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_22 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_22                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_22);
    shared_22( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_22") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_23 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_23                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_23);
    shared_23( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_23") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;
    mac_plm_block_out_dma64_ext_signals_1    if23;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else if (if23.CE0.read() == 1) {
            m_port.WE0 = if23.WE0;
            m_port.CE0 = if23.CE0;
            m_port.D0 = if23.D0;
            m_port.A0 = if23.A0;
            m_port.WEM0 = if23.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_24 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_24                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_24);
    shared_24( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_24") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;
    mac_plm_block_out_dma64_ext_signals_1    if23;
    mac_plm_block_out_dma64_ext_signals_1    if24;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else if (if23.CE0.read() == 1) {
            m_port.WE0 = if23.WE0;
            m_port.CE0 = if23.CE0;
            m_port.D0 = if23.D0;
            m_port.A0 = if23.A0;
            m_port.WEM0 = if23.WEM0;
        } else if (if24.CE0.read() == 1) {
            m_port.WE0 = if24.WE0;
            m_port.CE0 = if24.CE0;
            m_port.D0 = if24.D0;
            m_port.A0 = if24.A0;
            m_port.WEM0 = if24.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_25 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_25                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_25);
    shared_25( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_25") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;
    mac_plm_block_out_dma64_ext_signals_1    if23;
    mac_plm_block_out_dma64_ext_signals_1    if24;
    mac_plm_block_out_dma64_ext_signals_1    if25;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else if (if23.CE0.read() == 1) {
            m_port.WE0 = if23.WE0;
            m_port.CE0 = if23.CE0;
            m_port.D0 = if23.D0;
            m_port.A0 = if23.A0;
            m_port.WEM0 = if23.WEM0;
        } else if (if24.CE0.read() == 1) {
            m_port.WE0 = if24.WE0;
            m_port.CE0 = if24.CE0;
            m_port.D0 = if24.D0;
            m_port.A0 = if24.A0;
            m_port.WEM0 = if24.WEM0;
        } else if (if25.CE0.read() == 1) {
            m_port.WE0 = if25.WE0;
            m_port.CE0 = if25.CE0;
            m_port.D0 = if25.D0;
            m_port.A0 = if25.A0;
            m_port.WEM0 = if25.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_26 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_26                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_26);
    shared_26( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_26") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;
    mac_plm_block_out_dma64_ext_signals_1    if23;
    mac_plm_block_out_dma64_ext_signals_1    if24;
    mac_plm_block_out_dma64_ext_signals_1    if25;
    mac_plm_block_out_dma64_ext_signals_1    if26;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else if (if23.CE0.read() == 1) {
            m_port.WE0 = if23.WE0;
            m_port.CE0 = if23.CE0;
            m_port.D0 = if23.D0;
            m_port.A0 = if23.A0;
            m_port.WEM0 = if23.WEM0;
        } else if (if24.CE0.read() == 1) {
            m_port.WE0 = if24.WE0;
            m_port.CE0 = if24.CE0;
            m_port.D0 = if24.D0;
            m_port.A0 = if24.A0;
            m_port.WEM0 = if24.WEM0;
        } else if (if25.CE0.read() == 1) {
            m_port.WE0 = if25.WE0;
            m_port.CE0 = if25.CE0;
            m_port.D0 = if25.D0;
            m_port.A0 = if25.A0;
            m_port.WEM0 = if25.WEM0;
        } else if (if26.CE0.read() == 1) {
            m_port.WE0 = if26.WE0;
            m_port.CE0 = if26.CE0;
            m_port.D0 = if26.D0;
            m_port.A0 = if26.A0;
            m_port.WEM0 = if26.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_27 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_27                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_27);
    shared_27( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_27") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;
    mac_plm_block_out_dma64_ext_signals_1    if23;
    mac_plm_block_out_dma64_ext_signals_1    if24;
    mac_plm_block_out_dma64_ext_signals_1    if25;
    mac_plm_block_out_dma64_ext_signals_1    if26;
    mac_plm_block_out_dma64_ext_signals_1    if27;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else if (if23.CE0.read() == 1) {
            m_port.WE0 = if23.WE0;
            m_port.CE0 = if23.CE0;
            m_port.D0 = if23.D0;
            m_port.A0 = if23.A0;
            m_port.WEM0 = if23.WEM0;
        } else if (if24.CE0.read() == 1) {
            m_port.WE0 = if24.WE0;
            m_port.CE0 = if24.CE0;
            m_port.D0 = if24.D0;
            m_port.A0 = if24.A0;
            m_port.WEM0 = if24.WEM0;
        } else if (if25.CE0.read() == 1) {
            m_port.WE0 = if25.WE0;
            m_port.CE0 = if25.CE0;
            m_port.D0 = if25.D0;
            m_port.A0 = if25.A0;
            m_port.WEM0 = if25.WEM0;
        } else if (if26.CE0.read() == 1) {
            m_port.WE0 = if26.WE0;
            m_port.CE0 = if26.CE0;
            m_port.D0 = if26.D0;
            m_port.A0 = if26.A0;
            m_port.WEM0 = if26.WEM0;
        } else if (if27.CE0.read() == 1) {
            m_port.WE0 = if27.WE0;
            m_port.CE0 = if27.CE0;
            m_port.D0 = if27.D0;
            m_port.A0 = if27.A0;
            m_port.WEM0 = if27.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_28 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_28                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_28);
    shared_28( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_28") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if28.WE0;
        sensitive << if28.CE0;
        sensitive << if28.D0;
        sensitive << if28.A0;
        sensitive << if28.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;
    mac_plm_block_out_dma64_ext_signals_1    if23;
    mac_plm_block_out_dma64_ext_signals_1    if24;
    mac_plm_block_out_dma64_ext_signals_1    if25;
    mac_plm_block_out_dma64_ext_signals_1    if26;
    mac_plm_block_out_dma64_ext_signals_1    if27;
    mac_plm_block_out_dma64_ext_signals_1    if28;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else if (if23.CE0.read() == 1) {
            m_port.WE0 = if23.WE0;
            m_port.CE0 = if23.CE0;
            m_port.D0 = if23.D0;
            m_port.A0 = if23.A0;
            m_port.WEM0 = if23.WEM0;
        } else if (if24.CE0.read() == 1) {
            m_port.WE0 = if24.WE0;
            m_port.CE0 = if24.CE0;
            m_port.D0 = if24.D0;
            m_port.A0 = if24.A0;
            m_port.WEM0 = if24.WEM0;
        } else if (if25.CE0.read() == 1) {
            m_port.WE0 = if25.WE0;
            m_port.CE0 = if25.CE0;
            m_port.D0 = if25.D0;
            m_port.A0 = if25.A0;
            m_port.WEM0 = if25.WEM0;
        } else if (if26.CE0.read() == 1) {
            m_port.WE0 = if26.WE0;
            m_port.CE0 = if26.CE0;
            m_port.D0 = if26.D0;
            m_port.A0 = if26.A0;
            m_port.WEM0 = if26.WEM0;
        } else if (if27.CE0.read() == 1) {
            m_port.WE0 = if27.WE0;
            m_port.CE0 = if27.CE0;
            m_port.D0 = if27.D0;
            m_port.A0 = if27.A0;
            m_port.WEM0 = if27.WEM0;
        } else if (if28.CE0.read() == 1) {
            m_port.WE0 = if28.WE0;
            m_port.CE0 = if28.CE0;
            m_port.D0 = if28.D0;
            m_port.A0 = if28.A0;
            m_port.WEM0 = if28.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_29 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_29                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_29);
    shared_29( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_29") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if28.WE0;
        sensitive << if28.CE0;
        sensitive << if28.D0;
        sensitive << if28.A0;
        sensitive << if28.WEM0;
        sensitive << if29.WE0;
        sensitive << if29.CE0;
        sensitive << if29.D0;
        sensitive << if29.A0;
        sensitive << if29.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;
    mac_plm_block_out_dma64_ext_signals_1    if23;
    mac_plm_block_out_dma64_ext_signals_1    if24;
    mac_plm_block_out_dma64_ext_signals_1    if25;
    mac_plm_block_out_dma64_ext_signals_1    if26;
    mac_plm_block_out_dma64_ext_signals_1    if27;
    mac_plm_block_out_dma64_ext_signals_1    if28;
    mac_plm_block_out_dma64_ext_signals_1    if29;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else if (if23.CE0.read() == 1) {
            m_port.WE0 = if23.WE0;
            m_port.CE0 = if23.CE0;
            m_port.D0 = if23.D0;
            m_port.A0 = if23.A0;
            m_port.WEM0 = if23.WEM0;
        } else if (if24.CE0.read() == 1) {
            m_port.WE0 = if24.WE0;
            m_port.CE0 = if24.CE0;
            m_port.D0 = if24.D0;
            m_port.A0 = if24.A0;
            m_port.WEM0 = if24.WEM0;
        } else if (if25.CE0.read() == 1) {
            m_port.WE0 = if25.WE0;
            m_port.CE0 = if25.CE0;
            m_port.D0 = if25.D0;
            m_port.A0 = if25.A0;
            m_port.WEM0 = if25.WEM0;
        } else if (if26.CE0.read() == 1) {
            m_port.WE0 = if26.WE0;
            m_port.CE0 = if26.CE0;
            m_port.D0 = if26.D0;
            m_port.A0 = if26.A0;
            m_port.WEM0 = if26.WEM0;
        } else if (if27.CE0.read() == 1) {
            m_port.WE0 = if27.WE0;
            m_port.CE0 = if27.CE0;
            m_port.D0 = if27.D0;
            m_port.A0 = if27.A0;
            m_port.WEM0 = if27.WEM0;
        } else if (if28.CE0.read() == 1) {
            m_port.WE0 = if28.WE0;
            m_port.CE0 = if28.CE0;
            m_port.D0 = if28.D0;
            m_port.A0 = if28.A0;
            m_port.WEM0 = if28.WEM0;
        } else if (if29.CE0.read() == 1) {
            m_port.WE0 = if29.WE0;
            m_port.CE0 = if29.CE0;
            m_port.D0 = if29.D0;
            m_port.A0 = if29.A0;
            m_port.WEM0 = if29.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_30 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_30                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_30);
    shared_30( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_30") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if28.WE0;
        sensitive << if28.CE0;
        sensitive << if28.D0;
        sensitive << if28.A0;
        sensitive << if28.WEM0;
        sensitive << if29.WE0;
        sensitive << if29.CE0;
        sensitive << if29.D0;
        sensitive << if29.A0;
        sensitive << if29.WEM0;
        sensitive << if30.WE0;
        sensitive << if30.CE0;
        sensitive << if30.D0;
        sensitive << if30.A0;
        sensitive << if30.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;
    mac_plm_block_out_dma64_ext_signals_1    if23;
    mac_plm_block_out_dma64_ext_signals_1    if24;
    mac_plm_block_out_dma64_ext_signals_1    if25;
    mac_plm_block_out_dma64_ext_signals_1    if26;
    mac_plm_block_out_dma64_ext_signals_1    if27;
    mac_plm_block_out_dma64_ext_signals_1    if28;
    mac_plm_block_out_dma64_ext_signals_1    if29;
    mac_plm_block_out_dma64_ext_signals_1    if30;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else if (if23.CE0.read() == 1) {
            m_port.WE0 = if23.WE0;
            m_port.CE0 = if23.CE0;
            m_port.D0 = if23.D0;
            m_port.A0 = if23.A0;
            m_port.WEM0 = if23.WEM0;
        } else if (if24.CE0.read() == 1) {
            m_port.WE0 = if24.WE0;
            m_port.CE0 = if24.CE0;
            m_port.D0 = if24.D0;
            m_port.A0 = if24.A0;
            m_port.WEM0 = if24.WEM0;
        } else if (if25.CE0.read() == 1) {
            m_port.WE0 = if25.WE0;
            m_port.CE0 = if25.CE0;
            m_port.D0 = if25.D0;
            m_port.A0 = if25.A0;
            m_port.WEM0 = if25.WEM0;
        } else if (if26.CE0.read() == 1) {
            m_port.WE0 = if26.WE0;
            m_port.CE0 = if26.CE0;
            m_port.D0 = if26.D0;
            m_port.A0 = if26.A0;
            m_port.WEM0 = if26.WEM0;
        } else if (if27.CE0.read() == 1) {
            m_port.WE0 = if27.WE0;
            m_port.CE0 = if27.CE0;
            m_port.D0 = if27.D0;
            m_port.A0 = if27.A0;
            m_port.WEM0 = if27.WEM0;
        } else if (if28.CE0.read() == 1) {
            m_port.WE0 = if28.WE0;
            m_port.CE0 = if28.CE0;
            m_port.D0 = if28.D0;
            m_port.A0 = if28.A0;
            m_port.WEM0 = if28.WEM0;
        } else if (if29.CE0.read() == 1) {
            m_port.WE0 = if29.WE0;
            m_port.CE0 = if29.CE0;
            m_port.D0 = if29.D0;
            m_port.A0 = if29.A0;
            m_port.WEM0 = if29.WEM0;
        } else if (if30.CE0.read() == 1) {
            m_port.WE0 = if30.WE0;
            m_port.CE0 = if30.CE0;
            m_port.D0 = if30.D0;
            m_port.A0 = if30.A0;
            m_port.WEM0 = if30.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_31 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_31                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_31);
    shared_31( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_31") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if28.WE0;
        sensitive << if28.CE0;
        sensitive << if28.D0;
        sensitive << if28.A0;
        sensitive << if28.WEM0;
        sensitive << if29.WE0;
        sensitive << if29.CE0;
        sensitive << if29.D0;
        sensitive << if29.A0;
        sensitive << if29.WEM0;
        sensitive << if30.WE0;
        sensitive << if30.CE0;
        sensitive << if30.D0;
        sensitive << if30.A0;
        sensitive << if30.WEM0;
        sensitive << if31.WE0;
        sensitive << if31.CE0;
        sensitive << if31.D0;
        sensitive << if31.A0;
        sensitive << if31.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;
    mac_plm_block_out_dma64_ext_signals_1    if23;
    mac_plm_block_out_dma64_ext_signals_1    if24;
    mac_plm_block_out_dma64_ext_signals_1    if25;
    mac_plm_block_out_dma64_ext_signals_1    if26;
    mac_plm_block_out_dma64_ext_signals_1    if27;
    mac_plm_block_out_dma64_ext_signals_1    if28;
    mac_plm_block_out_dma64_ext_signals_1    if29;
    mac_plm_block_out_dma64_ext_signals_1    if30;
    mac_plm_block_out_dma64_ext_signals_1    if31;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else if (if23.CE0.read() == 1) {
            m_port.WE0 = if23.WE0;
            m_port.CE0 = if23.CE0;
            m_port.D0 = if23.D0;
            m_port.A0 = if23.A0;
            m_port.WEM0 = if23.WEM0;
        } else if (if24.CE0.read() == 1) {
            m_port.WE0 = if24.WE0;
            m_port.CE0 = if24.CE0;
            m_port.D0 = if24.D0;
            m_port.A0 = if24.A0;
            m_port.WEM0 = if24.WEM0;
        } else if (if25.CE0.read() == 1) {
            m_port.WE0 = if25.WE0;
            m_port.CE0 = if25.CE0;
            m_port.D0 = if25.D0;
            m_port.A0 = if25.A0;
            m_port.WEM0 = if25.WEM0;
        } else if (if26.CE0.read() == 1) {
            m_port.WE0 = if26.WE0;
            m_port.CE0 = if26.CE0;
            m_port.D0 = if26.D0;
            m_port.A0 = if26.A0;
            m_port.WEM0 = if26.WEM0;
        } else if (if27.CE0.read() == 1) {
            m_port.WE0 = if27.WE0;
            m_port.CE0 = if27.CE0;
            m_port.D0 = if27.D0;
            m_port.A0 = if27.A0;
            m_port.WEM0 = if27.WEM0;
        } else if (if28.CE0.read() == 1) {
            m_port.WE0 = if28.WE0;
            m_port.CE0 = if28.CE0;
            m_port.D0 = if28.D0;
            m_port.A0 = if28.A0;
            m_port.WEM0 = if28.WEM0;
        } else if (if29.CE0.read() == 1) {
            m_port.WE0 = if29.WE0;
            m_port.CE0 = if29.CE0;
            m_port.D0 = if29.D0;
            m_port.A0 = if29.A0;
            m_port.WEM0 = if29.WEM0;
        } else if (if30.CE0.read() == 1) {
            m_port.WE0 = if30.WE0;
            m_port.CE0 = if30.CE0;
            m_port.D0 = if30.D0;
            m_port.A0 = if30.A0;
            m_port.WEM0 = if30.WEM0;
        } else if (if31.CE0.read() == 1) {
            m_port.WE0 = if31.WE0;
            m_port.CE0 = if31.CE0;
            m_port.D0 = if31.D0;
            m_port.A0 = if31.A0;
            m_port.WEM0 = if31.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_32 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_32                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_32);
    shared_32( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_32") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.WE0;
        sensitive << if1.CE0;
        sensitive << if1.D0;
        sensitive << if1.A0;
        sensitive << if1.WEM0;
        sensitive << if2.WE0;
        sensitive << if2.CE0;
        sensitive << if2.D0;
        sensitive << if2.A0;
        sensitive << if2.WEM0;
        sensitive << if3.WE0;
        sensitive << if3.CE0;
        sensitive << if3.D0;
        sensitive << if3.A0;
        sensitive << if3.WEM0;
        sensitive << if4.WE0;
        sensitive << if4.CE0;
        sensitive << if4.D0;
        sensitive << if4.A0;
        sensitive << if4.WEM0;
        sensitive << if5.WE0;
        sensitive << if5.CE0;
        sensitive << if5.D0;
        sensitive << if5.A0;
        sensitive << if5.WEM0;
        sensitive << if6.WE0;
        sensitive << if6.CE0;
        sensitive << if6.D0;
        sensitive << if6.A0;
        sensitive << if6.WEM0;
        sensitive << if7.WE0;
        sensitive << if7.CE0;
        sensitive << if7.D0;
        sensitive << if7.A0;
        sensitive << if7.WEM0;
        sensitive << if8.WE0;
        sensitive << if8.CE0;
        sensitive << if8.D0;
        sensitive << if8.A0;
        sensitive << if8.WEM0;
        sensitive << if9.WE0;
        sensitive << if9.CE0;
        sensitive << if9.D0;
        sensitive << if9.A0;
        sensitive << if9.WEM0;
        sensitive << if10.WE0;
        sensitive << if10.CE0;
        sensitive << if10.D0;
        sensitive << if10.A0;
        sensitive << if10.WEM0;
        sensitive << if11.WE0;
        sensitive << if11.CE0;
        sensitive << if11.D0;
        sensitive << if11.A0;
        sensitive << if11.WEM0;
        sensitive << if12.WE0;
        sensitive << if12.CE0;
        sensitive << if12.D0;
        sensitive << if12.A0;
        sensitive << if12.WEM0;
        sensitive << if13.WE0;
        sensitive << if13.CE0;
        sensitive << if13.D0;
        sensitive << if13.A0;
        sensitive << if13.WEM0;
        sensitive << if14.WE0;
        sensitive << if14.CE0;
        sensitive << if14.D0;
        sensitive << if14.A0;
        sensitive << if14.WEM0;
        sensitive << if15.WE0;
        sensitive << if15.CE0;
        sensitive << if15.D0;
        sensitive << if15.A0;
        sensitive << if15.WEM0;
        sensitive << if16.WE0;
        sensitive << if16.CE0;
        sensitive << if16.D0;
        sensitive << if16.A0;
        sensitive << if16.WEM0;
        sensitive << if17.WE0;
        sensitive << if17.CE0;
        sensitive << if17.D0;
        sensitive << if17.A0;
        sensitive << if17.WEM0;
        sensitive << if18.WE0;
        sensitive << if18.CE0;
        sensitive << if18.D0;
        sensitive << if18.A0;
        sensitive << if18.WEM0;
        sensitive << if19.WE0;
        sensitive << if19.CE0;
        sensitive << if19.D0;
        sensitive << if19.A0;
        sensitive << if19.WEM0;
        sensitive << if20.WE0;
        sensitive << if20.CE0;
        sensitive << if20.D0;
        sensitive << if20.A0;
        sensitive << if20.WEM0;
        sensitive << if21.WE0;
        sensitive << if21.CE0;
        sensitive << if21.D0;
        sensitive << if21.A0;
        sensitive << if21.WEM0;
        sensitive << if22.WE0;
        sensitive << if22.CE0;
        sensitive << if22.D0;
        sensitive << if22.A0;
        sensitive << if22.WEM0;
        sensitive << if23.WE0;
        sensitive << if23.CE0;
        sensitive << if23.D0;
        sensitive << if23.A0;
        sensitive << if23.WEM0;
        sensitive << if24.WE0;
        sensitive << if24.CE0;
        sensitive << if24.D0;
        sensitive << if24.A0;
        sensitive << if24.WEM0;
        sensitive << if25.WE0;
        sensitive << if25.CE0;
        sensitive << if25.D0;
        sensitive << if25.A0;
        sensitive << if25.WEM0;
        sensitive << if26.WE0;
        sensitive << if26.CE0;
        sensitive << if26.D0;
        sensitive << if26.A0;
        sensitive << if26.WEM0;
        sensitive << if27.WE0;
        sensitive << if27.CE0;
        sensitive << if27.D0;
        sensitive << if27.A0;
        sensitive << if27.WEM0;
        sensitive << if28.WE0;
        sensitive << if28.CE0;
        sensitive << if28.D0;
        sensitive << if28.A0;
        sensitive << if28.WEM0;
        sensitive << if29.WE0;
        sensitive << if29.CE0;
        sensitive << if29.D0;
        sensitive << if29.A0;
        sensitive << if29.WEM0;
        sensitive << if30.WE0;
        sensitive << if30.CE0;
        sensitive << if30.D0;
        sensitive << if30.A0;
        sensitive << if30.WEM0;
        sensitive << if31.WE0;
        sensitive << if31.CE0;
        sensitive << if31.D0;
        sensitive << if31.A0;
        sensitive << if31.WEM0;
        sensitive << if32.WE0;
        sensitive << if32.CE0;
        sensitive << if32.D0;
        sensitive << if32.A0;
        sensitive << if32.WEM0;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_1    if1;
    mac_plm_block_out_dma64_ext_signals_1    if2;
    mac_plm_block_out_dma64_ext_signals_1    if3;
    mac_plm_block_out_dma64_ext_signals_1    if4;
    mac_plm_block_out_dma64_ext_signals_1    if5;
    mac_plm_block_out_dma64_ext_signals_1    if6;
    mac_plm_block_out_dma64_ext_signals_1    if7;
    mac_plm_block_out_dma64_ext_signals_1    if8;
    mac_plm_block_out_dma64_ext_signals_1    if9;
    mac_plm_block_out_dma64_ext_signals_1    if10;
    mac_plm_block_out_dma64_ext_signals_1    if11;
    mac_plm_block_out_dma64_ext_signals_1    if12;
    mac_plm_block_out_dma64_ext_signals_1    if13;
    mac_plm_block_out_dma64_ext_signals_1    if14;
    mac_plm_block_out_dma64_ext_signals_1    if15;
    mac_plm_block_out_dma64_ext_signals_1    if16;
    mac_plm_block_out_dma64_ext_signals_1    if17;
    mac_plm_block_out_dma64_ext_signals_1    if18;
    mac_plm_block_out_dma64_ext_signals_1    if19;
    mac_plm_block_out_dma64_ext_signals_1    if20;
    mac_plm_block_out_dma64_ext_signals_1    if21;
    mac_plm_block_out_dma64_ext_signals_1    if22;
    mac_plm_block_out_dma64_ext_signals_1    if23;
    mac_plm_block_out_dma64_ext_signals_1    if24;
    mac_plm_block_out_dma64_ext_signals_1    if25;
    mac_plm_block_out_dma64_ext_signals_1    if26;
    mac_plm_block_out_dma64_ext_signals_1    if27;
    mac_plm_block_out_dma64_ext_signals_1    if28;
    mac_plm_block_out_dma64_ext_signals_1    if29;
    mac_plm_block_out_dma64_ext_signals_1    if30;
    mac_plm_block_out_dma64_ext_signals_1    if31;
    mac_plm_block_out_dma64_ext_signals_1    if32;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.WE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.CE0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.D0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A0, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.WEM0, 0.06 );
       }
        if (if1.CE0.read() == 1) {
            m_port.WE0 = if1.WE0;
            m_port.CE0 = if1.CE0;
            m_port.D0 = if1.D0;
            m_port.A0 = if1.A0;
            m_port.WEM0 = if1.WEM0;
        } else if (if2.CE0.read() == 1) {
            m_port.WE0 = if2.WE0;
            m_port.CE0 = if2.CE0;
            m_port.D0 = if2.D0;
            m_port.A0 = if2.A0;
            m_port.WEM0 = if2.WEM0;
        } else if (if3.CE0.read() == 1) {
            m_port.WE0 = if3.WE0;
            m_port.CE0 = if3.CE0;
            m_port.D0 = if3.D0;
            m_port.A0 = if3.A0;
            m_port.WEM0 = if3.WEM0;
        } else if (if4.CE0.read() == 1) {
            m_port.WE0 = if4.WE0;
            m_port.CE0 = if4.CE0;
            m_port.D0 = if4.D0;
            m_port.A0 = if4.A0;
            m_port.WEM0 = if4.WEM0;
        } else if (if5.CE0.read() == 1) {
            m_port.WE0 = if5.WE0;
            m_port.CE0 = if5.CE0;
            m_port.D0 = if5.D0;
            m_port.A0 = if5.A0;
            m_port.WEM0 = if5.WEM0;
        } else if (if6.CE0.read() == 1) {
            m_port.WE0 = if6.WE0;
            m_port.CE0 = if6.CE0;
            m_port.D0 = if6.D0;
            m_port.A0 = if6.A0;
            m_port.WEM0 = if6.WEM0;
        } else if (if7.CE0.read() == 1) {
            m_port.WE0 = if7.WE0;
            m_port.CE0 = if7.CE0;
            m_port.D0 = if7.D0;
            m_port.A0 = if7.A0;
            m_port.WEM0 = if7.WEM0;
        } else if (if8.CE0.read() == 1) {
            m_port.WE0 = if8.WE0;
            m_port.CE0 = if8.CE0;
            m_port.D0 = if8.D0;
            m_port.A0 = if8.A0;
            m_port.WEM0 = if8.WEM0;
        } else if (if9.CE0.read() == 1) {
            m_port.WE0 = if9.WE0;
            m_port.CE0 = if9.CE0;
            m_port.D0 = if9.D0;
            m_port.A0 = if9.A0;
            m_port.WEM0 = if9.WEM0;
        } else if (if10.CE0.read() == 1) {
            m_port.WE0 = if10.WE0;
            m_port.CE0 = if10.CE0;
            m_port.D0 = if10.D0;
            m_port.A0 = if10.A0;
            m_port.WEM0 = if10.WEM0;
        } else if (if11.CE0.read() == 1) {
            m_port.WE0 = if11.WE0;
            m_port.CE0 = if11.CE0;
            m_port.D0 = if11.D0;
            m_port.A0 = if11.A0;
            m_port.WEM0 = if11.WEM0;
        } else if (if12.CE0.read() == 1) {
            m_port.WE0 = if12.WE0;
            m_port.CE0 = if12.CE0;
            m_port.D0 = if12.D0;
            m_port.A0 = if12.A0;
            m_port.WEM0 = if12.WEM0;
        } else if (if13.CE0.read() == 1) {
            m_port.WE0 = if13.WE0;
            m_port.CE0 = if13.CE0;
            m_port.D0 = if13.D0;
            m_port.A0 = if13.A0;
            m_port.WEM0 = if13.WEM0;
        } else if (if14.CE0.read() == 1) {
            m_port.WE0 = if14.WE0;
            m_port.CE0 = if14.CE0;
            m_port.D0 = if14.D0;
            m_port.A0 = if14.A0;
            m_port.WEM0 = if14.WEM0;
        } else if (if15.CE0.read() == 1) {
            m_port.WE0 = if15.WE0;
            m_port.CE0 = if15.CE0;
            m_port.D0 = if15.D0;
            m_port.A0 = if15.A0;
            m_port.WEM0 = if15.WEM0;
        } else if (if16.CE0.read() == 1) {
            m_port.WE0 = if16.WE0;
            m_port.CE0 = if16.CE0;
            m_port.D0 = if16.D0;
            m_port.A0 = if16.A0;
            m_port.WEM0 = if16.WEM0;
        } else if (if17.CE0.read() == 1) {
            m_port.WE0 = if17.WE0;
            m_port.CE0 = if17.CE0;
            m_port.D0 = if17.D0;
            m_port.A0 = if17.A0;
            m_port.WEM0 = if17.WEM0;
        } else if (if18.CE0.read() == 1) {
            m_port.WE0 = if18.WE0;
            m_port.CE0 = if18.CE0;
            m_port.D0 = if18.D0;
            m_port.A0 = if18.A0;
            m_port.WEM0 = if18.WEM0;
        } else if (if19.CE0.read() == 1) {
            m_port.WE0 = if19.WE0;
            m_port.CE0 = if19.CE0;
            m_port.D0 = if19.D0;
            m_port.A0 = if19.A0;
            m_port.WEM0 = if19.WEM0;
        } else if (if20.CE0.read() == 1) {
            m_port.WE0 = if20.WE0;
            m_port.CE0 = if20.CE0;
            m_port.D0 = if20.D0;
            m_port.A0 = if20.A0;
            m_port.WEM0 = if20.WEM0;
        } else if (if21.CE0.read() == 1) {
            m_port.WE0 = if21.WE0;
            m_port.CE0 = if21.CE0;
            m_port.D0 = if21.D0;
            m_port.A0 = if21.A0;
            m_port.WEM0 = if21.WEM0;
        } else if (if22.CE0.read() == 1) {
            m_port.WE0 = if22.WE0;
            m_port.CE0 = if22.CE0;
            m_port.D0 = if22.D0;
            m_port.A0 = if22.A0;
            m_port.WEM0 = if22.WEM0;
        } else if (if23.CE0.read() == 1) {
            m_port.WE0 = if23.WE0;
            m_port.CE0 = if23.CE0;
            m_port.D0 = if23.D0;
            m_port.A0 = if23.A0;
            m_port.WEM0 = if23.WEM0;
        } else if (if24.CE0.read() == 1) {
            m_port.WE0 = if24.WE0;
            m_port.CE0 = if24.CE0;
            m_port.D0 = if24.D0;
            m_port.A0 = if24.A0;
            m_port.WEM0 = if24.WEM0;
        } else if (if25.CE0.read() == 1) {
            m_port.WE0 = if25.WE0;
            m_port.CE0 = if25.CE0;
            m_port.D0 = if25.D0;
            m_port.A0 = if25.A0;
            m_port.WEM0 = if25.WEM0;
        } else if (if26.CE0.read() == 1) {
            m_port.WE0 = if26.WE0;
            m_port.CE0 = if26.CE0;
            m_port.D0 = if26.D0;
            m_port.A0 = if26.A0;
            m_port.WEM0 = if26.WEM0;
        } else if (if27.CE0.read() == 1) {
            m_port.WE0 = if27.WE0;
            m_port.CE0 = if27.CE0;
            m_port.D0 = if27.D0;
            m_port.A0 = if27.A0;
            m_port.WEM0 = if27.WEM0;
        } else if (if28.CE0.read() == 1) {
            m_port.WE0 = if28.WE0;
            m_port.CE0 = if28.CE0;
            m_port.D0 = if28.D0;
            m_port.A0 = if28.A0;
            m_port.WEM0 = if28.WEM0;
        } else if (if29.CE0.read() == 1) {
            m_port.WE0 = if29.WE0;
            m_port.CE0 = if29.CE0;
            m_port.D0 = if29.D0;
            m_port.A0 = if29.A0;
            m_port.WEM0 = if29.WEM0;
        } else if (if30.CE0.read() == 1) {
            m_port.WE0 = if30.WE0;
            m_port.CE0 = if30.CE0;
            m_port.D0 = if30.D0;
            m_port.A0 = if30.A0;
            m_port.WEM0 = if30.WEM0;
        } else if (if31.CE0.read() == 1) {
            m_port.WE0 = if31.WE0;
            m_port.CE0 = if31.CE0;
            m_port.D0 = if31.D0;
            m_port.A0 = if31.A0;
            m_port.WEM0 = if31.WEM0;
        } else if (if32.CE0.read() == 1) {
            m_port.WE0 = if32.WE0;
            m_port.CE0 = if32.CE0;
            m_port.D0 = if32.D0;
            m_port.A0 = if32.A0;
            m_port.WEM0 = if32.WEM0;
        } else {
            m_port.WE0 = 0;
            m_port.CE0 = 0;
            m_port.D0 = 0;
            m_port.A0 = 0;
            m_port.WEM0 = 0;

        }
    }


    template <class W>
    void bind( W& iface )
    {
        m_port.WE0(iface.WE0);
        m_port.CE0(iface.CE0);
        m_port.D0(iface.D0);
        m_port.A0(iface.A0);
        m_port.WEM0(iface.WEM0);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
//
// PIN-level metaport.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2
  : public mac_plm_block_out_dma64::types<HLS_L>
  , public cynw_clk_rst_facade
{
  public:
    HLS_METAPORT;
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>            this_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS, HLS_MAPPING > ref_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef unsigned int                          mask_type;
    class shared_2;
    class shared_3;
    class shared_4;
    class shared_5;
    class shared_6;
    class shared_7;
    class shared_8;
    class shared_9;
    class shared_10;
    class shared_11;
    class shared_12;
    class shared_13;
    class shared_14;
    class shared_15;
    class shared_16;
    class shared_17;
    class shared_18;
    class shared_19;
    class shared_20;
    class shared_21;
    class shared_22;
    class shared_23;
    class shared_24;
    class shared_25;
    class shared_26;
    class shared_27;
    class shared_28;
    class shared_29;
    class shared_30;
    class shared_31;
    class shared_32;

    port_2( 
		const char* in_name=sc_gen_unique_name("port_2"),
		  unsigned options_in=0)
        : m_options(options_in|HLS_DEF_CHAIN_MEM_IO | HLS_DEF_NO_SPEC_READS), 
          CE1( HLS_CAT_NAMES(in_name,"CE1") ),
        Q1( HLS_CAT_NAMES(in_name,"Q1") ),
        A1( HLS_CAT_NAMES(in_name,"A1") ),
          m_reset_done(false)
    {
        p_name = new char[strlen(in_name)+1];
        strcpy(p_name,in_name);
#if !STRATUS
        m_tx_stream = 0;
#endif
        m_stream_name = (std::string("sc_main.") + std::string(::sc_core::sc_get_curr_simcontext()->hierarchy_curr()->name()) + std::string(".") + std::string(in_name));
    }

    ~port_2()
    {
        delete p_name;
	}

    CYNW_MEM_SQUARE_BRACKETS( ref_type )
  public:
	char* p_name;
	bool m_reset_done;

	const char* name() { return p_name; }

    cynw_scv_memory_tx_stream< address_type, data_type >* tx_stream()
    {
#if !STRATUS
      if (m_tx_stream == 0) {
        esc_enable_scv_logging();
        m_tx_stream = new cynw_scv_memory_tx_stream< address_type, data_type >( m_stream_name.c_str(), esc_get_scv_tr_db() );
	  }
      return m_tx_stream;
#else
      return 0;
#endif
    }

    void nb_get_start( const address_type& address )
    {
        this->CE1 = 1;
        this->A1 = address;
    }
    bool nb_get( data_type& val )
    {
        val = this->Q1.read();
        return true;
    }
    sc_event_finder& value_changed()
    {
        return this->Q1.value_changed();
    }
    data_type get( const address_type& address )
    {
        HLS_DEFINE_FLOATING_PROTOCOL( 0.06, 0.2, 1, this, this->m_options|HLS::HLS_MEM_READ_FP|HLS::HLS_UNSTALLABLE_FP, address, "mem_read" );
        HLS_SET_OUTPUT_OPTIONS(this->A1,ASYNC_POWER_HOLD);
        this->check_reset();
        cynw_scv_memory_tx< address_type, data_type > tx = this->tx_stream()->begin_read_tx( address );
        nb_get_start(address);
        ::wait(1);
        nb_deassert();
        ::wait( 1 );
        if (this->m_options & HLS::HLS_USING_REG_PORT) {
            ::wait(1);
            ::wait(1);
        }
        if (this->m_options & HLS::HLS_USING_REG_EX_PORT) {
            ::wait(1);
            ::wait(1);
        }

        data_type val;
        nb_get(val);
        this->tx_stream()->end_read_tx( tx, val );
        return val;
    }
    void put( const address_type& address, const data_type& data )
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        printf("WARNING: %s: Attempting to write to a read-only memory port\n", name());
#endif
    }
    void reset( bool control_only=true )
    {
        HLS_DEFINE_PROTOCOL("reset");
        this->m_reset_done = true;
        this->CE1 = 0;
        if (!control_only) this->A1 = 0;
        HLS_SUPPRESS_MSG_SYM( 1435, this->A1 );
        HLS_SET_STALL_VALUE( this->CE1, 0);
    }

    void nb_deassert()
    {
        this->m_reset_done = true;
        this->CE1 = 0;
    }

    void check_reset()
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        if (!m_reset_done)
        {
            printf("WARNING: Access to external memory port '%s' before calling reset()\n", name());
            m_reset_done = true;
        }
#endif
    }

    template <class W>
    void bind( W& iface )
    {
        this->CE1(iface.CE1);
        this->Q1(iface.Q1);
        this->A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

  public:
	unsigned m_options;
#if !STRATUS
    cynw_scv_memory_tx_stream< address_type, data_type >* m_tx_stream;
#endif
	std::string m_stream_name;

   sc_out< bool > CE1;
   sc_in< sc_uint<32> > Q1;
   sc_out< sc_uint<7> > A1;
 
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level export metaport.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L>
class mac_plm_block_out_dma64::ex_port_2
  : public mac_plm_block_out_dma64::types<HLS_L>
{
  public:
    HLS_METAPORT;
    typedef mac_plm_block_out_dma64::ex_port_2<HLS_L>            this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    ex_port_2( const char* in_name=sc_gen_unique_name("ex_port_2") )
        : CE1( HLS_CAT_NAMES(in_name,"CE1") ),
        Q1( HLS_CAT_NAMES(in_name,"Q1") ),
        A1( HLS_CAT_NAMES(in_name,"A1") )
    {}

  public:


    template <class W>
    void bind( W& iface )
    {
        CE1(iface.CE1);
        Q1(iface.Q1);
        A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

  public:

   sc_export< sc_signal_out_if< bool > > CE1;
   sc_export< sc_signal_in_if< sc_uint<32> > > Q1;
   sc_export< sc_signal_out_if< sc_uint<7> > > A1;
 
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level export metaport with a register included.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L>
class mac_plm_block_out_dma64::reg_ex_port_2
  : public mac_plm_block_out_dma64::ex_port_2<HLS_L>,
	public sc_module,
	public cynw_clk_rst

{
  public:
    typedef mac_plm_block_out_dma64::reg_ex_port_2<HLS_L>            this_type;
    typedef mac_plm_block_out_dma64::ex_port_2<HLS_L>            base_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    SC_HAS_PROCESS(this_type);

    reg_ex_port_2( sc_module_name in_name=sc_module_name( sc_gen_unique_name("reg_ex_port_2") ) )
        : base_type(in_name)
		, sc_module(in_name)
		, CE1_reg( HLS_CAT_NAMES(in_name,"CE1_reg") ),
        Q1_reg( HLS_CAT_NAMES(in_name,"Q1_reg") ),
        A1_reg( HLS_CAT_NAMES(in_name,"A1_reg") )
		, CE1_p( HLS_CAT_NAMES(in_name,"CE1_p") ),
        Q1_p( HLS_CAT_NAMES(in_name,"Q1_p") ),
        A1_p( HLS_CAT_NAMES(in_name,"A1_p") )
    {
        this->CE1(CE1_reg);
        this->Q1(Q1_reg);
        this->A1(A1_reg);


        SC_METHOD(do_reg);
        sensitive << clk.pos();
        dont_initialize();

	}

  public:


    template <class W>
    void bind( W& iface )
    {
        CE1_p(iface.CE1);
        Q1_p(iface.Q1);
        A1_p(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

    void do_reg()
    {
        if ( rst_active() ) 
        {
	         HLS_SET_IS_RESET_BLOCK("do_reg");
            CE1_p = 0;
        } else {
            CE1_p.write( CE1_reg.read() );
            Q1_reg.write( Q1_p.read() );
            A1_p.write( A1_reg.read() );

        }
    }
  public:

        sc_signal< bool > CE1_reg;
        sc_signal< sc_uint<32> > Q1_reg;
        sc_signal< sc_uint<7> > A1_reg;
        sc_out< bool > CE1_p;
        sc_out< sc_uint<7> > A1_p;
        sc_in< sc_uint<32> > Q1_p;
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level metaport with stalling support.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::stall_port_2
  : public mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>,
    public sc_module,
    public cynw_clk_rst
{
  public:
    typedef mac_plm_block_out_dma64::stall_port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>       this_type;
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>       base_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS, HLS_MAPPING > ref_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef unsigned int                          mask_type;

    SC_HAS_PROCESS(this_type);

    HLS_EXPOSE_PORT( OFF, clk );
    HLS_EXPOSE_PORT( OFF, rst );

    sc_signal<data_type> fifo_dout;
    sc_signal<bool> tx_start;
    sc_signal<bool> tx_end;
    sc_signal<bool> tx_running;
    sc_signal<bool> m_stalling;
    sc_signal<bool> CE1_req;

    stall_port_2( 
	  sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2") ), unsigned options_in=0)
      : sc_module(in_name),
		cynw_clk_rst(in_name),
		base_type(in_name,options_in|HLS_DEF_CHAIN_MEM_IO | HLS_DEF_NO_SPEC_READS),
		fifo(in_name),
        tx_start("tx_start"),
        tx_end("tx_end"),
        m_stalling("m_stalling")
    {

      fifo.stalling(m_stalling);
      fifo.start(tx_start);
      fifo.end(tx_end);
      fifo.running(tx_running);
      fifo.din(this->Q1);
      fifo.dout(fifo_dout);
      fifo.clk_rst(*this);
      HLS_SET_OUTPUT_OPTIONS( this->CE1, ASYNC_HOLD_WEAK_TIMING );

      SC_METHOD(gen_CE1);
	  sensitive << CE1_req;
	  sensitive << m_stalling;

    }

    CYNW_MEM_SQUARE_BRACKETS( ref_type )

	CYNW_CLK_RST_FUNCS

  public:

    // 
    // Fifo for storing memory outputs during a stall.
    // Depth matches the latency of the memory.
    //
    cynw_stall_fifo< data_type, 1, HLS_L > fifo;


    void nb_get_start( const address_type& address )
    {
        this->CE1_req = 1;
        this->A1 = address;
        tx_start = 1;
    }
    bool nb_get( data_type& val )
    {
        val = this->fifo_dout.read();
        return true;
    }
    data_type get( const address_type& address )
    {
        HLS_DEFINE_FLOATING_PROTOCOL( 0.06, -1, 1, this, this->m_options|HLS::HLS_MEM_READ_FP, address, "mem_read" );
        HLS_SET_OUTPUT_OPTIONS(this->A1,ASYNC_POWER_HOLD);
        this->check_reset();
        cynw_scv_memory_tx< address_type, data_type > tx = this->tx_stream()->begin_read_tx( address );
        nb_get_start(address);
        ::wait(1);
        nb_deassert();
        ::wait( 1 );
        if (this->m_options & HLS::HLS_USING_REG_PORT) {
            ::wait(1);
            ::wait(1);
        }
        if (this->m_options & HLS::HLS_USING_REG_EX_PORT) {
            ::wait(1);
            ::wait(1);
        }

        data_type val;
        nb_get(val);
        this->tx_stream()->end_read_tx( tx, val );
        return val;
    }
    void put( const address_type& address, const data_type& data )
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        printf("WARNING: %s: Attempting to write to a read-only memory port\n", name());
#endif
    }
    void reset( bool control_only=true )
    {
        HLS_DEFINE_PROTOCOL("reset");
        this->m_reset_done = true;
        this->CE1_req = 0;
        if (!control_only) this->A1 = 0;
        HLS_SUPPRESS_MSG_SYM( 1435, this->A1 );
        tx_start = 0;
        cynw_assert_during_stall( m_stalling, 1 );
        HLS_SET_STALL_VALUE( this->CE1, 0);
    }

    void nb_deassert()
    {
        this->m_reset_done = true;
        this->CE1_req = 0;
        tx_start = 0;
    }

    template <class W>
    void bind( W& iface )
    {
        this->CE1(iface.CE1);
        this->Q1(iface.Q1);
        this->A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	void gen_CE1()
	{
	    this->CE1.write( CE1_req.read() & !m_stalling.read() );
	}
};
#endif

#if !defined(STRATUS_VLG)
//
// PIN-level metaport with an explicit register on DOUT support.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::reg_port_2
  : public mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>,
    public sc_module,
    public cynw_clk_rst
{
  public:
    typedef mac_plm_block_out_dma64::reg_port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>       this_type;
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>       base_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS, HLS_MAPPING > ref_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef unsigned int                          mask_type;

    SC_HAS_PROCESS(this_type);

    HLS_EXPOSE_PORT( OFF, clk );
    HLS_EXPOSE_PORT( OFF, rst );

    reg_port_2( 
	  sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2") ), 
	  unsigned options_in=0 )
      : sc_module(in_name)
	  ,	cynw_clk_rst(in_name)
	  ,	base_type(in_name,options_in|HLS_DEF_CHAIN_MEM_IO | HLS_DEF_NO_SPEC_READS)
    {

	  SC_METHOD(do_reg_c);
      sensitive << clk.pos();
      dont_initialize();

	  SC_METHOD(do_reg_din);
      sensitive << clk.pos();
      dont_initialize();

	  SC_METHOD(do_reg_dout);
      sensitive << clk.pos();
      dont_initialize();

    }

    CYNW_MEM_SQUARE_BRACKETS( ref_type )

	CYNW_CLK_RST_FUNCS

  public:
    void nb_get_start( const address_type& address )
    {
        this->if_inner.CE1 = 1;
        this->if_inner.A1 = address;
    }
    bool nb_get( data_type& val )
    {
        val = this->if_inner.Q1.read();
        return true;
    }
    data_type get( const address_type& address )
    {
        HLS_DEFINE_FLOATING_PROTOCOL( HLS_REG_SETUP_TIME, HLS_REG_DELAY, 1, this, this->m_options|HLS::HLS_MEM_READ_FP|HLS::HLS_UNSTALLABLE_FP, address, "mem_read" );
        HLS_SET_OUTPUT_OPTIONS(this->if_inner.A1,ASYNC_POWER_HOLD);
        this->check_reset();
        cynw_scv_memory_tx< address_type, data_type > tx = this->tx_stream()->begin_read_tx( address );
        nb_get_start(address);
        ::wait(1);
        nb_deassert();
        ::wait( 3 );
        if (this->m_options & HLS::HLS_USING_REG_EX_PORT) {
            ::wait(1);
            ::wait(1);
        }

        data_type val;
        nb_get(val);
        this->tx_stream()->end_read_tx( tx, val );
        return val;
    }
    void put( const address_type& address, const data_type& data )
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        printf("WARNING: %s: Attempting to write to a read-only memory port\n", name());
#endif
    }
    void reset( bool control_only=true )
    {
        HLS_DEFINE_PROTOCOL("reset");
        this->m_reset_done = true;
        this->if_inner.CE1 = 0;
        if (!control_only) this->if_inner.A1 = 0;
        HLS_SUPPRESS_MSG_SYM( 1435, this->if_inner.A1 );
        HLS_SET_STALL_VALUE( this->if_inner.CE1, 0);
    }

    void nb_deassert()
    {
        this->m_reset_done = true;
        this->if_inner.CE1 = 0;
    }

    template <class W>
    void bind( W& iface )
    {
        this->CE1(iface.CE1);
        this->Q1(iface.Q1);
        this->A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }
    mac_plm_block_out_dma64_ext_signals_2    if_inner;

    void do_reg_c()
    {
        if ( rst_active() ) 
        {
            HLS_SET_IS_RESET_BLOCK("do_reg_c");
            this->CE1 = 0;
        } else {
            this->CE1.write( if_inner.CE1.read() );

        }
    }

    void do_reg_din()
    {
	bool rst = rst_active(); 
         if ( if_inner.CE1.read() == 1 ) {
             HLS_REMOVE_CONTROL(OFF,"");
            this->A1.write( if_inner.A1.read() );
         }

    }

    void do_reg_dout()
    {
	bool rst = rst_active(); 
            if_inner.Q1.write( this->Q1.read() );

    }

};
#endif

#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_2 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_2                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_2);
    shared_2( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_2") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_3 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_3                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_3);
    shared_3( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_3") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_4 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_4                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_4);
    shared_4( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_4") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_5 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_5                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_5);
    shared_5( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_5") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_6 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_6                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_6);
    shared_6( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_6") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_7 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_7                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_7);
    shared_7( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_7") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_8 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_8                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_8);
    shared_8( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_8") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_9 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_9                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_9);
    shared_9( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_9") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_10 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_10                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_10);
    shared_10( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_10") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_11 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_11                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_11);
    shared_11( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_11") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_12 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_12                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_12);
    shared_12( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_12") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_13 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_13                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_13);
    shared_13( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_13") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_14 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_14                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_14);
    shared_14( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_14") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_15 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_15                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_15);
    shared_15( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_15") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_16 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_16                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_16);
    shared_16( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_16") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_17 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_17                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_17);
    shared_17( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_17") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_18 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_18                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_18);
    shared_18( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_18") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_19 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_19                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_19);
    shared_19( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_19") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_20 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_20                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_20);
    shared_20( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_20") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_21 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_21                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_21);
    shared_21( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_21") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_22 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_22                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_22);
    shared_22( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_22") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_23 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_23                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_23);
    shared_23( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_23") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if23.CE1;
        sensitive << if23.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;
    mac_plm_block_out_dma64_ext_signals_2    if23;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            m_port.CE1 = if23.CE1;
            m_port.A1 = if23.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_24 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_24                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_24);
    shared_24( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_24") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if24.CE1;
        sensitive << if24.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;
    mac_plm_block_out_dma64_ext_signals_2    if23;
    mac_plm_block_out_dma64_ext_signals_2    if24;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            m_port.CE1 = if23.CE1;
            m_port.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            m_port.CE1 = if24.CE1;
            m_port.A1 = if24.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_25 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_25                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_25);
    shared_25( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_25") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if25.CE1;
        sensitive << if25.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;
    mac_plm_block_out_dma64_ext_signals_2    if23;
    mac_plm_block_out_dma64_ext_signals_2    if24;
    mac_plm_block_out_dma64_ext_signals_2    if25;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            m_port.CE1 = if23.CE1;
            m_port.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            m_port.CE1 = if24.CE1;
            m_port.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            m_port.CE1 = if25.CE1;
            m_port.A1 = if25.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_26 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_26                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_26);
    shared_26( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_26") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if26.CE1;
        sensitive << if26.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;
    mac_plm_block_out_dma64_ext_signals_2    if23;
    mac_plm_block_out_dma64_ext_signals_2    if24;
    mac_plm_block_out_dma64_ext_signals_2    if25;
    mac_plm_block_out_dma64_ext_signals_2    if26;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            m_port.CE1 = if23.CE1;
            m_port.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            m_port.CE1 = if24.CE1;
            m_port.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            m_port.CE1 = if25.CE1;
            m_port.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            m_port.CE1 = if26.CE1;
            m_port.A1 = if26.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_27 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_27                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_27);
    shared_27( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_27") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if27.CE1;
        sensitive << if27.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;
    mac_plm_block_out_dma64_ext_signals_2    if23;
    mac_plm_block_out_dma64_ext_signals_2    if24;
    mac_plm_block_out_dma64_ext_signals_2    if25;
    mac_plm_block_out_dma64_ext_signals_2    if26;
    mac_plm_block_out_dma64_ext_signals_2    if27;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            m_port.CE1 = if23.CE1;
            m_port.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            m_port.CE1 = if24.CE1;
            m_port.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            m_port.CE1 = if25.CE1;
            m_port.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            m_port.CE1 = if26.CE1;
            m_port.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            m_port.CE1 = if27.CE1;
            m_port.A1 = if27.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_28 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_28                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_28);
    shared_28( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_28") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if28.CE1;
        sensitive << if28.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_28);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;
    mac_plm_block_out_dma64_ext_signals_2    if23;
    mac_plm_block_out_dma64_ext_signals_2    if24;
    mac_plm_block_out_dma64_ext_signals_2    if25;
    mac_plm_block_out_dma64_ext_signals_2    if26;
    mac_plm_block_out_dma64_ext_signals_2    if27;
    mac_plm_block_out_dma64_ext_signals_2    if28;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            m_port.CE1 = if23.CE1;
            m_port.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            m_port.CE1 = if24.CE1;
            m_port.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            m_port.CE1 = if25.CE1;
            m_port.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            m_port.CE1 = if26.CE1;
            m_port.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            m_port.CE1 = if27.CE1;
            m_port.A1 = if27.A1;
        } else if (if28.CE1.read() == 1) {
            m_port.CE1 = if28.CE1;
            m_port.A1 = if28.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_29 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_29                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_29);
    shared_29( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_29") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if28.CE1;
        sensitive << if28.A1;
        sensitive << if29.CE1;
        sensitive << if29.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_28);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_29);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;
    mac_plm_block_out_dma64_ext_signals_2    if23;
    mac_plm_block_out_dma64_ext_signals_2    if24;
    mac_plm_block_out_dma64_ext_signals_2    if25;
    mac_plm_block_out_dma64_ext_signals_2    if26;
    mac_plm_block_out_dma64_ext_signals_2    if27;
    mac_plm_block_out_dma64_ext_signals_2    if28;
    mac_plm_block_out_dma64_ext_signals_2    if29;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            m_port.CE1 = if23.CE1;
            m_port.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            m_port.CE1 = if24.CE1;
            m_port.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            m_port.CE1 = if25.CE1;
            m_port.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            m_port.CE1 = if26.CE1;
            m_port.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            m_port.CE1 = if27.CE1;
            m_port.A1 = if27.A1;
        } else if (if28.CE1.read() == 1) {
            m_port.CE1 = if28.CE1;
            m_port.A1 = if28.A1;
        } else if (if29.CE1.read() == 1) {
            m_port.CE1 = if29.CE1;
            m_port.A1 = if29.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_30 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_30                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_30);
    shared_30( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_30") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if28.CE1;
        sensitive << if28.A1;
        sensitive << if29.CE1;
        sensitive << if29.A1;
        sensitive << if30.CE1;
        sensitive << if30.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_28);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_29);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_30);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;
    mac_plm_block_out_dma64_ext_signals_2    if23;
    mac_plm_block_out_dma64_ext_signals_2    if24;
    mac_plm_block_out_dma64_ext_signals_2    if25;
    mac_plm_block_out_dma64_ext_signals_2    if26;
    mac_plm_block_out_dma64_ext_signals_2    if27;
    mac_plm_block_out_dma64_ext_signals_2    if28;
    mac_plm_block_out_dma64_ext_signals_2    if29;
    mac_plm_block_out_dma64_ext_signals_2    if30;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            m_port.CE1 = if23.CE1;
            m_port.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            m_port.CE1 = if24.CE1;
            m_port.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            m_port.CE1 = if25.CE1;
            m_port.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            m_port.CE1 = if26.CE1;
            m_port.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            m_port.CE1 = if27.CE1;
            m_port.A1 = if27.A1;
        } else if (if28.CE1.read() == 1) {
            m_port.CE1 = if28.CE1;
            m_port.A1 = if28.A1;
        } else if (if29.CE1.read() == 1) {
            m_port.CE1 = if29.CE1;
            m_port.A1 = if29.A1;
        } else if (if30.CE1.read() == 1) {
            m_port.CE1 = if30.CE1;
            m_port.A1 = if30.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if30
    //
    void gen_out_30()
    {
        if30.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_31 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_31                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_31);
    shared_31( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_31") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if28.CE1;
        sensitive << if28.A1;
        sensitive << if29.CE1;
        sensitive << if29.A1;
        sensitive << if30.CE1;
        sensitive << if30.A1;
        sensitive << if31.CE1;
        sensitive << if31.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_28);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_29);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_30);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_31);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;
    mac_plm_block_out_dma64_ext_signals_2    if23;
    mac_plm_block_out_dma64_ext_signals_2    if24;
    mac_plm_block_out_dma64_ext_signals_2    if25;
    mac_plm_block_out_dma64_ext_signals_2    if26;
    mac_plm_block_out_dma64_ext_signals_2    if27;
    mac_plm_block_out_dma64_ext_signals_2    if28;
    mac_plm_block_out_dma64_ext_signals_2    if29;
    mac_plm_block_out_dma64_ext_signals_2    if30;
    mac_plm_block_out_dma64_ext_signals_2    if31;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            m_port.CE1 = if23.CE1;
            m_port.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            m_port.CE1 = if24.CE1;
            m_port.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            m_port.CE1 = if25.CE1;
            m_port.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            m_port.CE1 = if26.CE1;
            m_port.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            m_port.CE1 = if27.CE1;
            m_port.A1 = if27.A1;
        } else if (if28.CE1.read() == 1) {
            m_port.CE1 = if28.CE1;
            m_port.A1 = if28.A1;
        } else if (if29.CE1.read() == 1) {
            m_port.CE1 = if29.CE1;
            m_port.A1 = if29.A1;
        } else if (if30.CE1.read() == 1) {
            m_port.CE1 = if30.CE1;
            m_port.A1 = if30.A1;
        } else if (if31.CE1.read() == 1) {
            m_port.CE1 = if31.CE1;
            m_port.A1 = if31.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if30
    //
    void gen_out_30()
    {
        if30.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if31
    //
    void gen_out_31()
    {
        if31.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_32 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_32                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_32);
    shared_32( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_32") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE1;
        sensitive << if1.A1;
        sensitive << if2.CE1;
        sensitive << if2.A1;
        sensitive << if3.CE1;
        sensitive << if3.A1;
        sensitive << if4.CE1;
        sensitive << if4.A1;
        sensitive << if5.CE1;
        sensitive << if5.A1;
        sensitive << if6.CE1;
        sensitive << if6.A1;
        sensitive << if7.CE1;
        sensitive << if7.A1;
        sensitive << if8.CE1;
        sensitive << if8.A1;
        sensitive << if9.CE1;
        sensitive << if9.A1;
        sensitive << if10.CE1;
        sensitive << if10.A1;
        sensitive << if11.CE1;
        sensitive << if11.A1;
        sensitive << if12.CE1;
        sensitive << if12.A1;
        sensitive << if13.CE1;
        sensitive << if13.A1;
        sensitive << if14.CE1;
        sensitive << if14.A1;
        sensitive << if15.CE1;
        sensitive << if15.A1;
        sensitive << if16.CE1;
        sensitive << if16.A1;
        sensitive << if17.CE1;
        sensitive << if17.A1;
        sensitive << if18.CE1;
        sensitive << if18.A1;
        sensitive << if19.CE1;
        sensitive << if19.A1;
        sensitive << if20.CE1;
        sensitive << if20.A1;
        sensitive << if21.CE1;
        sensitive << if21.A1;
        sensitive << if22.CE1;
        sensitive << if22.A1;
        sensitive << if23.CE1;
        sensitive << if23.A1;
        sensitive << if24.CE1;
        sensitive << if24.A1;
        sensitive << if25.CE1;
        sensitive << if25.A1;
        sensitive << if26.CE1;
        sensitive << if26.A1;
        sensitive << if27.CE1;
        sensitive << if27.A1;
        sensitive << if28.CE1;
        sensitive << if28.A1;
        sensitive << if29.CE1;
        sensitive << if29.A1;
        sensitive << if30.CE1;
        sensitive << if30.A1;
        sensitive << if31.CE1;
        sensitive << if31.A1;
        sensitive << if32.CE1;
        sensitive << if32.A1;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_28);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_29);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_30);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_31);
        sensitive << m_port.Q1;

        SC_METHOD(gen_out_32);
        sensitive << m_port.Q1;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_2    if1;
    mac_plm_block_out_dma64_ext_signals_2    if2;
    mac_plm_block_out_dma64_ext_signals_2    if3;
    mac_plm_block_out_dma64_ext_signals_2    if4;
    mac_plm_block_out_dma64_ext_signals_2    if5;
    mac_plm_block_out_dma64_ext_signals_2    if6;
    mac_plm_block_out_dma64_ext_signals_2    if7;
    mac_plm_block_out_dma64_ext_signals_2    if8;
    mac_plm_block_out_dma64_ext_signals_2    if9;
    mac_plm_block_out_dma64_ext_signals_2    if10;
    mac_plm_block_out_dma64_ext_signals_2    if11;
    mac_plm_block_out_dma64_ext_signals_2    if12;
    mac_plm_block_out_dma64_ext_signals_2    if13;
    mac_plm_block_out_dma64_ext_signals_2    if14;
    mac_plm_block_out_dma64_ext_signals_2    if15;
    mac_plm_block_out_dma64_ext_signals_2    if16;
    mac_plm_block_out_dma64_ext_signals_2    if17;
    mac_plm_block_out_dma64_ext_signals_2    if18;
    mac_plm_block_out_dma64_ext_signals_2    if19;
    mac_plm_block_out_dma64_ext_signals_2    if20;
    mac_plm_block_out_dma64_ext_signals_2    if21;
    mac_plm_block_out_dma64_ext_signals_2    if22;
    mac_plm_block_out_dma64_ext_signals_2    if23;
    mac_plm_block_out_dma64_ext_signals_2    if24;
    mac_plm_block_out_dma64_ext_signals_2    if25;
    mac_plm_block_out_dma64_ext_signals_2    if26;
    mac_plm_block_out_dma64_ext_signals_2    if27;
    mac_plm_block_out_dma64_ext_signals_2    if28;
    mac_plm_block_out_dma64_ext_signals_2    if29;
    mac_plm_block_out_dma64_ext_signals_2    if30;
    mac_plm_block_out_dma64_ext_signals_2    if31;
    mac_plm_block_out_dma64_ext_signals_2    if32;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE1, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A1, 0.06 );
       }
        if (if1.CE1.read() == 1) {
            m_port.CE1 = if1.CE1;
            m_port.A1 = if1.A1;
        } else if (if2.CE1.read() == 1) {
            m_port.CE1 = if2.CE1;
            m_port.A1 = if2.A1;
        } else if (if3.CE1.read() == 1) {
            m_port.CE1 = if3.CE1;
            m_port.A1 = if3.A1;
        } else if (if4.CE1.read() == 1) {
            m_port.CE1 = if4.CE1;
            m_port.A1 = if4.A1;
        } else if (if5.CE1.read() == 1) {
            m_port.CE1 = if5.CE1;
            m_port.A1 = if5.A1;
        } else if (if6.CE1.read() == 1) {
            m_port.CE1 = if6.CE1;
            m_port.A1 = if6.A1;
        } else if (if7.CE1.read() == 1) {
            m_port.CE1 = if7.CE1;
            m_port.A1 = if7.A1;
        } else if (if8.CE1.read() == 1) {
            m_port.CE1 = if8.CE1;
            m_port.A1 = if8.A1;
        } else if (if9.CE1.read() == 1) {
            m_port.CE1 = if9.CE1;
            m_port.A1 = if9.A1;
        } else if (if10.CE1.read() == 1) {
            m_port.CE1 = if10.CE1;
            m_port.A1 = if10.A1;
        } else if (if11.CE1.read() == 1) {
            m_port.CE1 = if11.CE1;
            m_port.A1 = if11.A1;
        } else if (if12.CE1.read() == 1) {
            m_port.CE1 = if12.CE1;
            m_port.A1 = if12.A1;
        } else if (if13.CE1.read() == 1) {
            m_port.CE1 = if13.CE1;
            m_port.A1 = if13.A1;
        } else if (if14.CE1.read() == 1) {
            m_port.CE1 = if14.CE1;
            m_port.A1 = if14.A1;
        } else if (if15.CE1.read() == 1) {
            m_port.CE1 = if15.CE1;
            m_port.A1 = if15.A1;
        } else if (if16.CE1.read() == 1) {
            m_port.CE1 = if16.CE1;
            m_port.A1 = if16.A1;
        } else if (if17.CE1.read() == 1) {
            m_port.CE1 = if17.CE1;
            m_port.A1 = if17.A1;
        } else if (if18.CE1.read() == 1) {
            m_port.CE1 = if18.CE1;
            m_port.A1 = if18.A1;
        } else if (if19.CE1.read() == 1) {
            m_port.CE1 = if19.CE1;
            m_port.A1 = if19.A1;
        } else if (if20.CE1.read() == 1) {
            m_port.CE1 = if20.CE1;
            m_port.A1 = if20.A1;
        } else if (if21.CE1.read() == 1) {
            m_port.CE1 = if21.CE1;
            m_port.A1 = if21.A1;
        } else if (if22.CE1.read() == 1) {
            m_port.CE1 = if22.CE1;
            m_port.A1 = if22.A1;
        } else if (if23.CE1.read() == 1) {
            m_port.CE1 = if23.CE1;
            m_port.A1 = if23.A1;
        } else if (if24.CE1.read() == 1) {
            m_port.CE1 = if24.CE1;
            m_port.A1 = if24.A1;
        } else if (if25.CE1.read() == 1) {
            m_port.CE1 = if25.CE1;
            m_port.A1 = if25.A1;
        } else if (if26.CE1.read() == 1) {
            m_port.CE1 = if26.CE1;
            m_port.A1 = if26.A1;
        } else if (if27.CE1.read() == 1) {
            m_port.CE1 = if27.CE1;
            m_port.A1 = if27.A1;
        } else if (if28.CE1.read() == 1) {
            m_port.CE1 = if28.CE1;
            m_port.A1 = if28.A1;
        } else if (if29.CE1.read() == 1) {
            m_port.CE1 = if29.CE1;
            m_port.A1 = if29.A1;
        } else if (if30.CE1.read() == 1) {
            m_port.CE1 = if30.CE1;
            m_port.A1 = if30.A1;
        } else if (if31.CE1.read() == 1) {
            m_port.CE1 = if31.CE1;
            m_port.A1 = if31.A1;
        } else if (if32.CE1.read() == 1) {
            m_port.CE1 = if32.CE1;
            m_port.A1 = if32.A1;
        } else {
            m_port.CE1 = 0;
            m_port.A1 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if30
    //
    void gen_out_30()
    {
        if30.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if31
    //
    void gen_out_31()
    {
        if31.Q1 = m_port.Q1; 
    }
    


    //
    // Method to transfer memory output to if32
    //
    void gen_out_32()
    {
        if32.Q1 = m_port.Q1; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE1(iface.CE1);
        m_port.Q1(iface.Q1);
        m_port.A1(iface.A1);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
//
// PIN-level metaport.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3
  : public mac_plm_block_out_dma64::types<HLS_L>
  , public cynw_clk_rst_facade
{
  public:
    HLS_METAPORT;
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>            this_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS, HLS_MAPPING > ref_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef unsigned int                          mask_type;
    class shared_2;
    class shared_3;
    class shared_4;
    class shared_5;
    class shared_6;
    class shared_7;
    class shared_8;
    class shared_9;
    class shared_10;
    class shared_11;
    class shared_12;
    class shared_13;
    class shared_14;
    class shared_15;
    class shared_16;
    class shared_17;
    class shared_18;
    class shared_19;
    class shared_20;
    class shared_21;
    class shared_22;
    class shared_23;
    class shared_24;
    class shared_25;
    class shared_26;
    class shared_27;
    class shared_28;
    class shared_29;
    class shared_30;
    class shared_31;
    class shared_32;

    port_3( 
		const char* in_name=sc_gen_unique_name("port_3"),
		  unsigned options_in=0)
        : m_options(options_in|HLS_DEF_CHAIN_MEM_IO | HLS_DEF_NO_SPEC_READS), 
          CE2( HLS_CAT_NAMES(in_name,"CE2") ),
        Q2( HLS_CAT_NAMES(in_name,"Q2") ),
        A2( HLS_CAT_NAMES(in_name,"A2") ),
          m_reset_done(false)
    {
        p_name = new char[strlen(in_name)+1];
        strcpy(p_name,in_name);
#if !STRATUS
        m_tx_stream = 0;
#endif
        m_stream_name = (std::string("sc_main.") + std::string(::sc_core::sc_get_curr_simcontext()->hierarchy_curr()->name()) + std::string(".") + std::string(in_name));
    }

    ~port_3()
    {
        delete p_name;
	}

    CYNW_MEM_SQUARE_BRACKETS( ref_type )
  public:
	char* p_name;
	bool m_reset_done;

	const char* name() { return p_name; }

    cynw_scv_memory_tx_stream< address_type, data_type >* tx_stream()
    {
#if !STRATUS
      if (m_tx_stream == 0) {
        esc_enable_scv_logging();
        m_tx_stream = new cynw_scv_memory_tx_stream< address_type, data_type >( m_stream_name.c_str(), esc_get_scv_tr_db() );
	  }
      return m_tx_stream;
#else
      return 0;
#endif
    }

    void nb_get_start( const address_type& address )
    {
        this->CE2 = 1;
        this->A2 = address;
    }
    bool nb_get( data_type& val )
    {
        val = this->Q2.read();
        return true;
    }
    sc_event_finder& value_changed()
    {
        return this->Q2.value_changed();
    }
    data_type get( const address_type& address )
    {
        HLS_DEFINE_FLOATING_PROTOCOL( 0.06, 0.2, 1, this, this->m_options|HLS::HLS_MEM_READ_FP|HLS::HLS_UNSTALLABLE_FP, address, "mem_read" );
        HLS_SET_OUTPUT_OPTIONS(this->A2,ASYNC_POWER_HOLD);
        this->check_reset();
        cynw_scv_memory_tx< address_type, data_type > tx = this->tx_stream()->begin_read_tx( address );
        nb_get_start(address);
        ::wait(1);
        nb_deassert();
        ::wait( 1 );
        if (this->m_options & HLS::HLS_USING_REG_PORT) {
            ::wait(1);
            ::wait(1);
        }
        if (this->m_options & HLS::HLS_USING_REG_EX_PORT) {
            ::wait(1);
            ::wait(1);
        }

        data_type val;
        nb_get(val);
        this->tx_stream()->end_read_tx( tx, val );
        return val;
    }
    void put( const address_type& address, const data_type& data )
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        printf("WARNING: %s: Attempting to write to a read-only memory port\n", name());
#endif
    }
    void reset( bool control_only=true )
    {
        HLS_DEFINE_PROTOCOL("reset");
        this->m_reset_done = true;
        this->CE2 = 0;
        if (!control_only) this->A2 = 0;
        HLS_SUPPRESS_MSG_SYM( 1435, this->A2 );
        HLS_SET_STALL_VALUE( this->CE2, 0);
    }

    void nb_deassert()
    {
        this->m_reset_done = true;
        this->CE2 = 0;
    }

    void check_reset()
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        if (!m_reset_done)
        {
            printf("WARNING: Access to external memory port '%s' before calling reset()\n", name());
            m_reset_done = true;
        }
#endif
    }

    template <class W>
    void bind( W& iface )
    {
        this->CE2(iface.CE2);
        this->Q2(iface.Q2);
        this->A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

  public:
	unsigned m_options;
#if !STRATUS
    cynw_scv_memory_tx_stream< address_type, data_type >* m_tx_stream;
#endif
	std::string m_stream_name;

   sc_out< bool > CE2;
   sc_in< sc_uint<32> > Q2;
   sc_out< sc_uint<7> > A2;
 
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level export metaport.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L>
class mac_plm_block_out_dma64::ex_port_3
  : public mac_plm_block_out_dma64::types<HLS_L>
{
  public:
    HLS_METAPORT;
    typedef mac_plm_block_out_dma64::ex_port_3<HLS_L>            this_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    ex_port_3( const char* in_name=sc_gen_unique_name("ex_port_3") )
        : CE2( HLS_CAT_NAMES(in_name,"CE2") ),
        Q2( HLS_CAT_NAMES(in_name,"Q2") ),
        A2( HLS_CAT_NAMES(in_name,"A2") )
    {}

  public:


    template <class W>
    void bind( W& iface )
    {
        CE2(iface.CE2);
        Q2(iface.Q2);
        A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

  public:

   sc_export< sc_signal_out_if< bool > > CE2;
   sc_export< sc_signal_in_if< sc_uint<32> > > Q2;
   sc_export< sc_signal_out_if< sc_uint<7> > > A2;
 
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level export metaport with a register included.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L>
class mac_plm_block_out_dma64::reg_ex_port_3
  : public mac_plm_block_out_dma64::ex_port_3<HLS_L>,
	public sc_module,
	public cynw_clk_rst

{
  public:
    typedef mac_plm_block_out_dma64::reg_ex_port_3<HLS_L>            this_type;
    typedef mac_plm_block_out_dma64::ex_port_3<HLS_L>            base_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    SC_HAS_PROCESS(this_type);

    reg_ex_port_3( sc_module_name in_name=sc_module_name( sc_gen_unique_name("reg_ex_port_3") ) )
        : base_type(in_name)
		, sc_module(in_name)
		, CE2_reg( HLS_CAT_NAMES(in_name,"CE2_reg") ),
        Q2_reg( HLS_CAT_NAMES(in_name,"Q2_reg") ),
        A2_reg( HLS_CAT_NAMES(in_name,"A2_reg") )
		, CE2_p( HLS_CAT_NAMES(in_name,"CE2_p") ),
        Q2_p( HLS_CAT_NAMES(in_name,"Q2_p") ),
        A2_p( HLS_CAT_NAMES(in_name,"A2_p") )
    {
        this->CE2(CE2_reg);
        this->Q2(Q2_reg);
        this->A2(A2_reg);


        SC_METHOD(do_reg);
        sensitive << clk.pos();
        dont_initialize();

	}

  public:


    template <class W>
    void bind( W& iface )
    {
        CE2_p(iface.CE2);
        Q2_p(iface.Q2);
        A2_p(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

    void do_reg()
    {
        if ( rst_active() ) 
        {
	         HLS_SET_IS_RESET_BLOCK("do_reg");
            CE2_p = 0;
        } else {
            CE2_p.write( CE2_reg.read() );
            Q2_reg.write( Q2_p.read() );
            A2_p.write( A2_reg.read() );

        }
    }
  public:

        sc_signal< bool > CE2_reg;
        sc_signal< sc_uint<32> > Q2_reg;
        sc_signal< sc_uint<7> > A2_reg;
        sc_out< bool > CE2_p;
        sc_out< sc_uint<7> > A2_p;
        sc_in< sc_uint<32> > Q2_p;
};

#endif

#if !defined(STRATUS_VLG)
//
// PIN-level metaport with stalling support.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::stall_port_3
  : public mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>,
    public sc_module,
    public cynw_clk_rst
{
  public:
    typedef mac_plm_block_out_dma64::stall_port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>       this_type;
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>       base_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS, HLS_MAPPING > ref_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef unsigned int                          mask_type;

    SC_HAS_PROCESS(this_type);

    HLS_EXPOSE_PORT( OFF, clk );
    HLS_EXPOSE_PORT( OFF, rst );

    sc_signal<data_type> fifo_dout;
    sc_signal<bool> tx_start;
    sc_signal<bool> tx_end;
    sc_signal<bool> tx_running;
    sc_signal<bool> m_stalling;
    sc_signal<bool> CE2_req;

    stall_port_3( 
	  sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3") ), unsigned options_in=0)
      : sc_module(in_name),
		cynw_clk_rst(in_name),
		base_type(in_name,options_in|HLS_DEF_CHAIN_MEM_IO | HLS_DEF_NO_SPEC_READS),
		fifo(in_name),
        tx_start("tx_start"),
        tx_end("tx_end"),
        m_stalling("m_stalling")
    {

      fifo.stalling(m_stalling);
      fifo.start(tx_start);
      fifo.end(tx_end);
      fifo.running(tx_running);
      fifo.din(this->Q2);
      fifo.dout(fifo_dout);
      fifo.clk_rst(*this);
      HLS_SET_OUTPUT_OPTIONS( this->CE2, ASYNC_HOLD_WEAK_TIMING );

      SC_METHOD(gen_CE2);
	  sensitive << CE2_req;
	  sensitive << m_stalling;

    }

    CYNW_MEM_SQUARE_BRACKETS( ref_type )

	CYNW_CLK_RST_FUNCS

  public:

    // 
    // Fifo for storing memory outputs during a stall.
    // Depth matches the latency of the memory.
    //
    cynw_stall_fifo< data_type, 1, HLS_L > fifo;


    void nb_get_start( const address_type& address )
    {
        this->CE2_req = 1;
        this->A2 = address;
        tx_start = 1;
    }
    bool nb_get( data_type& val )
    {
        val = this->fifo_dout.read();
        return true;
    }
    data_type get( const address_type& address )
    {
        HLS_DEFINE_FLOATING_PROTOCOL( 0.06, -1, 1, this, this->m_options|HLS::HLS_MEM_READ_FP, address, "mem_read" );
        HLS_SET_OUTPUT_OPTIONS(this->A2,ASYNC_POWER_HOLD);
        this->check_reset();
        cynw_scv_memory_tx< address_type, data_type > tx = this->tx_stream()->begin_read_tx( address );
        nb_get_start(address);
        ::wait(1);
        nb_deassert();
        ::wait( 1 );
        if (this->m_options & HLS::HLS_USING_REG_PORT) {
            ::wait(1);
            ::wait(1);
        }
        if (this->m_options & HLS::HLS_USING_REG_EX_PORT) {
            ::wait(1);
            ::wait(1);
        }

        data_type val;
        nb_get(val);
        this->tx_stream()->end_read_tx( tx, val );
        return val;
    }
    void put( const address_type& address, const data_type& data )
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        printf("WARNING: %s: Attempting to write to a read-only memory port\n", name());
#endif
    }
    void reset( bool control_only=true )
    {
        HLS_DEFINE_PROTOCOL("reset");
        this->m_reset_done = true;
        this->CE2_req = 0;
        if (!control_only) this->A2 = 0;
        HLS_SUPPRESS_MSG_SYM( 1435, this->A2 );
        tx_start = 0;
        cynw_assert_during_stall( m_stalling, 1 );
        HLS_SET_STALL_VALUE( this->CE2, 0);
    }

    void nb_deassert()
    {
        this->m_reset_done = true;
        this->CE2_req = 0;
        tx_start = 0;
    }

    template <class W>
    void bind( W& iface )
    {
        this->CE2(iface.CE2);
        this->Q2(iface.Q2);
        this->A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	void gen_CE2()
	{
	    this->CE2.write( CE2_req.read() & !m_stalling.read() );
	}
};
#endif

#if !defined(STRATUS_VLG)
//
// PIN-level metaport with an explicit register on DOUT support.
//
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::reg_port_3
  : public mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>,
    public sc_module,
    public cynw_clk_rst
{
  public:
    typedef mac_plm_block_out_dma64::reg_port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>       this_type;
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>       base_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS, HLS_MAPPING > ref_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef unsigned int                          mask_type;

    SC_HAS_PROCESS(this_type);

    HLS_EXPOSE_PORT( OFF, clk );
    HLS_EXPOSE_PORT( OFF, rst );

    reg_port_3( 
	  sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3") ), 
	  unsigned options_in=0 )
      : sc_module(in_name)
	  ,	cynw_clk_rst(in_name)
	  ,	base_type(in_name,options_in|HLS_DEF_CHAIN_MEM_IO | HLS_DEF_NO_SPEC_READS)
    {

	  SC_METHOD(do_reg_c);
      sensitive << clk.pos();
      dont_initialize();

	  SC_METHOD(do_reg_din);
      sensitive << clk.pos();
      dont_initialize();

	  SC_METHOD(do_reg_dout);
      sensitive << clk.pos();
      dont_initialize();

    }

    CYNW_MEM_SQUARE_BRACKETS( ref_type )

	CYNW_CLK_RST_FUNCS

  public:
    void nb_get_start( const address_type& address )
    {
        this->if_inner.CE2 = 1;
        this->if_inner.A2 = address;
    }
    bool nb_get( data_type& val )
    {
        val = this->if_inner.Q2.read();
        return true;
    }
    data_type get( const address_type& address )
    {
        HLS_DEFINE_FLOATING_PROTOCOL( HLS_REG_SETUP_TIME, HLS_REG_DELAY, 1, this, this->m_options|HLS::HLS_MEM_READ_FP|HLS::HLS_UNSTALLABLE_FP, address, "mem_read" );
        HLS_SET_OUTPUT_OPTIONS(this->if_inner.A2,ASYNC_POWER_HOLD);
        this->check_reset();
        cynw_scv_memory_tx< address_type, data_type > tx = this->tx_stream()->begin_read_tx( address );
        nb_get_start(address);
        ::wait(1);
        nb_deassert();
        ::wait( 3 );
        if (this->m_options & HLS::HLS_USING_REG_EX_PORT) {
            ::wait(1);
            ::wait(1);
        }

        data_type val;
        nb_get(val);
        this->tx_stream()->end_read_tx( tx, val );
        return val;
    }
    void put( const address_type& address, const data_type& data )
    {
#if !defined(STRATUS_HLS) && !defined(STRATUS_VLG) && !defined(BDW_EXTRACT)
        printf("WARNING: %s: Attempting to write to a read-only memory port\n", name());
#endif
    }
    void reset( bool control_only=true )
    {
        HLS_DEFINE_PROTOCOL("reset");
        this->m_reset_done = true;
        this->if_inner.CE2 = 0;
        if (!control_only) this->if_inner.A2 = 0;
        HLS_SUPPRESS_MSG_SYM( 1435, this->if_inner.A2 );
        HLS_SET_STALL_VALUE( this->if_inner.CE2, 0);
    }

    void nb_deassert()
    {
        this->m_reset_done = true;
        this->if_inner.CE2 = 0;
    }

    template <class W>
    void bind( W& iface )
    {
        this->CE2(iface.CE2);
        this->Q2(iface.Q2);
        this->A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }
    mac_plm_block_out_dma64_ext_signals_3    if_inner;

    void do_reg_c()
    {
        if ( rst_active() ) 
        {
            HLS_SET_IS_RESET_BLOCK("do_reg_c");
            this->CE2 = 0;
        } else {
            this->CE2.write( if_inner.CE2.read() );

        }
    }

    void do_reg_din()
    {
	bool rst = rst_active(); 
         if ( if_inner.CE2.read() == 1 ) {
             HLS_REMOVE_CONTROL(OFF,"");
            this->A2.write( if_inner.A2.read() );
         }

    }

    void do_reg_dout()
    {
	bool rst = rst_active(); 
            if_inner.Q2.write( this->Q2.read() );

    }

};
#endif

#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_2 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_2                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_2);
    shared_2( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_2") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_3 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_3                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_3);
    shared_3( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_3") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_4 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_4                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_4);
    shared_4( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_4") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_5 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_5                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_5);
    shared_5( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_5") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_6 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_6                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_6);
    shared_6( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_6") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_7 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_7                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_7);
    shared_7( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_7") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_8 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_8                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_8);
    shared_8( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_8") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_9 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_9                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_9);
    shared_9( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_9") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_10 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_10                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_10);
    shared_10( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_10") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_11 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_11                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_11);
    shared_11( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_11") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_12 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_12                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_12);
    shared_12( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_12") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_13 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_13                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_13);
    shared_13( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_13") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_14 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_14                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_14);
    shared_14( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_14") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_15 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_15                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_15);
    shared_15( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_15") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_16 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_16                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_16);
    shared_16( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_16") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_17 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_17                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_17);
    shared_17( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_17") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_18 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_18                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_18);
    shared_18( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_18") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_19 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_19                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_19);
    shared_19( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_19") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_20 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_20                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_20);
    shared_20( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_20") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_21 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_21                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_21);
    shared_21( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_21") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_22 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_22                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_22);
    shared_22( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_22") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_23 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_23                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_23);
    shared_23( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_23") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.CE2;
        sensitive << if23.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;
    mac_plm_block_out_dma64_ext_signals_3    if23;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            m_port.CE2 = if23.CE2;
            m_port.A2 = if23.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_24 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_24                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_24);
    shared_24( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_24") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.CE2;
        sensitive << if24.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;
    mac_plm_block_out_dma64_ext_signals_3    if23;
    mac_plm_block_out_dma64_ext_signals_3    if24;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            m_port.CE2 = if23.CE2;
            m_port.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            m_port.CE2 = if24.CE2;
            m_port.A2 = if24.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_25 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_25                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_25);
    shared_25( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_25") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.CE2;
        sensitive << if25.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;
    mac_plm_block_out_dma64_ext_signals_3    if23;
    mac_plm_block_out_dma64_ext_signals_3    if24;
    mac_plm_block_out_dma64_ext_signals_3    if25;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            m_port.CE2 = if23.CE2;
            m_port.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            m_port.CE2 = if24.CE2;
            m_port.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            m_port.CE2 = if25.CE2;
            m_port.A2 = if25.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_26 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_26                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_26);
    shared_26( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_26") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.CE2;
        sensitive << if26.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;
    mac_plm_block_out_dma64_ext_signals_3    if23;
    mac_plm_block_out_dma64_ext_signals_3    if24;
    mac_plm_block_out_dma64_ext_signals_3    if25;
    mac_plm_block_out_dma64_ext_signals_3    if26;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            m_port.CE2 = if23.CE2;
            m_port.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            m_port.CE2 = if24.CE2;
            m_port.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            m_port.CE2 = if25.CE2;
            m_port.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            m_port.CE2 = if26.CE2;
            m_port.A2 = if26.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_27 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_27                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_27);
    shared_27( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_27") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.CE2;
        sensitive << if27.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;
    mac_plm_block_out_dma64_ext_signals_3    if23;
    mac_plm_block_out_dma64_ext_signals_3    if24;
    mac_plm_block_out_dma64_ext_signals_3    if25;
    mac_plm_block_out_dma64_ext_signals_3    if26;
    mac_plm_block_out_dma64_ext_signals_3    if27;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            m_port.CE2 = if23.CE2;
            m_port.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            m_port.CE2 = if24.CE2;
            m_port.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            m_port.CE2 = if25.CE2;
            m_port.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            m_port.CE2 = if26.CE2;
            m_port.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            m_port.CE2 = if27.CE2;
            m_port.A2 = if27.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_28 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_28                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_28);
    shared_28( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_28") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.CE2;
        sensitive << if27.A2;
        sensitive << if28.CE2;
        sensitive << if28.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_28);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;
    mac_plm_block_out_dma64_ext_signals_3    if23;
    mac_plm_block_out_dma64_ext_signals_3    if24;
    mac_plm_block_out_dma64_ext_signals_3    if25;
    mac_plm_block_out_dma64_ext_signals_3    if26;
    mac_plm_block_out_dma64_ext_signals_3    if27;
    mac_plm_block_out_dma64_ext_signals_3    if28;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            m_port.CE2 = if23.CE2;
            m_port.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            m_port.CE2 = if24.CE2;
            m_port.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            m_port.CE2 = if25.CE2;
            m_port.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            m_port.CE2 = if26.CE2;
            m_port.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            m_port.CE2 = if27.CE2;
            m_port.A2 = if27.A2;
        } else if (if28.CE2.read() == 1) {
            m_port.CE2 = if28.CE2;
            m_port.A2 = if28.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_29 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_29                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_29);
    shared_29( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_29") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.CE2;
        sensitive << if27.A2;
        sensitive << if28.CE2;
        sensitive << if28.A2;
        sensitive << if29.CE2;
        sensitive << if29.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_28);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_29);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;
    mac_plm_block_out_dma64_ext_signals_3    if23;
    mac_plm_block_out_dma64_ext_signals_3    if24;
    mac_plm_block_out_dma64_ext_signals_3    if25;
    mac_plm_block_out_dma64_ext_signals_3    if26;
    mac_plm_block_out_dma64_ext_signals_3    if27;
    mac_plm_block_out_dma64_ext_signals_3    if28;
    mac_plm_block_out_dma64_ext_signals_3    if29;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            m_port.CE2 = if23.CE2;
            m_port.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            m_port.CE2 = if24.CE2;
            m_port.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            m_port.CE2 = if25.CE2;
            m_port.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            m_port.CE2 = if26.CE2;
            m_port.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            m_port.CE2 = if27.CE2;
            m_port.A2 = if27.A2;
        } else if (if28.CE2.read() == 1) {
            m_port.CE2 = if28.CE2;
            m_port.A2 = if28.A2;
        } else if (if29.CE2.read() == 1) {
            m_port.CE2 = if29.CE2;
            m_port.A2 = if29.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_30 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_30                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_30);
    shared_30( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_30") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.CE2;
        sensitive << if27.A2;
        sensitive << if28.CE2;
        sensitive << if28.A2;
        sensitive << if29.CE2;
        sensitive << if29.A2;
        sensitive << if30.CE2;
        sensitive << if30.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_28);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_29);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_30);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;
    mac_plm_block_out_dma64_ext_signals_3    if23;
    mac_plm_block_out_dma64_ext_signals_3    if24;
    mac_plm_block_out_dma64_ext_signals_3    if25;
    mac_plm_block_out_dma64_ext_signals_3    if26;
    mac_plm_block_out_dma64_ext_signals_3    if27;
    mac_plm_block_out_dma64_ext_signals_3    if28;
    mac_plm_block_out_dma64_ext_signals_3    if29;
    mac_plm_block_out_dma64_ext_signals_3    if30;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            m_port.CE2 = if23.CE2;
            m_port.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            m_port.CE2 = if24.CE2;
            m_port.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            m_port.CE2 = if25.CE2;
            m_port.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            m_port.CE2 = if26.CE2;
            m_port.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            m_port.CE2 = if27.CE2;
            m_port.A2 = if27.A2;
        } else if (if28.CE2.read() == 1) {
            m_port.CE2 = if28.CE2;
            m_port.A2 = if28.A2;
        } else if (if29.CE2.read() == 1) {
            m_port.CE2 = if29.CE2;
            m_port.A2 = if29.A2;
        } else if (if30.CE2.read() == 1) {
            m_port.CE2 = if30.CE2;
            m_port.A2 = if30.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if30
    //
    void gen_out_30()
    {
        if30.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_31 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_31                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_31);
    shared_31( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_31") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.CE2;
        sensitive << if27.A2;
        sensitive << if28.CE2;
        sensitive << if28.A2;
        sensitive << if29.CE2;
        sensitive << if29.A2;
        sensitive << if30.CE2;
        sensitive << if30.A2;
        sensitive << if31.CE2;
        sensitive << if31.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_28);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_29);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_30);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_31);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;
    mac_plm_block_out_dma64_ext_signals_3    if23;
    mac_plm_block_out_dma64_ext_signals_3    if24;
    mac_plm_block_out_dma64_ext_signals_3    if25;
    mac_plm_block_out_dma64_ext_signals_3    if26;
    mac_plm_block_out_dma64_ext_signals_3    if27;
    mac_plm_block_out_dma64_ext_signals_3    if28;
    mac_plm_block_out_dma64_ext_signals_3    if29;
    mac_plm_block_out_dma64_ext_signals_3    if30;
    mac_plm_block_out_dma64_ext_signals_3    if31;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            m_port.CE2 = if23.CE2;
            m_port.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            m_port.CE2 = if24.CE2;
            m_port.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            m_port.CE2 = if25.CE2;
            m_port.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            m_port.CE2 = if26.CE2;
            m_port.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            m_port.CE2 = if27.CE2;
            m_port.A2 = if27.A2;
        } else if (if28.CE2.read() == 1) {
            m_port.CE2 = if28.CE2;
            m_port.A2 = if28.A2;
        } else if (if29.CE2.read() == 1) {
            m_port.CE2 = if29.CE2;
            m_port.A2 = if29.A2;
        } else if (if30.CE2.read() == 1) {
            m_port.CE2 = if30.CE2;
            m_port.A2 = if30.A2;
        } else if (if31.CE2.read() == 1) {
            m_port.CE2 = if31.CE2;
            m_port.A2 = if31.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if30
    //
    void gen_out_30()
    {
        if30.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if31
    //
    void gen_out_31()
    {
        if31.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_L,typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>::shared_32 :
    public sc_module,
	public cynw_clk_rst_facade
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<HLS_L,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_32                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
  public:
    SC_HAS_PROCESS(shared_32);
    shared_32( sc_module_name in_name=sc_module_name( sc_gen_unique_name("shared_32") ), unsigned options_in=0)
      : sc_module(in_name)
      , m_port(in_name)
      , m_options(options_in)
    {


        SC_METHOD(mux_inputs);
        sensitive << if1.CE2;
        sensitive << if1.A2;
        sensitive << if2.CE2;
        sensitive << if2.A2;
        sensitive << if3.CE2;
        sensitive << if3.A2;
        sensitive << if4.CE2;
        sensitive << if4.A2;
        sensitive << if5.CE2;
        sensitive << if5.A2;
        sensitive << if6.CE2;
        sensitive << if6.A2;
        sensitive << if7.CE2;
        sensitive << if7.A2;
        sensitive << if8.CE2;
        sensitive << if8.A2;
        sensitive << if9.CE2;
        sensitive << if9.A2;
        sensitive << if10.CE2;
        sensitive << if10.A2;
        sensitive << if11.CE2;
        sensitive << if11.A2;
        sensitive << if12.CE2;
        sensitive << if12.A2;
        sensitive << if13.CE2;
        sensitive << if13.A2;
        sensitive << if14.CE2;
        sensitive << if14.A2;
        sensitive << if15.CE2;
        sensitive << if15.A2;
        sensitive << if16.CE2;
        sensitive << if16.A2;
        sensitive << if17.CE2;
        sensitive << if17.A2;
        sensitive << if18.CE2;
        sensitive << if18.A2;
        sensitive << if19.CE2;
        sensitive << if19.A2;
        sensitive << if20.CE2;
        sensitive << if20.A2;
        sensitive << if21.CE2;
        sensitive << if21.A2;
        sensitive << if22.CE2;
        sensitive << if22.A2;
        sensitive << if23.CE2;
        sensitive << if23.A2;
        sensitive << if24.CE2;
        sensitive << if24.A2;
        sensitive << if25.CE2;
        sensitive << if25.A2;
        sensitive << if26.CE2;
        sensitive << if26.A2;
        sensitive << if27.CE2;
        sensitive << if27.A2;
        sensitive << if28.CE2;
        sensitive << if28.A2;
        sensitive << if29.CE2;
        sensitive << if29.A2;
        sensitive << if30.CE2;
        sensitive << if30.A2;
        sensitive << if31.CE2;
        sensitive << if31.A2;
        sensitive << if32.CE2;
        sensitive << if32.A2;

        SC_METHOD(gen_out_1);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_2);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_3);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_4);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_5);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_6);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_7);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_8);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_9);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_10);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_11);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_12);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_13);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_14);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_15);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_16);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_17);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_18);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_19);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_20);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_21);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_22);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_23);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_24);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_25);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_26);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_27);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_28);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_29);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_30);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_31);
        sensitive << m_port.Q2;

        SC_METHOD(gen_out_32);
        sensitive << m_port.Q2;
    }

  public:

    //
    // Interface signals.
    //
    mac_plm_block_out_dma64_ext_signals_3    if1;
    mac_plm_block_out_dma64_ext_signals_3    if2;
    mac_plm_block_out_dma64_ext_signals_3    if3;
    mac_plm_block_out_dma64_ext_signals_3    if4;
    mac_plm_block_out_dma64_ext_signals_3    if5;
    mac_plm_block_out_dma64_ext_signals_3    if6;
    mac_plm_block_out_dma64_ext_signals_3    if7;
    mac_plm_block_out_dma64_ext_signals_3    if8;
    mac_plm_block_out_dma64_ext_signals_3    if9;
    mac_plm_block_out_dma64_ext_signals_3    if10;
    mac_plm_block_out_dma64_ext_signals_3    if11;
    mac_plm_block_out_dma64_ext_signals_3    if12;
    mac_plm_block_out_dma64_ext_signals_3    if13;
    mac_plm_block_out_dma64_ext_signals_3    if14;
    mac_plm_block_out_dma64_ext_signals_3    if15;
    mac_plm_block_out_dma64_ext_signals_3    if16;
    mac_plm_block_out_dma64_ext_signals_3    if17;
    mac_plm_block_out_dma64_ext_signals_3    if18;
    mac_plm_block_out_dma64_ext_signals_3    if19;
    mac_plm_block_out_dma64_ext_signals_3    if20;
    mac_plm_block_out_dma64_ext_signals_3    if21;
    mac_plm_block_out_dma64_ext_signals_3    if22;
    mac_plm_block_out_dma64_ext_signals_3    if23;
    mac_plm_block_out_dma64_ext_signals_3    if24;
    mac_plm_block_out_dma64_ext_signals_3    if25;
    mac_plm_block_out_dma64_ext_signals_3    if26;
    mac_plm_block_out_dma64_ext_signals_3    if27;
    mac_plm_block_out_dma64_ext_signals_3    if28;
    mac_plm_block_out_dma64_ext_signals_3    if29;
    mac_plm_block_out_dma64_ext_signals_3    if30;
    mac_plm_block_out_dma64_ext_signals_3    if31;
    mac_plm_block_out_dma64_ext_signals_3    if32;


    unsigned m_options;

    // 
    // MUX for inputs based on which input is active.
    // Precedence is given to the first port.
    // If neither port is active, the memory inputs are 
    // written to an inactive state.
    //
    void mux_inputs()
    {
        HLS_REMOVE_CONTROL(ON,"");
       if ( (m_options & (HLS::HLS_USING_REG_PORT | HLS::HLS_USING_REG_EX_PORT)) == 0 ) {
            HLS_SET_OUTPUT_DELAY( m_port.CE2, 0.06 );
            HLS_SET_OUTPUT_DELAY( m_port.A2, 0.06 );
       }
        if (if1.CE2.read() == 1) {
            m_port.CE2 = if1.CE2;
            m_port.A2 = if1.A2;
        } else if (if2.CE2.read() == 1) {
            m_port.CE2 = if2.CE2;
            m_port.A2 = if2.A2;
        } else if (if3.CE2.read() == 1) {
            m_port.CE2 = if3.CE2;
            m_port.A2 = if3.A2;
        } else if (if4.CE2.read() == 1) {
            m_port.CE2 = if4.CE2;
            m_port.A2 = if4.A2;
        } else if (if5.CE2.read() == 1) {
            m_port.CE2 = if5.CE2;
            m_port.A2 = if5.A2;
        } else if (if6.CE2.read() == 1) {
            m_port.CE2 = if6.CE2;
            m_port.A2 = if6.A2;
        } else if (if7.CE2.read() == 1) {
            m_port.CE2 = if7.CE2;
            m_port.A2 = if7.A2;
        } else if (if8.CE2.read() == 1) {
            m_port.CE2 = if8.CE2;
            m_port.A2 = if8.A2;
        } else if (if9.CE2.read() == 1) {
            m_port.CE2 = if9.CE2;
            m_port.A2 = if9.A2;
        } else if (if10.CE2.read() == 1) {
            m_port.CE2 = if10.CE2;
            m_port.A2 = if10.A2;
        } else if (if11.CE2.read() == 1) {
            m_port.CE2 = if11.CE2;
            m_port.A2 = if11.A2;
        } else if (if12.CE2.read() == 1) {
            m_port.CE2 = if12.CE2;
            m_port.A2 = if12.A2;
        } else if (if13.CE2.read() == 1) {
            m_port.CE2 = if13.CE2;
            m_port.A2 = if13.A2;
        } else if (if14.CE2.read() == 1) {
            m_port.CE2 = if14.CE2;
            m_port.A2 = if14.A2;
        } else if (if15.CE2.read() == 1) {
            m_port.CE2 = if15.CE2;
            m_port.A2 = if15.A2;
        } else if (if16.CE2.read() == 1) {
            m_port.CE2 = if16.CE2;
            m_port.A2 = if16.A2;
        } else if (if17.CE2.read() == 1) {
            m_port.CE2 = if17.CE2;
            m_port.A2 = if17.A2;
        } else if (if18.CE2.read() == 1) {
            m_port.CE2 = if18.CE2;
            m_port.A2 = if18.A2;
        } else if (if19.CE2.read() == 1) {
            m_port.CE2 = if19.CE2;
            m_port.A2 = if19.A2;
        } else if (if20.CE2.read() == 1) {
            m_port.CE2 = if20.CE2;
            m_port.A2 = if20.A2;
        } else if (if21.CE2.read() == 1) {
            m_port.CE2 = if21.CE2;
            m_port.A2 = if21.A2;
        } else if (if22.CE2.read() == 1) {
            m_port.CE2 = if22.CE2;
            m_port.A2 = if22.A2;
        } else if (if23.CE2.read() == 1) {
            m_port.CE2 = if23.CE2;
            m_port.A2 = if23.A2;
        } else if (if24.CE2.read() == 1) {
            m_port.CE2 = if24.CE2;
            m_port.A2 = if24.A2;
        } else if (if25.CE2.read() == 1) {
            m_port.CE2 = if25.CE2;
            m_port.A2 = if25.A2;
        } else if (if26.CE2.read() == 1) {
            m_port.CE2 = if26.CE2;
            m_port.A2 = if26.A2;
        } else if (if27.CE2.read() == 1) {
            m_port.CE2 = if27.CE2;
            m_port.A2 = if27.A2;
        } else if (if28.CE2.read() == 1) {
            m_port.CE2 = if28.CE2;
            m_port.A2 = if28.A2;
        } else if (if29.CE2.read() == 1) {
            m_port.CE2 = if29.CE2;
            m_port.A2 = if29.A2;
        } else if (if30.CE2.read() == 1) {
            m_port.CE2 = if30.CE2;
            m_port.A2 = if30.A2;
        } else if (if31.CE2.read() == 1) {
            m_port.CE2 = if31.CE2;
            m_port.A2 = if31.A2;
        } else if (if32.CE2.read() == 1) {
            m_port.CE2 = if32.CE2;
            m_port.A2 = if32.A2;
        } else {
            m_port.CE2 = 0;
            m_port.A2 = 0;

        }
    }


    //
    // Method to transfer memory output to if1
    //
    void gen_out_1()
    {
        if1.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if2
    //
    void gen_out_2()
    {
        if2.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if3
    //
    void gen_out_3()
    {
        if3.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if4
    //
    void gen_out_4()
    {
        if4.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if5
    //
    void gen_out_5()
    {
        if5.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if6
    //
    void gen_out_6()
    {
        if6.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if7
    //
    void gen_out_7()
    {
        if7.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if8
    //
    void gen_out_8()
    {
        if8.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if9
    //
    void gen_out_9()
    {
        if9.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if10
    //
    void gen_out_10()
    {
        if10.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if11
    //
    void gen_out_11()
    {
        if11.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if12
    //
    void gen_out_12()
    {
        if12.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if13
    //
    void gen_out_13()
    {
        if13.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if14
    //
    void gen_out_14()
    {
        if14.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if15
    //
    void gen_out_15()
    {
        if15.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if16
    //
    void gen_out_16()
    {
        if16.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if17
    //
    void gen_out_17()
    {
        if17.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if18
    //
    void gen_out_18()
    {
        if18.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if19
    //
    void gen_out_19()
    {
        if19.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if20
    //
    void gen_out_20()
    {
        if20.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if21
    //
    void gen_out_21()
    {
        if21.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if22
    //
    void gen_out_22()
    {
        if22.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if23
    //
    void gen_out_23()
    {
        if23.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if24
    //
    void gen_out_24()
    {
        if24.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if25
    //
    void gen_out_25()
    {
        if25.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if26
    //
    void gen_out_26()
    {
        if26.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if27
    //
    void gen_out_27()
    {
        if27.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if28
    //
    void gen_out_28()
    {
        if28.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if29
    //
    void gen_out_29()
    {
        if29.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if30
    //
    void gen_out_30()
    {
        if30.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if31
    //
    void gen_out_31()
    {
        if31.Q2 = m_port.Q2; 
    }
    


    //
    // Method to transfer memory output to if32
    //
    void gen_out_32()
    {
        if32.Q2 = m_port.Q2; 
    }
    


    template <class W>
    void bind( W& iface )
    {
        m_port.CE2(iface.CE2);
        m_port.Q2(iface.Q2);
        m_port.A2(iface.A2);

    }

    template <class W>
    void operator()( W& iface )
    {
      bind(iface);
    }

	port_type m_port;
};
#endif


#if !defined(STRATUS_VLG)
//
// Simple memory model containing a SystemC array 
// to represent the memory.
//
class mac_plm_block_out_dma64_untimed_model
  : public sc_module,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64_untimed_model            this_type;
    typedef sc_uint<7>              address_type;
    typedef sc_uint<32>               data_type;
  public:
    SC_CTOR(mac_plm_block_out_dma64_untimed_model)
    {

        esc_enable_scv_logging();
        m_tx_stream = new cynw_scv_memory_tx_stream< sc_uint<7>, sc_uint<32> >( (std::string("sc_main.") + std::string(this->name())).c_str(), esc_get_scv_tr_db() );
    }

    data_type get( const address_type& address )
    {
#if defined(__GNUC__)
      if((int)(address) >=  100) return 0;
#endif
        m_tx_stream->gen_read_tx( address.to_uint(), mem[address.to_uint()] );

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s: %s: read 0x%s from 0x%x\n", name(), sc_time_stamp().to_string().c_str(), mem[address.to_uint()].to_string(SC_HEX).c_str(), (int)address.to_uint());
#endif
        return mem[address.to_uint()];
}


    void put( const address_type& address, const data_type& data )
    {
#if defined(__GNUC__)
      if((int)(address) >=  100) return;
#endif
        m_tx_stream->gen_write_tx( address.to_uint(), data );

#if defined(__GNUC__) && defined(BDW_TRACE_MEMS)
        fprintf(stderr,"TRACE: %s%s: %s: write 0x%s to 0x%x\n", name(), "", sc_time_stamp().to_string().c_str(), data.to_string(SC_HEX).c_str(), (int)address.to_uint());
#endif
        mem[address.to_uint()] = data;
    }


    cynw_scv_memory_tx_stream< sc_uint<7>, sc_uint<32> >* m_tx_stream;

    // 
    // Array containing memory contents
    //
    sc_uint<32> mem[100];
};
#endif


#if !defined(STRATUS_VLG)
//
// TLM metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_clk_rst_facade,
    public sc_port< cynw_memory_if< sc_uint<7>, sc_uint<32> > >
{
  public:
    HLS_METAPORT;

    typedef mac_plm_block_out_dma64::port< CYN::TLM, HLS_ACCESS,HLS_MAPPING>   this_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS,HLS_MAPPING > ref_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_port< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;

    port( const char* in_name=sc_gen_unique_name("port") )
      : base_type(in_name)
    {
	}

  public:
};
#endif



#if !defined(STRATUS_VLG)
//
// TLM export metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <>
class mac_plm_block_out_dma64::ex_port<CYN::TLM>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > >
{
  public:
    typedef mac_plm_block_out_dma64::ex_port< CYN::TLM>   this_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    ex_port( const char* name=0 )
      : base_type(name)
    {}

  public:

};
#endif


#if !defined(STRATUS_VLG)
//
// TLM metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_clk_rst_facade,
    public sc_port< cynw_memory_if< sc_uint<7>, sc_uint<32> > >
{
  public:
    HLS_METAPORT;

    typedef mac_plm_block_out_dma64::port_1< CYN::TLM, HLS_ACCESS,HLS_MAPPING>   this_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS,HLS_MAPPING > ref_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_port< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef sc_uint<32>                          mask_type;
    class shared_2;
    class shared_3;
    class shared_4;
    class shared_5;
    class shared_6;
    class shared_7;
    class shared_8;
    class shared_9;
    class shared_10;
    class shared_11;
    class shared_12;
    class shared_13;
    class shared_14;
    class shared_15;
    class shared_16;
    class shared_17;
    class shared_18;
    class shared_19;
    class shared_20;
    class shared_21;
    class shared_22;
    class shared_23;
    class shared_24;
    class shared_25;
    class shared_26;
    class shared_27;
    class shared_28;
    class shared_29;
    class shared_30;
    class shared_31;
    class shared_32;

    port_1( const char* in_name=sc_gen_unique_name("port_1"), unsigned options_in=0 )
      : base_type(in_name)
    {
       m_tx_stream = 0;
       m_stream_name = (std::string("sc_main.") + std::string(this->name()));

	}

    CYNW_MEM_SQUARE_BRACKETS( ref_type )

    cynw_scv_memory_tx_stream< address_type, data_type >* tx_stream()
    {
#if !STRATUS
      if (m_tx_stream == 0) {
        esc_enable_scv_logging();
        m_tx_stream = new cynw_scv_memory_tx_stream< address_type, data_type >( m_stream_name.c_str(), esc_get_scv_tr_db() );
	  }
      return m_tx_stream;
#else
      return 0;
#endif
    }

  public:

    void nb_get_start( const address_type& address )
	{
		m_val = get(address);
	}

    bool nb_get( data_type& val )
    {

        val = m_val;
		return true;
    }

	sc_event_finder& value_changed()
	{
        return *(new sc_event_finder_t<cynw_memory_if< sc_uint<7>, sc_uint<32> > >(*this));
	}

    data_type get( const address_type& address )  
    {

		data_type data = (*this)->get(address);
        this->tx_stream()->gen_read_tx( address, data );
        return data;
    }

    void put( const address_type& address, const data_type& data )
    {
        this->tx_stream()->gen_write_tx( address, data );
        (*this)->put(address,data);
    }

    void nb_put( const address_type& address, const data_type& data )
    {
        (*this)->put(address,data);
    }
    
    void put( const address_type& address, const data_type& data, mask_type mask )
    {
        data_type tmp = (*this)->get(address);
        if( mask[0] == 1 )
        {
            tmp.range(0,0) = data.range(0,0);
        }
        if( mask[1] == 1 )
        {
            tmp.range(1,1) = data.range(1,1);
        }
        if( mask[2] == 1 )
        {
            tmp.range(2,2) = data.range(2,2);
        }
        if( mask[3] == 1 )
        {
            tmp.range(3,3) = data.range(3,3);
        }
        if( mask[4] == 1 )
        {
            tmp.range(4,4) = data.range(4,4);
        }
        if( mask[5] == 1 )
        {
            tmp.range(5,5) = data.range(5,5);
        }
        if( mask[6] == 1 )
        {
            tmp.range(6,6) = data.range(6,6);
        }
        if( mask[7] == 1 )
        {
            tmp.range(7,7) = data.range(7,7);
        }
        if( mask[8] == 1 )
        {
            tmp.range(8,8) = data.range(8,8);
        }
        if( mask[9] == 1 )
        {
            tmp.range(9,9) = data.range(9,9);
        }
        if( mask[10] == 1 )
        {
            tmp.range(10,10) = data.range(10,10);
        }
        if( mask[11] == 1 )
        {
            tmp.range(11,11) = data.range(11,11);
        }
        if( mask[12] == 1 )
        {
            tmp.range(12,12) = data.range(12,12);
        }
        if( mask[13] == 1 )
        {
            tmp.range(13,13) = data.range(13,13);
        }
        if( mask[14] == 1 )
        {
            tmp.range(14,14) = data.range(14,14);
        }
        if( mask[15] == 1 )
        {
            tmp.range(15,15) = data.range(15,15);
        }
        if( mask[16] == 1 )
        {
            tmp.range(16,16) = data.range(16,16);
        }
        if( mask[17] == 1 )
        {
            tmp.range(17,17) = data.range(17,17);
        }
        if( mask[18] == 1 )
        {
            tmp.range(18,18) = data.range(18,18);
        }
        if( mask[19] == 1 )
        {
            tmp.range(19,19) = data.range(19,19);
        }
        if( mask[20] == 1 )
        {
            tmp.range(20,20) = data.range(20,20);
        }
        if( mask[21] == 1 )
        {
            tmp.range(21,21) = data.range(21,21);
        }
        if( mask[22] == 1 )
        {
            tmp.range(22,22) = data.range(22,22);
        }
        if( mask[23] == 1 )
        {
            tmp.range(23,23) = data.range(23,23);
        }
        if( mask[24] == 1 )
        {
            tmp.range(24,24) = data.range(24,24);
        }
        if( mask[25] == 1 )
        {
            tmp.range(25,25) = data.range(25,25);
        }
        if( mask[26] == 1 )
        {
            tmp.range(26,26) = data.range(26,26);
        }
        if( mask[27] == 1 )
        {
            tmp.range(27,27) = data.range(27,27);
        }
        if( mask[28] == 1 )
        {
            tmp.range(28,28) = data.range(28,28);
        }
        if( mask[29] == 1 )
        {
            tmp.range(29,29) = data.range(29,29);
        }
        if( mask[30] == 1 )
        {
            tmp.range(30,30) = data.range(30,30);
        }
        if( mask[31] == 1 )
        {
            tmp.range(31,31) = data.range(31,31);
        }
        (*this)->put(address,tmp);
    }

	void nb_deassert()
    {
    }

    void reset(  bool control_only=true )
    {
    }

  public:
    data_type m_val;
    cynw_scv_memory_tx_stream< address_type, data_type >* m_tx_stream;
    std::string m_stream_name;
};
#endif



#if !defined(STRATUS_VLG)
//
// TLM export metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <>
class mac_plm_block_out_dma64::ex_port_1<CYN::TLM>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > >
{
  public:
    typedef mac_plm_block_out_dma64::ex_port_1< CYN::TLM>   this_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    ex_port_1( const char* name=0, unsigned options_in=0 )
      : base_type(name)
    {}

  public:

};
#endif


#if !defined(STRATUS_VLG)
//
// TLM registered export metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <>
class mac_plm_block_out_dma64::reg_ex_port_1<CYN::TLM>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > >,
	public cynw_clk_rst_facade
{
  public:
    typedef mac_plm_block_out_dma64::reg_ex_port_1< CYN::TLM>   this_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    reg_ex_port_1( const char* name=0, unsigned options_in=0 )
      : base_type(name)
    {}

  public:
};
#endif


#if !defined(STRATUS_VLG)
//
// TLM metaport with stalling support.
//  
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::stall_port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
  : public mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>  base_type;
        
    stall_port_1( const char* name=0, unsigned options_in=0 )
      : base_type(name)
    {   
    }
};
#endif


#if !defined(STRATUS_VLG)
//
// TLM metaport with stalling support.
//  
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::reg_port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
  : public mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
{   
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>  base_type;
    typedef mac_plm_block_out_dma64::reg_port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>  this_type;
        
    reg_port_1( const char* name=0, unsigned options_in=0 )
      : base_type(name), if_inner(*this)
    {   
    }

	this_type& if_inner;
	
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_2 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_2                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_2( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_3 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_3                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_3( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_4 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_4                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_4( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_5 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_5                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_5( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_6 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_6                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_6( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_7 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_7                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_7( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_8 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_8                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_8( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_9 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_9                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_9( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_10 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_10                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_10( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_11 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_11                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_11( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_12 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_12                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_12( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_13 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_13                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_13( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_14 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_14                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_14( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_15 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_15                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_15( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_16 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_16                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_16( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_17 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_17                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_17( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_18 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_18                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_18( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_19 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_19                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_19( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_20 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_20                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_20( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_21 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_21                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_21( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_22 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_22                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_22( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_23 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_23                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_23( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_24 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_24                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_24( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_25 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_25                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_25( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_26 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_26                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_26( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_27 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_27                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_27( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_28 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_28                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_28( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_29 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_29                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_29( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_30 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_30                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_30( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_31 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_31                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_31( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), if31(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;
    if_type&    if31;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_32 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_1<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_32                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_32( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_1")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), if31(*this), if32(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;
    if_type&    if31;
    if_type&    if32;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
//
// TLM metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_clk_rst_facade,
    public sc_port< cynw_memory_if< sc_uint<7>, sc_uint<32> > >
{
  public:
    HLS_METAPORT;

    typedef mac_plm_block_out_dma64::port_2< CYN::TLM, HLS_ACCESS,HLS_MAPPING>   this_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS,HLS_MAPPING > ref_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_port< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef unsigned int                          mask_type;
    class shared_2;
    class shared_3;
    class shared_4;
    class shared_5;
    class shared_6;
    class shared_7;
    class shared_8;
    class shared_9;
    class shared_10;
    class shared_11;
    class shared_12;
    class shared_13;
    class shared_14;
    class shared_15;
    class shared_16;
    class shared_17;
    class shared_18;
    class shared_19;
    class shared_20;
    class shared_21;
    class shared_22;
    class shared_23;
    class shared_24;
    class shared_25;
    class shared_26;
    class shared_27;
    class shared_28;
    class shared_29;
    class shared_30;
    class shared_31;
    class shared_32;

    port_2( const char* in_name=sc_gen_unique_name("port_2"), unsigned options_in=0 )
      : base_type(in_name)
    {
       m_tx_stream = 0;
       m_stream_name = (std::string("sc_main.") + std::string(this->name()));

	}

    CYNW_MEM_SQUARE_BRACKETS( ref_type )

    cynw_scv_memory_tx_stream< address_type, data_type >* tx_stream()
    {
#if !STRATUS
      if (m_tx_stream == 0) {
        esc_enable_scv_logging();
        m_tx_stream = new cynw_scv_memory_tx_stream< address_type, data_type >( m_stream_name.c_str(), esc_get_scv_tr_db() );
	  }
      return m_tx_stream;
#else
      return 0;
#endif
    }

  public:

    void nb_get_start( const address_type& address )
	{
		m_val = get(address);
	}

    bool nb_get( data_type& val )
    {

        val = m_val;
		return true;
    }

	sc_event_finder& value_changed()
	{
        return *(new sc_event_finder_t<cynw_memory_if< sc_uint<7>, sc_uint<32> > >(*this));
	}

    data_type get( const address_type& address )  
    {

		data_type data = (*this)->get(address);
        this->tx_stream()->gen_read_tx( address, data );
        return data;
    }

    void put( const address_type& address, const data_type& data )
    {
        this->tx_stream()->gen_write_tx( address, data );
        (*this)->put(address,data);
    }

    void nb_put( const address_type& address, const data_type& data )
    {
        (*this)->put(address,data);
    }
    

	void nb_deassert()
    {
    }

    void reset(  bool control_only=true )
    {
    }

  public:
    data_type m_val;
    cynw_scv_memory_tx_stream< address_type, data_type >* m_tx_stream;
    std::string m_stream_name;
};
#endif



#if !defined(STRATUS_VLG)
//
// TLM export metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <>
class mac_plm_block_out_dma64::ex_port_2<CYN::TLM>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > >
{
  public:
    typedef mac_plm_block_out_dma64::ex_port_2< CYN::TLM>   this_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    ex_port_2( const char* name=0, unsigned options_in=0 )
      : base_type(name)
    {}

  public:

};
#endif


#if !defined(STRATUS_VLG)
//
// TLM registered export metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <>
class mac_plm_block_out_dma64::reg_ex_port_2<CYN::TLM>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > >,
	public cynw_clk_rst_facade
{
  public:
    typedef mac_plm_block_out_dma64::reg_ex_port_2< CYN::TLM>   this_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    reg_ex_port_2( const char* name=0, unsigned options_in=0 )
      : base_type(name)
    {}

  public:
};
#endif


#if !defined(STRATUS_VLG)
//
// TLM metaport with stalling support.
//  
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::stall_port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
  : public mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>  base_type;
        
    stall_port_2( const char* name=0, unsigned options_in=0 )
      : base_type(name)
    {   
    }
};
#endif


#if !defined(STRATUS_VLG)
//
// TLM metaport with stalling support.
//  
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::reg_port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
  : public mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
{   
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>  base_type;
    typedef mac_plm_block_out_dma64::reg_port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>  this_type;
        
    reg_port_2( const char* name=0, unsigned options_in=0 )
      : base_type(name), if_inner(*this)
    {   
    }

	this_type& if_inner;
	
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_2 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_2                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_2( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_3 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_3                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_3( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_4 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_4                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_4( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_5 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_5                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_5( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_6 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_6                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_6( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_7 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_7                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_7( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_8 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_8                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_8( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_9 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_9                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_9( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_10 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_10                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_10( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_11 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_11                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_11( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_12 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_12                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_12( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_13 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_13                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_13( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_14 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_14                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_14( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_15 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_15                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_15( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_16 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_16                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_16( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_17 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_17                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_17( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_18 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_18                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_18( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_19 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_19                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_19( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_20 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_20                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_20( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_21 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_21                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_21( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_22 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_22                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_22( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_23 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_23                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_23( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_24 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_24                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_24( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_25 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_25                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_25( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_26 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_26                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_26( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_27 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_27                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_27( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_28 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_28                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_28( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_29 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_29                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_29( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_30 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_30                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_30( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_31 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_31                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_31( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), if31(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;
    if_type&    if31;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_32 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_2<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_32                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_32( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_2")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), if31(*this), if32(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;
    if_type&    if31;
    if_type&    if32;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
//
// TLM metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_clk_rst_facade,
    public sc_port< cynw_memory_if< sc_uint<7>, sc_uint<32> > >
{
  public:
    HLS_METAPORT;

    typedef mac_plm_block_out_dma64::port_3< CYN::TLM, HLS_ACCESS,HLS_MAPPING>   this_type;
    typedef cynw_memory_ref< this_type, HLS_ACCESS,HLS_MAPPING > ref_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_port< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
    typedef sc_uint<7>                       address_type;
    typedef sc_uint<32>                      data_type;
    typedef unsigned int                          mask_type;
    class shared_2;
    class shared_3;
    class shared_4;
    class shared_5;
    class shared_6;
    class shared_7;
    class shared_8;
    class shared_9;
    class shared_10;
    class shared_11;
    class shared_12;
    class shared_13;
    class shared_14;
    class shared_15;
    class shared_16;
    class shared_17;
    class shared_18;
    class shared_19;
    class shared_20;
    class shared_21;
    class shared_22;
    class shared_23;
    class shared_24;
    class shared_25;
    class shared_26;
    class shared_27;
    class shared_28;
    class shared_29;
    class shared_30;
    class shared_31;
    class shared_32;

    port_3( const char* in_name=sc_gen_unique_name("port_3"), unsigned options_in=0 )
      : base_type(in_name)
    {
       m_tx_stream = 0;
       m_stream_name = (std::string("sc_main.") + std::string(this->name()));

	}

    CYNW_MEM_SQUARE_BRACKETS( ref_type )

    cynw_scv_memory_tx_stream< address_type, data_type >* tx_stream()
    {
#if !STRATUS
      if (m_tx_stream == 0) {
        esc_enable_scv_logging();
        m_tx_stream = new cynw_scv_memory_tx_stream< address_type, data_type >( m_stream_name.c_str(), esc_get_scv_tr_db() );
	  }
      return m_tx_stream;
#else
      return 0;
#endif
    }

  public:

    void nb_get_start( const address_type& address )
	{
		m_val = get(address);
	}

    bool nb_get( data_type& val )
    {

        val = m_val;
		return true;
    }

	sc_event_finder& value_changed()
	{
        return *(new sc_event_finder_t<cynw_memory_if< sc_uint<7>, sc_uint<32> > >(*this));
	}

    data_type get( const address_type& address )  
    {

		data_type data = (*this)->get(address);
        this->tx_stream()->gen_read_tx( address, data );
        return data;
    }

    void put( const address_type& address, const data_type& data )
    {
        this->tx_stream()->gen_write_tx( address, data );
        (*this)->put(address,data);
    }

    void nb_put( const address_type& address, const data_type& data )
    {
        (*this)->put(address,data);
    }
    

	void nb_deassert()
    {
    }

    void reset(  bool control_only=true )
    {
    }

  public:
    data_type m_val;
    cynw_scv_memory_tx_stream< address_type, data_type >* m_tx_stream;
    std::string m_stream_name;
};
#endif



#if !defined(STRATUS_VLG)
//
// TLM export metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <>
class mac_plm_block_out_dma64::ex_port_3<CYN::TLM>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > >
{
  public:
    typedef mac_plm_block_out_dma64::ex_port_3< CYN::TLM>   this_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    ex_port_3( const char* name=0, unsigned options_in=0 )
      : base_type(name)
    {}

  public:

};
#endif


#if !defined(STRATUS_VLG)
//
// TLM registered export metaport.
//
// Select this version by setting the HLS_L template argument to TLM.
//
template <>
class mac_plm_block_out_dma64::reg_ex_port_3<CYN::TLM>
  : public mac_plm_block_out_dma64::types<CYN::TLM>,
    public sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > >,
	public cynw_clk_rst_facade
{
  public:
    typedef mac_plm_block_out_dma64::reg_ex_port_3< CYN::TLM>   this_type;
    typedef mac_plm_block_out_dma64::types<CYN::TLM>     types;
    typedef sc_export< cynw_memory_if< sc_uint<7>, sc_uint<32> > > base_type;
   typedef sc_uint<7>                       address_type;
   typedef sc_uint<32>                      data_type;

    reg_ex_port_3( const char* name=0, unsigned options_in=0 )
      : base_type(name)
    {}

  public:
};
#endif


#if !defined(STRATUS_VLG)
//
// TLM metaport with stalling support.
//  
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::stall_port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
  : public mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>  base_type;
        
    stall_port_3( const char* name=0, unsigned options_in=0 )
      : base_type(name)
    {   
    }
};
#endif


#if !defined(STRATUS_VLG)
//
// TLM metaport with stalling support.
//  
// Select this version by either omitting the HLS_L template argument,
// or by setting it to PIN.
//
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::reg_port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
  : public mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>
{   
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>  base_type;
    typedef mac_plm_block_out_dma64::reg_port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>  this_type;
        
    reg_port_3( const char* name=0, unsigned options_in=0 )
      : base_type(name), if_inner(*this)
    {   
    }

	this_type& if_inner;
	
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_2 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_2                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_2( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_3 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_3                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_3( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_4 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_4                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_4( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_5 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_5                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_5( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_6 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_6                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_6( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_7 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_7                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_7( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_8 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_8                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_8( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_9 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_9                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_9( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_10 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_10                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_10( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_11 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_11                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_11( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_12 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_12                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_12( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_13 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_13                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_13( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_14 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_14                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_14( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_15 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_15                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_15( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_16 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_16                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_16( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_17 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_17                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_17( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_18 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_18                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_18( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_19 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_19                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_19( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_20 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_20                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_20( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_21 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_21                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_21( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_22 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_22                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_22( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_23 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_23                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_23( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_24 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_24                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_24( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_25 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_25                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_25( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_26 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_26                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_26( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_27 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_27                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_27( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_28 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_28                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_28( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_29 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_29                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_29( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_30 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_30                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_30( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_31 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_31                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_31( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), if31(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;
    if_type&    if31;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG)
template <typename HLS_ACCESS,HLS::HLS_INDEX_MAPPING_OPTIONS HLS_MAPPING>
class mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>::shared_32 :
    public sc_module,
	public cynw_clk_rst_facade,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::port_3<CYN::TLM,HLS_ACCESS,HLS_MAPPING>           port_type;

    typedef typename port_type::shared_32                  this_type;
   typedef sc_uint<7>                  address_type;
   typedef sc_uint<32>                data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    shared_32( sc_module_name in_name=sc_module_name( sc_gen_unique_name("port_3")), unsigned options_in=0 )
      : sc_module(in_name)
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), if31(*this), if32(*this), m_port(in_name)
    {
    }

    data_type get( const address_type& address )
    {
        return m_port.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        m_port.put(address,data);
    }
	
    template <class W>
    void bind( W& iface )
    {
		m_port.bind(iface);
    }

    template <class W>
    void operator()( W& iface )
    {
		m_port.bind(iface);
    }

  public:
    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;
    if_type&    if31;
    if_type&    if32;


	port_type	m_port;
};
#endif


#if !defined(STRATUS_VLG) && !defined(STRATUS_HLS)

//
// Simple external memory wrapper.
//
// TLM version.
// Select this version by setting the HLS_L template argument to TLM.
// 
template <>
class mac_plm_block_out_dma64::wrapper<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::wrapper<CYN::TLM>				this_type;
    typedef sc_uint<7>						    address_type;
    typedef sc_uint<32>						    data_type;
    typedef cynw_memory_if< address_type, data_type >   if_type;
  public:
    SC_HAS_PROCESS(wrapper);
    wrapper( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
	  : sc_module(in_name)
      ,CLK("CLK") 
, if1(*this)
, if2(*this)
, if3(*this)

      , model(basename()) 
	{
	}
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;
    if_type& if1;
    if_type& if2;
    if_type& if3;


    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;
};


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_2<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_2<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_2);
    shared_2( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_3<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_3<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_3);
    shared_3( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_4<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_4<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_4);
    shared_4( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_5<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_5<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_5);
    shared_5( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_6<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_6<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_6);
    shared_6( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_7<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_7<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_7);
    shared_7( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_8<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_8<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_8);
    shared_8( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_9<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_9<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_9);
    shared_9( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_10<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_10<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_10);
    shared_10( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_11<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_11<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_11);
    shared_11( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_12<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_12<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_12);
    shared_12( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_13<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_13<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_13);
    shared_13( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_14<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_14<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_14);
    shared_14( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_15<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_15<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_15);
    shared_15( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_16<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_16<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_16);
    shared_16( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_17<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_17<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_17);
    shared_17( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_18<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_18<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_18);
    shared_18( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_19<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_19<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_19);
    shared_19( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_20<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_20<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_20);
    shared_20( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_21<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_21<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_21);
    shared_21( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_22<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_22<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_22);
    shared_22( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_23<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_23<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_23);
    shared_23( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_24<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_24<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_24);
    shared_24( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_25<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_25<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_25);
    shared_25( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_26<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_26<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_26);
    shared_26( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_27<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_27<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_27);
    shared_27( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_28<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_28<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_28);
    shared_28( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_29<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_29<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_29);
    shared_29( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_30<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_30<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_30);
    shared_30( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_31<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_31<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_31);
    shared_31( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), if31(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;
    if_type&    if31;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif


#if !defined(STRATUS_VLG)
template <>
class mac_plm_block_out_dma64::shared_32<CYN::TLM> :
    public sc_module,
    public mac_plm_block_out_dma64::types<CYN::TLM>,
    public cynw_memory_if< sc_uint<7>, sc_uint<32> >
{
  public:
    typedef mac_plm_block_out_dma64::shared_32<CYN::TLM>           this_type;
    typedef sc_uint<7>                  address_type;
    typedef sc_uint<32>                   data_type;
    typedef cynw_memory_if< sc_uint<7>, sc_uint<32> >  if_type;
  public:
    SC_HAS_PROCESS(shared_32);
    shared_32( sc_module_name in_name=sc_module_name( sc_gen_unique_name("mac_plm_block_out_dma64")) )
      : sc_module(in_name) 
      ,CLK("CLK")
      , if1(*this), if2(*this), if3(*this), if4(*this), if5(*this), if6(*this), if7(*this), if8(*this), if9(*this), if10(*this), if11(*this), if12(*this), if13(*this), if14(*this), if15(*this), if16(*this), if17(*this), if18(*this), if19(*this), if20(*this), if21(*this), if22(*this), if23(*this), if24(*this), if25(*this), if26(*this), if27(*this), if28(*this), if29(*this), if30(*this), if31(*this), if32(*this), model(basename())
    {
    }
    template <class T0,class T1>
    void clk_rst( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_async( T0 & CLK_in, T1 & rst_in, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah=false )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_in<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0,class T1>
    void clk_rst_sync_async( T0 & CLK_in,T1 & rst_in, sc_signal<bool> & arst, bool rah, bool arah )
    {
        CLK(CLK_in);
    }
    template <class T0>
    void clk_rst( T0 & CLK_in )
    {
        CLK(CLK_in);
    }

    data_type get( const address_type& address )
    {
        return model.get(address);
    }

    void put( const address_type& address, const data_type& data )
    {
        model.put(address,data);
    }
  public:
    //
    // Ports.
    //
    sc_in_clk CLK;



    //
    // Interfaces.
    //
    if_type&    if1;
    if_type&    if2;
    if_type&    if3;
    if_type&    if4;
    if_type&    if5;
    if_type&    if6;
    if_type&    if7;
    if_type&    if8;
    if_type&    if9;
    if_type&    if10;
    if_type&    if11;
    if_type&    if12;
    if_type&    if13;
    if_type&    if14;
    if_type&    if15;
    if_type&    if16;
    if_type&    if17;
    if_type&    if18;
    if_type&    if19;
    if_type&    if20;
    if_type&    if21;
    if_type&    if22;
    if_type&    if23;
    if_type&    if24;
    if_type&    if25;
    if_type&    if26;
    if_type&    if27;
    if_type&    if28;
    if_type&    if29;
    if_type&    if30;
    if_type&    if31;
    if_type&    if32;

    // 
    // The memory model.
    //
    mac_plm_block_out_dma64_untimed_model model;

  public:
};
#endif

#endif // STRATUS_VLG
#endif // mac_plm_block_out_dma64_H

