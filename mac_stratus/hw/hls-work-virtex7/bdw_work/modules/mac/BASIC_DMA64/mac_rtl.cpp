// Generated by stratus_hls 19.22-s100  (92619.020518)
// Sun Mar 28 16:25:52 2021
// from ../src/mac.cpp
#include "mac_rtl.h"

struct mac;
mac::mac(sc_module_name name) : sc_module(name) 
    ,clk("clk")
    ,rst("rst")
    ,dma_read_chnl_valid("dma_read_chnl_valid")
    ,dma_read_chnl_data("dma_read_chnl_data")
    ,dma_read_chnl_ready("dma_read_chnl_ready")
    ,conf_info_mac_n("conf_info_mac_n")
    ,conf_info_mac_vec("conf_info_mac_vec")
    ,conf_info_mac_len("conf_info_mac_len")
    ,conf_done("conf_done")
    ,acc_done("acc_done")
    ,debug("debug")
    ,dma_read_ctrl_valid("dma_read_ctrl_valid")
    ,dma_read_ctrl_data_index("dma_read_ctrl_data_index")
    ,dma_read_ctrl_data_length("dma_read_ctrl_data_length")
    ,dma_read_ctrl_data_size("dma_read_ctrl_data_size")
    ,dma_read_ctrl_ready("dma_read_ctrl_ready")
    ,dma_write_ctrl_valid("dma_write_ctrl_valid")
    ,dma_write_ctrl_data_index("dma_write_ctrl_data_index")
    ,dma_write_ctrl_data_length("dma_write_ctrl_data_length")
    ,dma_write_ctrl_data_size("dma_write_ctrl_data_size")
    ,dma_write_ctrl_ready("dma_write_ctrl_ready")
    ,dma_write_chnl_valid("dma_write_chnl_valid")
    ,dma_write_chnl_data("dma_write_chnl_data")
    ,dma_write_chnl_ready("dma_write_chnl_ready")
    ,plm_in_ping_shared_WE0_wire("plm_in_ping_shared_WE0_wire")
    ,plm_in_ping_shared_CE0_wire("plm_in_ping_shared_CE0_wire")
    ,plm_in_ping_shared_D0_wire("plm_in_ping_shared_D0_wire")
    ,plm_in_ping_shared_A0_wire("plm_in_ping_shared_A0_wire")
    ,plm_in_ping_shared_WEM0_wire("plm_in_ping_shared_WEM0_wire")
    ,plm_in_ping_shared_WE1_wire("plm_in_ping_shared_WE1_wire")
    ,plm_in_ping_shared_CE1_wire("plm_in_ping_shared_CE1_wire")
    ,plm_in_ping_shared_D1_wire("plm_in_ping_shared_D1_wire")
    ,plm_in_ping_shared_A1_wire("plm_in_ping_shared_A1_wire")
    ,plm_in_ping_shared_WEM1_wire("plm_in_ping_shared_WEM1_wire")
    ,plm_in_ping_shared_CE2_wire("plm_in_ping_shared_CE2_wire")
    ,plm_in_ping_shared_Q2_wire("plm_in_ping_shared_Q2_wire")
    ,plm_in_ping_shared_A2_wire("plm_in_ping_shared_A2_wire")
    ,plm_in_pong_shared_WE0_wire("plm_in_pong_shared_WE0_wire")
    ,plm_in_pong_shared_CE0_wire("plm_in_pong_shared_CE0_wire")
    ,plm_in_pong_shared_D0_wire("plm_in_pong_shared_D0_wire")
    ,plm_in_pong_shared_A0_wire("plm_in_pong_shared_A0_wire")
    ,plm_in_pong_shared_WEM0_wire("plm_in_pong_shared_WEM0_wire")
    ,plm_in_pong_shared_WE1_wire("plm_in_pong_shared_WE1_wire")
    ,plm_in_pong_shared_CE1_wire("plm_in_pong_shared_CE1_wire")
    ,plm_in_pong_shared_D1_wire("plm_in_pong_shared_D1_wire")
    ,plm_in_pong_shared_A1_wire("plm_in_pong_shared_A1_wire")
    ,plm_in_pong_shared_WEM1_wire("plm_in_pong_shared_WEM1_wire")
    ,plm_in_pong_shared_CE2_wire("plm_in_pong_shared_CE2_wire")
    ,plm_in_pong_shared_Q2_wire("plm_in_pong_shared_Q2_wire")
    ,plm_in_pong_shared_A2_wire("plm_in_pong_shared_A2_wire")
    ,plm_out_ping_shared_WE0_wire("plm_out_ping_shared_WE0_wire")
    ,plm_out_ping_shared_CE0_wire("plm_out_ping_shared_CE0_wire")
    ,plm_out_ping_shared_D0_wire("plm_out_ping_shared_D0_wire")
    ,plm_out_ping_shared_A0_wire("plm_out_ping_shared_A0_wire")
    ,plm_out_ping_shared_WEM0_wire("plm_out_ping_shared_WEM0_wire")
    ,plm_out_ping_shared_CE1_wire("plm_out_ping_shared_CE1_wire")
    ,plm_out_ping_shared_A1_wire("plm_out_ping_shared_A1_wire")
    ,plm_out_ping_shared_CE2_wire("plm_out_ping_shared_CE2_wire")
    ,plm_out_ping_shared_A2_wire("plm_out_ping_shared_A2_wire")
    ,plm_out_pong_shared_WE0_wire("plm_out_pong_shared_WE0_wire")
    ,plm_out_pong_shared_CE0_wire("plm_out_pong_shared_CE0_wire")
    ,plm_out_pong_shared_D0_wire("plm_out_pong_shared_D0_wire")
    ,plm_out_pong_shared_A0_wire("plm_out_pong_shared_A0_wire")
    ,plm_out_pong_shared_WEM0_wire("plm_out_pong_shared_WEM0_wire")
    ,plm_out_pong_shared_CE1_wire("plm_out_pong_shared_CE1_wire")
    ,plm_out_pong_shared_A1_wire("plm_out_pong_shared_A1_wire")
    ,plm_out_pong_shared_CE2_wire("plm_out_pong_shared_CE2_wire")
    ,plm_out_pong_shared_A2_wire("plm_out_pong_shared_A2_wire")
    ,cfg_config_accelerator_next("cfg_config_accelerator_next")
    ,global_state3("global_state3")
    ,mac_Not_1U_1U_4_45_out1("mac_Not_1U_1U_4_45_out1")
    ,mac_Xor_1Ux1U_1U_4_41_out1("mac_Xor_1Ux1U_1U_4_41_out1")
    ,mac_And_1Ux1U_1U_4_40_out1("mac_And_1Ux1U_1U_4_40_out1")
    ,mac_Not_1U_1U_4_39_out1("mac_Not_1U_1U_4_39_out1")
    ,mac_Xor_1Ux1U_1U_4_38_out1("mac_Xor_1Ux1U_1U_4_38_out1")
    ,mac_Or_1Ux1U_1U_4_42_out1("mac_Or_1Ux1U_1U_4_42_out1")
    ,mac_Not_1U_1U_4_43_out1("mac_Not_1U_1U_4_43_out1")
    ,dma_write_chnl_sync_snd_valid_flop("dma_write_chnl_sync_snd_valid_flop")
    ,mac_N_Muxb_1_2_5_4_44_out1("mac_N_Muxb_1_2_5_4_44_out1")
    ,dma_write_chnl_sync_snd_reset_valid_curr("dma_write_chnl_sync_snd_reset_valid_curr")
    ,dma_write_chnl_sync_snd_reset_valid_prev("dma_write_chnl_sync_snd_reset_valid_prev")
    ,dma_write_chnl_sync_snd_set_valid_prev("dma_write_chnl_sync_snd_set_valid_prev")
    ,mac_And_1Ux1U_1U_4_14_out1("mac_And_1Ux1U_1U_4_14_out1")
    ,mac_And_1Ux1U_1U_4_13_out1("mac_And_1Ux1U_1U_4_13_out1")
    ,mac_Not_1U_1U_4_12_out1("mac_Not_1U_1U_4_12_out1")
    ,mac_Xor_1Ux1U_1U_4_4_out1("mac_Xor_1Ux1U_1U_4_4_out1")
    ,mac_And_1Ux1U_1U_4_3_out1("mac_And_1Ux1U_1U_4_3_out1")
    ,mac_Not_1U_1U_4_2_out1("mac_Not_1U_1U_4_2_out1")
    ,mac_Xor_1Ux1U_1U_4_1_out1("mac_Xor_1Ux1U_1U_4_1_out1")
    ,mac_Or_1Ux1U_1U_4_5_out1("mac_Or_1Ux1U_1U_4_5_out1")
    ,mac_And_1Ux1U_1U_4_9_out1("mac_And_1Ux1U_1U_4_9_out1")
    ,mac_Not_1U_1U_4_7_out1("mac_Not_1U_1U_4_7_out1")
    ,mac_Not_1U_1U_4_6_out1("mac_Not_1U_1U_4_6_out1")
    ,dma_read_chnl_ready_mask("dma_read_chnl_ready_mask")
    ,mac_Or_1Ux1U_1U_4_8_out1("mac_Or_1Ux1U_1U_4_8_out1")
    ,dma_read_chnl_sync_rcv_ready_flop("dma_read_chnl_sync_rcv_ready_flop")
    ,mac_N_Muxb_1_2_5_4_10_out1("mac_N_Muxb_1_2_5_4_10_out1")
    ,dma_read_chnl_sync_rcv_reset_ready_curr("dma_read_chnl_sync_rcv_reset_ready_curr")
    ,dma_read_chnl_sync_rcv_reset_ready_prev("dma_read_chnl_sync_rcv_reset_ready_prev")
    ,dma_read_chnl_sync_rcv_set_ready_prev("dma_read_chnl_sync_rcv_set_ready_prev")
    ,mac_N_MuxB_64_2_1_4_11_out1("mac_N_MuxB_64_2_1_4_11_out1")
    ,global_state2_next("global_state2_next")
    ,mac_N_MuxB_64_2_1_4_67_in2("mac_N_MuxB_64_2_1_4_67_in2")
    ,plm_out_ping_shared_Q2_wire("plm_out_ping_shared_Q2_wire")
    ,plm_out_ping_shared_Q1_wire("plm_out_ping_shared_Q1_wire")
    ,mac_N_MuxB_64_2_1_4_67_in3("mac_N_MuxB_64_2_1_4_67_in3")
    ,plm_out_pong_shared_Q2_wire("plm_out_pong_shared_Q2_wire")
    ,plm_out_pong_shared_Q1_wire("plm_out_pong_shared_Q1_wire")
    ,plm_out_pong_store_output_CE1("plm_out_pong_store_output_CE1")
    ,gs_ctrl39("gs_ctrl39")
    ,plm_out_pong_store_output_A1("plm_out_pong_store_output_A1")
    ,plm_out_pong_store_output_CE2("plm_out_pong_store_output_CE2")
    ,gs_ctrl38("gs_ctrl38")
    ,plm_out_pong_store_output_A2("plm_out_pong_store_output_A2")
    ,gs_ctrl37("gs_ctrl37")
    ,plm_out_ping_store_output_CE1("plm_out_ping_store_output_CE1")
    ,gs_ctrl36("gs_ctrl36")
    ,plm_out_ping_store_output_A1("plm_out_ping_store_output_A1")
    ,plm_out_ping_store_output_CE2("plm_out_ping_store_output_CE2")
    ,gs_ctrl35("gs_ctrl35")
    ,plm_out_ping_store_output_A2("plm_out_ping_store_output_A2")
    ,gs_ctrl34("gs_ctrl34")
    ,mac_Add_13Ux1U_13U_4_66_out1("mac_Add_13Ux1U_13U_4_66_out1")
    ,mac_Add_13Ux1U_13U_4_66_in2_slice("mac_Add_13Ux1U_13U_4_66_in2_slice")
    ,gs_ctrl33("gs_ctrl33")
    ,mac_Add_13Ux1U_13U_4_65_out1("mac_Add_13Ux1U_13U_4_65_out1")
    ,mac_Add_13Ux1U_13U_4_65_in2_slice("mac_Add_13Ux1U_13U_4_65_in2_slice")
    ,gs_ctrl32("gs_ctrl32")
    ,mac_Add_16Ux2U_16U_4_64_in2("mac_Add_16Ux2U_16U_4_64_in2")
    ,gs_ctrl31("gs_ctrl31")
    ,mac_Not_1U_1U_4_63_out1("mac_Not_1U_1U_4_63_out1")
    ,mac_GreaterThan_32Sx8S_1U_4_58_out1("mac_GreaterThan_32Sx8S_1U_4_58_out1")
    ,mac_Or_32Sx1U_32S_4_54_out1("mac_Or_32Sx1U_32S_4_54_out1")
    ,mac_Or_32Sx1U_32S_4_49_out1("mac_Or_32Sx1U_32S_4_49_out1")
    ,mac_Sub_32Sx1U_32S_4_48_out1("mac_Sub_32Sx1U_32S_4_48_out1")
    ,mac_Mul_32Ux32U_32U_4_47_out1("mac_Mul_32Ux32U_32U_4_47_out1")
    ,mac_Add_16Ux2U_16U_4_64_out1("mac_Add_16Ux2U_16U_4_64_out1")
    ,s_reg_31("s_reg_31")
    ,mac_N_Mux_32_2_4_4_59_out1("mac_N_Mux_32_2_4_4_59_out1")
    ,s_reg_26("s_reg_26")
    ,s_reg_25("s_reg_25")
    ,mac_Sub_32Sx7U_32S_4_60_out1("mac_Sub_32Sx7U_32S_4_60_out1")
    ,mac_Add_32Sx1U_32S_4_55_out1("mac_Add_32Sx1U_32S_4_55_out1")
    ,s_reg_23("s_reg_23")
    ,mac_Add_32Ux32U_32U_4_62_out1("mac_Add_32Ux32U_32U_4_62_out1")
    ,mac_Mul_32Ux32U_32U_4_53_out1("mac_Mul_32Ux32U_32U_4_53_out1")
    ,s_reg_22("s_reg_22")
    ,mac_Sub_32Sx1U_32S_4_51_out1("mac_Sub_32Sx1U_32S_4_51_out1")
    ,s_reg_21("s_reg_21")
    ,mac_Add_32Sx1U_32S_4_50_out1("mac_Add_32Sx1U_32S_4_50_out1")
    ,s_reg_20("s_reg_20")
    ,s_reg_19("s_reg_19")
    ,s_reg_18("s_reg_18")
    ,mac_Not_1U_1U_4_61_out1("mac_Not_1U_1U_4_61_out1")
    ,s_reg_17("s_reg_17")
    ,mac_Add_16Ux1U_16U_4_56_out1("mac_Add_16Ux1U_16U_4_56_out1")
    ,s_reg_16("s_reg_16")
    ,mac_Not_1U_1U_4_69_out1("mac_Not_1U_1U_4_69_out1")
    ,dma_write_chnl_set_valid_curr("dma_write_chnl_set_valid_curr")
    ,mac_LessThan_16Ux32U_1U_4_68_out1("mac_LessThan_16Ux32U_1U_4_68_out1")
    ,mac_GreaterThan_32Sx2S_1U_4_70_out1("mac_GreaterThan_32Sx2S_1U_4_70_out1")
    ,mac_GreaterThan_32Sx2S_1U_4_57_out1("mac_GreaterThan_32Sx2S_1U_4_57_out1")
    ,mac_LessThan_17Sx32S_1U_4_71_out1("mac_LessThan_17Sx32S_1U_4_71_out1")
    ,mac_LessThan_2Sx32S_1U_4_52_out1("mac_LessThan_2Sx32S_1U_4_52_out1")
    ,s_reg_28("s_reg_28")
    ,dma_write_ctrl_data_index_slice("dma_write_ctrl_data_index_slice")
    ,s_reg_27("s_reg_27")
    ,dma_write_ctrl_data_length_slice("dma_write_ctrl_data_length_slice")
    ,dma_write_ctrl_data_size_slice("dma_write_ctrl_data_size_slice")
    ,s_reg_34("s_reg_34")
    ,mac_N_MuxB_64_2_1_4_67_out1("mac_N_MuxB_64_2_1_4_67_out1")
    ,mac_Or_1Ux1U_1U_4_46_out1("mac_Or_1Ux1U_1U_4_46_out1")
    ,global_state2("global_state2")
    ,global_state1_next("global_state1_next")
    ,plm_out_ping_compute_kernel_WEM0("plm_out_ping_compute_kernel_WEM0")
    ,gs_ctrl30("gs_ctrl30")
    ,plm_out_ping_compute_kernel_CE0("plm_out_ping_compute_kernel_CE0")
    ,gs_ctrl29("gs_ctrl29")
    ,plm_out_ping_compute_kernel_WE0("plm_out_ping_compute_kernel_WE0")
    ,gs_ctrl28("gs_ctrl28")
    ,plm_out_ping_compute_kernel_D0("plm_out_ping_compute_kernel_D0")
    ,plm_out_ping_compute_kernel_A0("plm_out_ping_compute_kernel_A0")
    ,plm_out_pong_compute_kernel_WEM0("plm_out_pong_compute_kernel_WEM0")
    ,gs_ctrl27("gs_ctrl27")
    ,plm_out_pong_compute_kernel_CE0("plm_out_pong_compute_kernel_CE0")
    ,gs_ctrl26("gs_ctrl26")
    ,plm_out_pong_compute_kernel_WE0("plm_out_pong_compute_kernel_WE0")
    ,gs_ctrl25("gs_ctrl25")
    ,plm_out_pong_compute_kernel_D0("plm_out_pong_compute_kernel_D0")
    ,plm_out_pong_compute_kernel_A0("plm_out_pong_compute_kernel_A0")
    ,mac_Mul_32Ux32U_32U_4_91_out1("mac_Mul_32Ux32U_32U_4_91_out1")
    ,mac_N_Mux_32_2_2_4_90_out1("mac_N_Mux_32_2_2_4_90_out1")
    ,mac_And_1Ux1U_1U_4_88_out1("mac_And_1Ux1U_1U_4_88_out1")
    ,plm_in_ping_compute_kernel_Q2("plm_in_ping_compute_kernel_Q2")
    ,plm_in_pong_compute_kernel_Q2("plm_in_pong_compute_kernel_Q2")
    ,plm_in_pong_compute_kernel_CE2("plm_in_pong_compute_kernel_CE2")
    ,gs_ctrl24("gs_ctrl24")
    ,plm_in_pong_compute_kernel_A2("plm_in_pong_compute_kernel_A2")
    ,gs_ctrl23("gs_ctrl23")
    ,plm_in_ping_compute_kernel_CE2("plm_in_ping_compute_kernel_CE2")
    ,gs_ctrl22("gs_ctrl22")
    ,plm_in_ping_compute_kernel_A2("plm_in_ping_compute_kernel_A2")
    ,gs_ctrl21("gs_ctrl21")
    ,mac_Add_13Sx1U_13S_4_82_out1("mac_Add_13Sx1U_13S_4_82_out1")
    ,mac_Add_13Sx1U_13S_4_82_in2("mac_Add_13Sx1U_13S_4_82_in2")
    ,gs_ctrl20("gs_ctrl20")
    ,mac_Add_13Sx1U_13S_4_81_out1("mac_Add_13Sx1U_13S_4_81_out1")
    ,mac_Add_13Sx1U_13S_4_81_in2("mac_Add_13Sx1U_13S_4_81_in2")
    ,gs_ctrl19("gs_ctrl19")
    ,mac_Add_32Ux2U_32U_4_79_in2("mac_Add_32Ux2U_32U_4_79_in2")
    ,gs_ctrl18("gs_ctrl18")
    ,mac_Sub_32Sx13U_32S_4_78_in2("mac_Sub_32Sx13U_32S_4_78_in2")
    ,gs_ctrl17("gs_ctrl17")
    ,mac_N_Mux_32_2_2_4_77_in3("mac_N_Mux_32_2_2_4_77_in3")
    ,gs_ctrl16("gs_ctrl16")
    ,mac_GreaterThan_32Sx14S_1U_4_76_out1("mac_GreaterThan_32Sx14S_1U_4_76_out1")
    ,mac_GreaterThan_32Sx14S_1U_4_76_in2("mac_GreaterThan_32Sx14S_1U_4_76_in2")
    ,gs_ctrl15("gs_ctrl15")
    ,mac_Mul_32Ux32U_32U_4_73_out1("mac_Mul_32Ux32U_32U_4_73_out1")
    ,mac_Mul_32Ux32U_32U_4_73_in1("mac_Mul_32Ux32U_32U_4_73_in1")
    ,gs_ctrl14("gs_ctrl14")
    ,mac_Mul_32Ux32U_32U_4_73_in2("mac_Mul_32Ux32U_32U_4_73_in2")
    ,gs_ctrl13("gs_ctrl13")
    ,mac_Add_32Ux32U_32U_4_92_out1("mac_Add_32Ux32U_32U_4_92_out1")
    ,s_reg_61("s_reg_61")
    ,mac_Add_32Sx2U_32S_4_89_out1("mac_Add_32Sx2U_32S_4_89_out1")
    ,mac_And_1Ux1U_1U_4_86_out1("mac_And_1Ux1U_1U_4_86_out1")
    ,s_reg_58("s_reg_58")
    ,mac_N_Mux_32_2_2_4_85_out1("mac_N_Mux_32_2_2_4_85_out1")
    ,s_reg_57("s_reg_57")
    ,mac_Equal_32Ux32U_1U_4_84_out1("mac_Equal_32Ux32U_1U_4_84_out1")
    ,s_reg_56("s_reg_56")
    ,mac_Not_1U_1U_4_83_out1("mac_Not_1U_1U_4_83_out1")
    ,s_reg_55("s_reg_55")
    ,mac_Not_1U_1U_4_80_out1("mac_Not_1U_1U_4_80_out1")
    ,s_reg_52("s_reg_52")
    ,mac_Add_32Ux2U_32U_4_79_out1("mac_Add_32Ux2U_32U_4_79_out1")
    ,s_reg_51("s_reg_51")
    ,s_reg_60("s_reg_60")
    ,s_reg_50("s_reg_50")
    ,s_reg_49("s_reg_49")
    ,mac_Sub_32Sx13U_32S_4_78_out1("mac_Sub_32Sx13U_32S_4_78_out1")
    ,s_reg_48("s_reg_48")
    ,mac_N_Mux_32_2_2_4_77_out1("mac_N_Mux_32_2_2_4_77_out1")
    ,mac_N_Mux_32_2_3_4_96_out1("mac_N_Mux_32_2_3_4_96_out1")
    ,s_reg_46("s_reg_46")
    ,mac_Add_13Ux1U_13U_4_95_out1("mac_Add_13Ux1U_13U_4_95_out1")
    ,s_reg_45("s_reg_45")
    ,mac_N_Mux_32_2_3_4_94_out1("mac_N_Mux_32_2_3_4_94_out1")
    ,s_reg_44("s_reg_44")
    ,mac_Not_1U_1U_4_87_out1("mac_Not_1U_1U_4_87_out1")
    ,mac_Not_1U_1U_4_98_out1("mac_Not_1U_1U_4_98_out1")
    ,s_reg_41("s_reg_41")
    ,s_reg_40("s_reg_40")
    ,s_reg_39("s_reg_39")
    ,s_reg_38("s_reg_38")
    ,mac_Add_16Ux1U_16U_4_75_out1("mac_Add_16Ux1U_16U_4_75_out1")
    ,s_reg_37("s_reg_37")
    ,s_reg_43("s_reg_43")
    ,s_reg_36("s_reg_36")
    ,output_ready_channel_ready("output_ready_channel_ready")
    ,output_ready_channel_valid("output_ready_channel_valid")
    ,mac_LessThan_17Sx32S_1U_4_99_out1("mac_LessThan_17Sx32S_1U_4_99_out1")
    ,mac_LessThan_32Ux32U_1U_4_93_out1("mac_LessThan_32Ux32U_1U_4_93_out1")
    ,s_reg_47("s_reg_47")
    ,mac_GreaterThan_32Sx2S_1U_4_97_out1("mac_GreaterThan_32Sx2S_1U_4_97_out1")
    ,mac_LessThan_2Sx32S_1U_4_72_out1("mac_LessThan_2Sx32S_1U_4_72_out1")
    ,mac_GreaterThan_32Sx2S_1U_4_74_out1("mac_GreaterThan_32Sx2S_1U_4_74_out1")
    ,global_state1("global_state1")
    ,cfg_done("cfg_done")
    ,global_state_next("global_state_next")
    ,mac_LessThan_17Sx32S_1U_4_37_out1("mac_LessThan_17Sx32S_1U_4_37_out1")
    ,plm_in_ping_load_input_WEM0("plm_in_ping_load_input_WEM0")
    ,gs_ctrl12("gs_ctrl12")
    ,plm_in_ping_load_input_CE0("plm_in_ping_load_input_CE0")
    ,gs_ctrl11("gs_ctrl11")
    ,plm_in_ping_load_input_WE0("plm_in_ping_load_input_WE0")
    ,gs_ctrl10("gs_ctrl10")
    ,plm_in_ping_load_input_D0("plm_in_ping_load_input_D0")
    ,plm_in_ping_load_input_A0("plm_in_ping_load_input_A0")
    ,plm_in_pong_load_input_WEM0("plm_in_pong_load_input_WEM0")
    ,gs_ctrl9("gs_ctrl9")
    ,plm_in_pong_load_input_CE0("plm_in_pong_load_input_CE0")
    ,gs_ctrl8("gs_ctrl8")
    ,plm_in_pong_load_input_WE0("plm_in_pong_load_input_WE0")
    ,gs_ctrl7("gs_ctrl7")
    ,plm_in_pong_load_input_D0("plm_in_pong_load_input_D0")
    ,plm_in_pong_load_input_A0("plm_in_pong_load_input_A0")
    ,plm_in_ping_load_input_WEM1("plm_in_ping_load_input_WEM1")
    ,gs_ctrl6("gs_ctrl6")
    ,plm_in_ping_load_input_CE1("plm_in_ping_load_input_CE1")
    ,gs_ctrl5("gs_ctrl5")
    ,plm_in_ping_load_input_WE1("plm_in_ping_load_input_WE1")
    ,gs_ctrl4("gs_ctrl4")
    ,plm_in_ping_load_input_D1("plm_in_ping_load_input_D1")
    ,plm_in_ping_load_input_A1("plm_in_ping_load_input_A1")
    ,plm_in_pong_load_input_WEM1("plm_in_pong_load_input_WEM1")
    ,gs_ctrl3("gs_ctrl3")
    ,plm_in_pong_load_input_CE1("plm_in_pong_load_input_CE1")
    ,gs_ctrl2("gs_ctrl2")
    ,plm_in_pong_load_input_WE1("plm_in_pong_load_input_WE1")
    ,gs_ctrl1("gs_ctrl1")
    ,plm_in_pong_load_input_D1("plm_in_pong_load_input_D1")
    ,plm_in_pong_load_input_A1("plm_in_pong_load_input_A1")
    ,mac_Add_13Ux1U_13U_4_34_out1("mac_Add_13Ux1U_13U_4_34_out1")
    ,mac_Add_13Ux1U_13U_4_33_out1("mac_Add_13Ux1U_13U_4_33_out1")
    ,mac_Not_1U_1U_4_31_out1("mac_Not_1U_1U_4_31_out1")
    ,dma_read_chnl_data_buf("dma_read_chnl_data_buf")
    ,mac_Add_16Ux2U_16U_4_28_in2("mac_Add_16Ux2U_16U_4_28_in2")
    ,gs_ctrl0("gs_ctrl0")
    ,mac_GreaterThan_32Sx14S_1U_4_23_out1("mac_GreaterThan_32Sx14S_1U_4_23_out1")
    ,mac_Or_32Sx1U_32S_4_19_out1("mac_Or_32Sx1U_32S_4_19_out1")
    ,mac_LessThan_2Sx32S_1U_4_18_out1("mac_LessThan_2Sx32S_1U_4_18_out1")
    ,mac_Mul_32Ux32U_32U_4_16_out1("mac_Mul_32Ux32U_32U_4_16_out1")
    ,s_reg_9("s_reg_9")
    ,s_reg_8("s_reg_8")
    ,mac_Sub_32Sx13U_32S_4_25_out1("mac_Sub_32Sx13U_32S_4_25_out1")
    ,mac_Add_32Sx1U_32S_4_20_out1("mac_Add_32Sx1U_32S_4_20_out1")
    ,s_reg_6("s_reg_6")
    ,mac_Sub_32Sx1U_32S_4_17_out1("mac_Sub_32Sx1U_32S_4_17_out1")
    ,s_reg_5("s_reg_5")
    ,s_reg_4("s_reg_4")
    ,mac_Add_32Ux32U_32U_4_26_out1("mac_Add_32Ux32U_32U_4_26_out1")
    ,mac_GreaterThan_32Sx2S_1U_4_35_out1("mac_GreaterThan_32Sx2S_1U_4_35_out1")
    ,mac_GreaterThan_32Sx2S_1U_4_22_out1("mac_GreaterThan_32Sx2S_1U_4_22_out1")
    ,mac_Add_16Ux1U_16U_4_21_out1("mac_Add_16Ux1U_16U_4_21_out1")
    ,s_reg_2("s_reg_2")
    ,mac_N_MuxB_64_2_1_4_29_out1("mac_N_MuxB_64_2_1_4_29_out1")
    ,s_reg_15("s_reg_15")
    ,mac_Add_16Ux2U_16U_4_28_out1("mac_Add_16Ux2U_16U_4_28_out1")
    ,s_reg_14("s_reg_14")
    ,s_reg_13("s_reg_13")
    ,mac_Not_1U_1U_4_27_out1("mac_Not_1U_1U_4_27_out1")
    ,s_reg_12("s_reg_12")
    ,s_reg_3("s_reg_3")
    ,mac_N_Mux_32_2_2_4_24_out1("mac_N_Mux_32_2_2_4_24_out1")
    ,mac_Not_1U_1U_4_36_out1("mac_Not_1U_1U_4_36_out1")
    ,s_reg_1("s_reg_1")
    ,input_ready_channel_valid("input_ready_channel_valid")
    ,input_ready_channel_ready("input_ready_channel_ready")
    ,mac_LessThan_16Ux32U_1U_4_32_out1("mac_LessThan_16Ux32U_1U_4_32_out1")
    ,mac_Not_1U_1U_4_30_out1("mac_Not_1U_1U_4_30_out1")
    ,mac_Or_1Ux1U_1U_4_15_out1("mac_Or_1Ux1U_1U_4_15_out1")
    ,dma_read_chnl_set_ready_curr("dma_read_chnl_set_ready_curr")
    ,s_reg_11("s_reg_11")
    ,dma_read_ctrl_data_index_slice("dma_read_ctrl_data_index_slice")
    ,s_reg_10("s_reg_10")
    ,dma_read_ctrl_data_length_slice("dma_read_ctrl_data_length_slice")
    ,global_state("global_state")
    ,dma_read_ctrl_data_size_slice("dma_read_ctrl_data_size_slice")
{
  SC_METHOD(drive_debug);

  SC_METHOD(drive_dma_read_ctrl_data_size_slice);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_read_ctrl_data_length_slice);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_read_ctrl_data_index_slice);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_read_ctrl_valid);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_read_chnl_set_ready_curr);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_input_ready_channel_ready);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_1);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_10);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_11);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_12);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_13);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_14);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_15);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_2);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_3);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_4);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_5);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_6);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_8);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_9);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(mac_Mul_32Ux32U_32U_4_16);
  sensitive << ( conf_info_mac_vec );
  sensitive << ( conf_info_mac_len );

  SC_METHOD(mac_Sub_32Sx1U_32S_4_17);
  sensitive << ( mac_Mul_32Ux32U_32U_4_16_out1 );

  SC_METHOD(mac_LessThan_2Sx32S_1U_4_18);
  sensitive << ( s_reg_4 );

  SC_METHOD(mac_Or_32Sx1U_32S_4_19);
  sensitive << ( s_reg_5 );

  SC_METHOD(mac_Add_32Sx1U_32S_4_20);
  sensitive << ( mac_Or_32Sx1U_32S_4_19_out1 );

  SC_METHOD(mac_Add_16Ux1U_16U_4_21);
  sensitive << ( s_reg_2 );

  SC_METHOD(mac_GreaterThan_32Sx2S_1U_4_22);
  sensitive << ( s_reg_6 );

  SC_METHOD(mac_GreaterThan_32Sx14S_1U_4_23);
  sensitive << ( s_reg_6 );

  SC_METHOD(mac_N_Mux_32_2_2_4_24);
  sensitive << ( mac_GreaterThan_32Sx14S_1U_4_23_out1 );
  sensitive << ( s_reg_6 );

  SC_METHOD(mac_Sub_32Sx13U_32S_4_25);
  sensitive << ( s_reg_6 );

  SC_METHOD(mac_Add_32Ux32U_32U_4_26);
  sensitive << ( s_reg_10 );
  sensitive << ( s_reg_9 );

  SC_METHOD(mac_Not_1U_1U_4_27);
  sensitive << ( s_reg_8 );

  SC_METHOD(drive_mac_Add_16Ux2U_16U_4_28_in2);
  sensitive << ( gs_ctrl0 );
  sensitive << ( s_reg_14 );

  SC_METHOD(mac_Add_16Ux2U_16U_4_28);
  sensitive << ( mac_Add_16Ux2U_16U_4_28_in2 );

  SC_METHOD(mac_N_MuxB_64_2_1_4_29);
  sensitive << ( dma_read_chnl_ready );
  sensitive << ( dma_read_chnl_data );
  sensitive << ( dma_read_chnl_data_buf );

  SC_METHOD(mac_Not_1U_1U_4_30);
  sensitive << ( dma_read_chnl_set_ready_curr );

  SC_METHOD(mac_Not_1U_1U_4_31);
  sensitive << ( s_reg_8 );

  SC_METHOD(mac_LessThan_16Ux32U_1U_4_32);
  sensitive << ( s_reg_10 );
  sensitive << ( s_reg_14 );

  SC_METHOD(mac_Add_13Ux1U_13U_4_33);
  sensitive << ( s_reg_13 );

  SC_METHOD(mac_Add_13Ux1U_13U_4_34);
  sensitive << ( s_reg_13 );

  SC_METHOD(drive_plm_in_pong_load_input_A1);
  sensitive << ( s_reg_13 );

  SC_METHOD(drive_plm_in_pong_load_input_D1);
  sensitive << ( s_reg_15 );

  SC_METHOD(drive_plm_in_pong_load_input_WE1);
  sensitive << ( gs_ctrl1 );
  sensitive << ( s_reg_12 );

  SC_METHOD(drive_plm_in_pong_load_input_CE1);
  sensitive << ( gs_ctrl2 );
  sensitive << ( s_reg_12 );

  SC_METHOD(drive_plm_in_pong_load_input_WEM1);
  sensitive << ( gs_ctrl3 );
  sensitive << ( s_reg_12 );

  SC_METHOD(drive_plm_in_ping_load_input_A1);
  sensitive << ( s_reg_13 );

  SC_METHOD(drive_plm_in_ping_load_input_D1);
  sensitive << ( s_reg_15 );

  SC_METHOD(drive_plm_in_ping_load_input_WE1);
  sensitive << ( gs_ctrl4 );
  sensitive << ( s_reg_8 );

  SC_METHOD(drive_plm_in_ping_load_input_CE1);
  sensitive << ( gs_ctrl5 );
  sensitive << ( s_reg_8 );

  SC_METHOD(drive_plm_in_ping_load_input_WEM1);
  sensitive << ( gs_ctrl6 );
  sensitive << ( s_reg_8 );

  SC_METHOD(drive_plm_in_pong_load_input_A0);
  sensitive << ( mac_Add_13Ux1U_13U_4_33_out1 );

  SC_METHOD(drive_plm_in_pong_load_input_D0);
  sensitive << ( s_reg_15 );

  SC_METHOD(drive_plm_in_pong_load_input_WE0);
  sensitive << ( gs_ctrl7 );
  sensitive << ( mac_Not_1U_1U_4_31_out1 );
  sensitive << ( s_reg_12 );

  SC_METHOD(drive_plm_in_pong_load_input_CE0);
  sensitive << ( gs_ctrl8 );
  sensitive << ( mac_Not_1U_1U_4_31_out1 );
  sensitive << ( s_reg_12 );

  SC_METHOD(drive_plm_in_pong_load_input_WEM0);
  sensitive << ( gs_ctrl9 );
  sensitive << ( mac_Not_1U_1U_4_31_out1 );
  sensitive << ( s_reg_12 );

  SC_METHOD(drive_plm_in_ping_load_input_A0);
  sensitive << ( mac_Add_13Ux1U_13U_4_34_out1 );

  SC_METHOD(drive_plm_in_ping_load_input_D0);
  sensitive << ( s_reg_15 );

  SC_METHOD(drive_plm_in_ping_load_input_WE0);
  sensitive << ( gs_ctrl10 );
  sensitive << ( s_reg_8 );

  SC_METHOD(drive_plm_in_ping_load_input_CE0);
  sensitive << ( gs_ctrl11 );
  sensitive << ( s_reg_8 );

  SC_METHOD(drive_plm_in_ping_load_input_WEM0);
  sensitive << ( gs_ctrl12 );
  sensitive << ( s_reg_8 );

  SC_METHOD(mac_GreaterThan_32Sx2S_1U_4_35);
  sensitive << ( s_reg_6 );

  SC_METHOD(mac_Not_1U_1U_4_36);
  sensitive << ( s_reg_8 );

  SC_METHOD(mac_LessThan_17Sx32S_1U_4_37);
  sensitive << ( s_reg_4 );
  sensitive << ( s_reg_2 );

  SC_METHOD(drive_global_state);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_global_state_next);
  sensitive << ( global_state );
  sensitive << ( cfg_done );
  sensitive << ( mac_LessThan_2Sx32S_1U_4_18_out1 );
  sensitive << ( mac_GreaterThan_32Sx2S_1U_4_22_out1 );
  sensitive << ( mac_LessThan_17Sx32S_1U_4_37_out1 );
  sensitive << ( dma_read_ctrl_ready );
  sensitive << ( s_reg_10 );
  sensitive << ( mac_Or_1Ux1U_1U_4_15_out1 );
  sensitive << ( mac_LessThan_16Ux32U_1U_4_32_out1 );
  sensitive << ( input_ready_channel_valid );
  sensitive << ( mac_GreaterThan_32Sx2S_1U_4_35_out1 );

  SC_METHOD(drive_gs_ctrl0);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl1);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl2);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl3);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl4);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl5);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl6);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl7);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl8);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl9);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl10);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl11);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl12);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_input_ready_channel_valid);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_output_ready_channel_ready);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_36);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_37);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_38);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_39);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_40);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_41);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_43);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_44);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_45);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_46);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_47);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_48);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_49);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_50);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_51);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_52);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_55);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_56);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_57);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_58);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_60);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_61);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(mac_LessThan_2Sx32S_1U_4_72);
  sensitive << ( conf_info_mac_n );

  SC_METHOD(drive_mac_Mul_32Ux32U_32U_4_73_in2);
  sensitive << ( gs_ctrl13 );
  sensitive << ( s_reg_38 );
  sensitive << ( conf_info_mac_len );

  SC_METHOD(drive_mac_Mul_32Ux32U_32U_4_73_in1);
  sensitive << ( gs_ctrl14 );
  sensitive << ( s_reg_39 );
  sensitive << ( conf_info_mac_vec );

  SC_METHOD(mac_Mul_32Ux32U_32U_4_73);
  sensitive << ( mac_Mul_32Ux32U_32U_4_73_in1 );
  sensitive << ( mac_Mul_32Ux32U_32U_4_73_in2 );

  SC_METHOD(mac_GreaterThan_32Sx2S_1U_4_74);
  sensitive << ( mac_Mul_32Ux32U_32U_4_73_out1 );

  SC_METHOD(mac_Add_16Ux1U_16U_4_75);
  sensitive << ( s_reg_37 );

  SC_METHOD(drive_mac_GreaterThan_32Sx14S_1U_4_76_in2);
  sensitive << ( gs_ctrl15 );
  sensitive << ( s_reg_48 );
  sensitive << ( mac_Mul_32Ux32U_32U_4_73_out1 );

  SC_METHOD(mac_GreaterThan_32Sx14S_1U_4_76);
  sensitive << ( mac_GreaterThan_32Sx14S_1U_4_76_in2 );

  SC_METHOD(drive_mac_N_Mux_32_2_2_4_77_in3);
  sensitive << ( gs_ctrl16 );
  sensitive << ( s_reg_48 );
  sensitive << ( mac_Mul_32Ux32U_32U_4_73_out1 );

  SC_METHOD(mac_N_Mux_32_2_2_4_77);
  sensitive << ( mac_GreaterThan_32Sx14S_1U_4_76_out1 );
  sensitive << ( mac_N_Mux_32_2_2_4_77_in3 );

  SC_METHOD(drive_mac_Sub_32Sx13U_32S_4_78_in2);
  sensitive << ( gs_ctrl17 );
  sensitive << ( s_reg_48 );
  sensitive << ( mac_Mul_32Ux32U_32U_4_73_out1 );

  SC_METHOD(mac_Sub_32Sx13U_32S_4_78);
  sensitive << ( mac_Sub_32Sx13U_32S_4_78_in2 );

  SC_METHOD(drive_mac_Add_32Ux2U_32U_4_79_in2);
  sensitive << ( gs_ctrl18 );
  sensitive << ( mac_N_Mux_32_2_3_4_94_out1 );
  sensitive << ( s_reg_44 );

  SC_METHOD(mac_Add_32Ux2U_32U_4_79);
  sensitive << ( mac_Add_32Ux2U_32U_4_79_in2 );

  SC_METHOD(mac_Not_1U_1U_4_80);
  sensitive << ( s_reg_43 );

  SC_METHOD(drive_mac_Add_13Sx1U_13S_4_81_in2);
  sensitive << ( gs_ctrl19 );
  sensitive << ( s_reg_60 );

  SC_METHOD(mac_Add_13Sx1U_13S_4_81);
  sensitive << ( mac_Add_13Sx1U_13S_4_81_in2 );

  SC_METHOD(drive_mac_Add_13Sx1U_13S_4_82_in2);
  sensitive << ( gs_ctrl20 );
  sensitive << ( s_reg_60 );

  SC_METHOD(mac_Add_13Sx1U_13S_4_82);
  sensitive << ( mac_Add_13Sx1U_13S_4_82_in2 );

  SC_METHOD(mac_Not_1U_1U_4_83);
  sensitive << ( s_reg_41 );

  SC_METHOD(mac_Equal_32Ux32U_1U_4_84);
  sensitive << ( s_reg_38 );
  sensitive << ( s_reg_51 );

  SC_METHOD(drive_plm_in_ping_compute_kernel_A2);
  sensitive << ( gs_ctrl21 );
  sensitive << ( s_reg_50 );
  sensitive << ( mac_Add_13Sx1U_13S_4_81_out1 );

  SC_METHOD(drive_plm_in_ping_compute_kernel_CE2);
  sensitive << ( gs_ctrl22 );
  sensitive << ( s_reg_43 );
  sensitive << ( s_reg_47 );
  sensitive << ( input_ready_channel_ready );
  sensitive << ( s_reg_49 );
  sensitive << ( mac_LessThan_32Ux32U_1U_4_93_out1 );

  SC_METHOD(drive_plm_in_pong_compute_kernel_A2);
  sensitive << ( gs_ctrl23 );
  sensitive << ( s_reg_50 );
  sensitive << ( mac_Add_13Sx1U_13S_4_82_out1 );

  SC_METHOD(drive_plm_in_pong_compute_kernel_CE2);
  sensitive << ( gs_ctrl24 );
  sensitive << ( mac_Not_1U_1U_4_80_out1 );
  sensitive << ( s_reg_47 );
  sensitive << ( input_ready_channel_ready );
  sensitive << ( s_reg_52 );
  sensitive << ( mac_LessThan_32Ux32U_1U_4_93_out1 );

  SC_METHOD(mac_N_Mux_32_2_2_4_85);
  sensitive << ( s_reg_49 );
  sensitive << ( plm_in_ping_compute_kernel_Q2 );
  sensitive << ( plm_in_pong_compute_kernel_Q2 );

  SC_METHOD(mac_And_1Ux1U_1U_4_86);
  sensitive << ( s_reg_56 );
  sensitive << ( s_reg_55 );

  SC_METHOD(mac_Not_1U_1U_4_87);
  sensitive << ( s_reg_49 );

  SC_METHOD(mac_And_1Ux1U_1U_4_88);
  sensitive << ( s_reg_41 );
  sensitive << ( s_reg_56 );

  SC_METHOD(mac_Add_32Sx2U_32S_4_89);
  sensitive << ( s_reg_50 );

  SC_METHOD(mac_N_Mux_32_2_2_4_90);
  sensitive << ( s_reg_49 );
  sensitive << ( plm_in_ping_compute_kernel_Q2 );
  sensitive << ( plm_in_pong_compute_kernel_Q2 );

  SC_METHOD(mac_Mul_32Ux32U_32U_4_91);
  sensitive << ( s_reg_57 );
  sensitive << ( mac_N_Mux_32_2_2_4_90_out1 );

  SC_METHOD(mac_Add_32Ux32U_32U_4_92);
  sensitive << ( s_reg_46 );
  sensitive << ( mac_Mul_32Ux32U_32U_4_91_out1 );

  SC_METHOD(mac_LessThan_32Ux32U_1U_4_93);
  sensitive << ( s_reg_47 );
  sensitive << ( s_reg_60 );

  SC_METHOD(mac_N_Mux_32_2_3_4_94);
  sensitive << ( s_reg_56 );
  sensitive << ( s_reg_51 );

  SC_METHOD(mac_Add_13Ux1U_13U_4_95);
  sensitive << ( s_reg_56 );
  sensitive << ( s_reg_45 );

  SC_METHOD(mac_N_Mux_32_2_3_4_96);
  sensitive << ( s_reg_56 );
  sensitive << ( s_reg_61 );

  SC_METHOD(drive_plm_out_pong_compute_kernel_A0);
  sensitive << ( s_reg_45 );

  SC_METHOD(drive_plm_out_pong_compute_kernel_D0);
  sensitive << ( mac_Add_32Ux32U_32U_4_92_out1 );

  SC_METHOD(drive_plm_out_pong_compute_kernel_WE0);
  sensitive << ( gs_ctrl25 );
  sensitive << ( s_reg_58 );

  SC_METHOD(drive_plm_out_pong_compute_kernel_CE0);
  sensitive << ( gs_ctrl26 );
  sensitive << ( s_reg_58 );

  SC_METHOD(drive_plm_out_pong_compute_kernel_WEM0);
  sensitive << ( gs_ctrl27 );
  sensitive << ( s_reg_58 );

  SC_METHOD(drive_plm_out_ping_compute_kernel_A0);
  sensitive << ( s_reg_45 );

  SC_METHOD(drive_plm_out_ping_compute_kernel_D0);
  sensitive << ( mac_Add_32Ux32U_32U_4_92_out1 );

  SC_METHOD(drive_plm_out_ping_compute_kernel_WE0);
  sensitive << ( gs_ctrl28 );
  sensitive << ( mac_And_1Ux1U_1U_4_88_out1 );

  SC_METHOD(drive_plm_out_ping_compute_kernel_CE0);
  sensitive << ( gs_ctrl29 );
  sensitive << ( mac_And_1Ux1U_1U_4_88_out1 );

  SC_METHOD(drive_plm_out_ping_compute_kernel_WEM0);
  sensitive << ( gs_ctrl30 );
  sensitive << ( mac_And_1Ux1U_1U_4_88_out1 );

  SC_METHOD(mac_GreaterThan_32Sx2S_1U_4_97);
  sensitive << ( s_reg_48 );

  SC_METHOD(mac_Not_1U_1U_4_98);
  sensitive << ( s_reg_41 );

  SC_METHOD(mac_LessThan_17Sx32S_1U_4_99);
  sensitive << ( s_reg_40 );
  sensitive << ( s_reg_37 );

  SC_METHOD(drive_global_state1);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_global_state1_next);
  sensitive << ( global_state1 );
  sensitive << ( cfg_done );
  sensitive << ( mac_LessThan_2Sx32S_1U_4_72_out1 );
  sensitive << ( mac_GreaterThan_32Sx2S_1U_4_74_out1 );
  sensitive << ( input_ready_channel_ready );
  sensitive << ( s_reg_47 );
  sensitive << ( mac_GreaterThan_32Sx2S_1U_4_97_out1 );
  sensitive << ( mac_LessThan_32Ux32U_1U_4_93_out1 );
  sensitive << ( output_ready_channel_valid );
  sensitive << ( mac_LessThan_17Sx32S_1U_4_99_out1 );

  SC_METHOD(drive_gs_ctrl13);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl14);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl15);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl16);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl17);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl18);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl19);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl20);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl21);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl22);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl23);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl24);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl25);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl26);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl27);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl28);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl29);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl30);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_write_chnl_data);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_write_ctrl_data_size_slice);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_write_ctrl_data_length_slice);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_write_ctrl_data_index_slice);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_write_ctrl_valid);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_acc_done);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_write_chnl_set_valid_curr);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_output_ready_channel_valid);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_16);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_17);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_18);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_19);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_20);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_21);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_22);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_23);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_25);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_26);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_27);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_28);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_31);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_s_reg_34);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(mac_Mul_32Ux32U_32U_4_47);
  sensitive << ( conf_info_mac_vec );
  sensitive << ( conf_info_mac_len );

  SC_METHOD(mac_Sub_32Sx1U_32S_4_48);
  sensitive << ( mac_Mul_32Ux32U_32U_4_47_out1 );

  SC_METHOD(mac_Or_32Sx1U_32S_4_49);
  sensitive << ( mac_Sub_32Sx1U_32S_4_48_out1 );

  SC_METHOD(mac_Add_32Sx1U_32S_4_50);
  sensitive << ( mac_Or_32Sx1U_32S_4_49_out1 );

  SC_METHOD(mac_Sub_32Sx1U_32S_4_51);
  sensitive << ( s_reg_19 );

  SC_METHOD(mac_LessThan_2Sx32S_1U_4_52);
  sensitive << ( s_reg_18 );

  SC_METHOD(mac_Mul_32Ux32U_32U_4_53);
  sensitive << ( s_reg_18 );
  sensitive << ( s_reg_20 );

  SC_METHOD(mac_Or_32Sx1U_32S_4_54);
  sensitive << ( s_reg_21 );

  SC_METHOD(mac_Add_32Sx1U_32S_4_55);
  sensitive << ( mac_Or_32Sx1U_32S_4_54_out1 );

  SC_METHOD(mac_Add_16Ux1U_16U_4_56);
  sensitive << ( s_reg_16 );

  SC_METHOD(mac_GreaterThan_32Sx2S_1U_4_57);
  sensitive << ( s_reg_23 );

  SC_METHOD(mac_GreaterThan_32Sx8S_1U_4_58);
  sensitive << ( s_reg_23 );

  SC_METHOD(mac_N_Mux_32_2_4_4_59);
  sensitive << ( mac_GreaterThan_32Sx8S_1U_4_58_out1 );
  sensitive << ( s_reg_23 );

  SC_METHOD(mac_Sub_32Sx7U_32S_4_60);
  sensitive << ( s_reg_23 );

  SC_METHOD(mac_Not_1U_1U_4_61);
  sensitive << ( s_reg_25 );

  SC_METHOD(mac_Add_32Ux32U_32U_4_62);
  sensitive << ( s_reg_27 );
  sensitive << ( s_reg_26 );

  SC_METHOD(mac_Not_1U_1U_4_63);
  sensitive << ( s_reg_25 );

  SC_METHOD(drive_mac_Add_16Ux2U_16U_4_64_in2);
  sensitive << ( gs_ctrl31 );
  sensitive << ( s_reg_31 );

  SC_METHOD(mac_Add_16Ux2U_16U_4_64);
  sensitive << ( mac_Add_16Ux2U_16U_4_64_in2 );

  SC_METHOD(drive_mac_Add_13Ux1U_13U_4_65_in2_slice);
  sensitive << ( gs_ctrl32 );
  sensitive << ( s_reg_31 );

  SC_METHOD(mac_Add_13Ux1U_13U_4_65);
  sensitive << ( mac_Add_13Ux1U_13U_4_65_in2_slice );

  SC_METHOD(drive_mac_Add_13Ux1U_13U_4_66_in2_slice);
  sensitive << ( gs_ctrl33 );
  sensitive << ( s_reg_31 );

  SC_METHOD(mac_Add_13Ux1U_13U_4_66);
  sensitive << ( mac_Add_13Ux1U_13U_4_66_in2_slice );

  SC_METHOD(drive_plm_out_ping_store_output_A2);
  sensitive << ( gs_ctrl34 );
  sensitive << ( s_reg_31 );

  SC_METHOD(drive_plm_out_ping_store_output_CE2);
  sensitive << ( gs_ctrl35 );
  sensitive << ( s_reg_25 );
  sensitive << ( s_reg_27 );
  sensitive << ( dma_write_ctrl_ready );
  sensitive << ( mac_LessThan_16Ux32U_1U_4_68_out1 );
  sensitive << ( mac_Or_1Ux1U_1U_4_46_out1 );

  SC_METHOD(drive_plm_out_ping_store_output_A1);
  sensitive << ( mac_Add_13Ux1U_13U_4_65_out1 );

  SC_METHOD(drive_plm_out_ping_store_output_CE1);
  sensitive << ( gs_ctrl36 );
  sensitive << ( s_reg_25 );
  sensitive << ( s_reg_27 );
  sensitive << ( dma_write_ctrl_ready );
  sensitive << ( mac_LessThan_16Ux32U_1U_4_68_out1 );
  sensitive << ( mac_Or_1Ux1U_1U_4_46_out1 );

  SC_METHOD(drive_plm_out_pong_store_output_A2);
  sensitive << ( gs_ctrl37 );
  sensitive << ( s_reg_31 );

  SC_METHOD(drive_plm_out_pong_store_output_CE2);
  sensitive << ( gs_ctrl38 );
  sensitive << ( mac_Not_1U_1U_4_63_out1 );
  sensitive << ( s_reg_27 );
  sensitive << ( dma_write_ctrl_ready );
  sensitive << ( mac_LessThan_16Ux32U_1U_4_68_out1 );
  sensitive << ( mac_Or_1Ux1U_1U_4_46_out1 );

  SC_METHOD(drive_plm_out_pong_store_output_A1);
  sensitive << ( mac_Add_13Ux1U_13U_4_66_out1 );

  SC_METHOD(drive_plm_out_pong_store_output_CE1);
  sensitive << ( gs_ctrl39 );
  sensitive << ( mac_Not_1U_1U_4_63_out1 );
  sensitive << ( s_reg_27 );
  sensitive << ( dma_write_ctrl_ready );
  sensitive << ( mac_LessThan_16Ux32U_1U_4_68_out1 );
  sensitive << ( mac_Or_1Ux1U_1U_4_46_out1 );

  SC_METHOD(drive_mac_N_MuxB_64_2_1_4_67_in3);
  sensitive << ( plm_out_pong_shared_Q2_wire );
  sensitive << ( plm_out_pong_shared_Q1_wire );

  SC_METHOD(drive_mac_N_MuxB_64_2_1_4_67_in2);
  sensitive << ( plm_out_ping_shared_Q2_wire );
  sensitive << ( plm_out_ping_shared_Q1_wire );

  SC_METHOD(mac_N_MuxB_64_2_1_4_67);
  sensitive << ( s_reg_25 );
  sensitive << ( mac_N_MuxB_64_2_1_4_67_in2 );
  sensitive << ( mac_N_MuxB_64_2_1_4_67_in3 );

  SC_METHOD(mac_LessThan_16Ux32U_1U_4_68);
  sensitive << ( s_reg_27 );
  sensitive << ( s_reg_31 );

  SC_METHOD(mac_Not_1U_1U_4_69);
  sensitive << ( dma_write_chnl_set_valid_curr );

  SC_METHOD(mac_GreaterThan_32Sx2S_1U_4_70);
  sensitive << ( s_reg_23 );

  SC_METHOD(mac_LessThan_17Sx32S_1U_4_71);
  sensitive << ( s_reg_18 );
  sensitive << ( s_reg_16 );

  SC_METHOD(drive_global_state2);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_global_state2_next);
  sensitive << ( global_state2 );
  sensitive << ( cfg_done );
  sensitive << ( mac_LessThan_2Sx32S_1U_4_52_out1 );
  sensitive << ( mac_GreaterThan_32Sx2S_1U_4_57_out1 );
  sensitive << ( mac_LessThan_17Sx32S_1U_4_71_out1 );
  sensitive << ( output_ready_channel_ready );
  sensitive << ( dma_write_ctrl_ready );
  sensitive << ( s_reg_27 );
  sensitive << ( mac_GreaterThan_32Sx2S_1U_4_70_out1 );
  sensitive << ( mac_Or_1Ux1U_1U_4_46_out1 );
  sensitive << ( mac_LessThan_16Ux32U_1U_4_68_out1 );

  SC_METHOD(drive_gs_ctrl31);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl32);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl33);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl34);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl35);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl36);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl37);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl38);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_gs_ctrl39);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_dma_read_chnl_data_buf);
  sensitive << clk.pos();
  sensitive << rst.neg();
  dont_initialize();

  SC_METHOD(drive_dma_read_chnl_sync_rcv_set_ready_prev);
  sensitive << clk.pos();
  sensitive << rst.neg();
  dont_initialize();

  SC_METHOD(drive_dma_read_chnl_sync_rcv_reset_ready_prev);
  sensitive << clk.pos();
  sensitive << rst.neg();
  dont_initialize();

  SC_METHOD(drive_dma_read_chnl_sync_rcv_reset_ready_curr);
  sensitive << clk.pos();
  sensitive << rst.neg();
  dont_initialize();

  SC_METHOD(drive_dma_read_chnl_sync_rcv_ready_flop);
  sensitive << clk.pos();
  sensitive << rst.neg();
  dont_initialize();

  SC_METHOD(drive_dma_read_chnl_ready_mask);
  sensitive << clk.pos();
  sensitive << rst.neg();
  dont_initialize();

  SC_METHOD(mac_Not_1U_1U_4_6);
  sensitive << ( dma_read_chnl_ready_mask );

  SC_METHOD(mac_Not_1U_1U_4_7);
  sensitive << ( dma_read_chnl_sync_rcv_reset_ready_curr );

  SC_METHOD(mac_Or_1Ux1U_1U_4_8);
  sensitive << ( dma_read_chnl_ready );
  sensitive << ( mac_Not_1U_1U_4_6_out1 );

  SC_METHOD(mac_And_1Ux1U_1U_4_9);
  sensitive << ( dma_read_chnl_ready );
  sensitive << ( dma_read_chnl_valid );

  SC_METHOD(mac_N_Muxb_1_2_5_4_10);
  sensitive << ( mac_And_1Ux1U_1U_4_9_out1 );
  sensitive << ( mac_Not_1U_1U_4_7_out1 );
  sensitive << ( dma_read_chnl_sync_rcv_reset_ready_curr );

  SC_METHOD(mac_N_MuxB_64_2_1_4_11);
  sensitive << ( mac_And_1Ux1U_1U_4_9_out1 );
  sensitive << ( dma_read_chnl_data );
  sensitive << ( dma_read_chnl_data_buf );

  SC_METHOD(drive_dma_read_chnl_ready);
  sensitive << ( mac_Or_1Ux1U_1U_4_5_out1 );

  SC_METHOD(mac_Xor_1Ux1U_1U_4_1);
  sensitive << ( dma_read_chnl_sync_rcv_reset_ready_prev );
  sensitive << ( dma_read_chnl_sync_rcv_reset_ready_curr );

  SC_METHOD(mac_Not_1U_1U_4_2);
  sensitive << ( mac_Xor_1Ux1U_1U_4_1_out1 );

  SC_METHOD(mac_And_1Ux1U_1U_4_3);
  sensitive << ( dma_read_chnl_sync_rcv_ready_flop );
  sensitive << ( mac_Not_1U_1U_4_2_out1 );

  SC_METHOD(mac_Xor_1Ux1U_1U_4_4);
  sensitive << ( dma_read_chnl_sync_rcv_set_ready_prev );
  sensitive << ( dma_read_chnl_set_ready_curr );

  SC_METHOD(mac_Or_1Ux1U_1U_4_5);
  sensitive << ( mac_And_1Ux1U_1U_4_3_out1 );
  sensitive << ( mac_Xor_1Ux1U_1U_4_4_out1 );

  SC_METHOD(mac_Not_1U_1U_4_12);
  sensitive << ( dma_read_chnl_ready );

  SC_METHOD(mac_And_1Ux1U_1U_4_13);
  sensitive << ( dma_read_chnl_ready_mask );
  sensitive << ( mac_Not_1U_1U_4_12_out1 );

  SC_METHOD(mac_And_1Ux1U_1U_4_14);
  sensitive << ( dma_read_chnl_ready );
  sensitive << ( dma_read_chnl_valid );

  SC_METHOD(mac_Or_1Ux1U_1U_4_15);
  sensitive << ( mac_And_1Ux1U_1U_4_13_out1 );
  sensitive << ( mac_And_1Ux1U_1U_4_14_out1 );

  SC_METHOD(drive_dma_write_chnl_sync_snd_set_valid_prev);
  sensitive << clk.pos();
  sensitive << rst.neg();
  dont_initialize();

  SC_METHOD(drive_dma_write_chnl_sync_snd_reset_valid_prev);
  sensitive << clk.pos();
  sensitive << rst.neg();
  dont_initialize();

  SC_METHOD(drive_dma_write_chnl_sync_snd_reset_valid_curr);
  sensitive << clk.pos();
  sensitive << rst.neg();
  dont_initialize();

  SC_METHOD(drive_dma_write_chnl_sync_snd_valid_flop);
  sensitive << clk.pos();
  sensitive << rst.neg();
  dont_initialize();

  SC_METHOD(mac_Not_1U_1U_4_43);
  sensitive << ( dma_write_chnl_sync_snd_reset_valid_curr );

  SC_METHOD(mac_N_Muxb_1_2_5_4_44);
  sensitive << ( dma_write_chnl_ready );
  sensitive << ( mac_Not_1U_1U_4_43_out1 );
  sensitive << ( dma_write_chnl_sync_snd_reset_valid_curr );

  SC_METHOD(drive_dma_write_chnl_valid);
  sensitive << ( mac_Or_1Ux1U_1U_4_42_out1 );

  SC_METHOD(mac_Xor_1Ux1U_1U_4_38);
  sensitive << ( dma_write_chnl_sync_snd_reset_valid_prev );
  sensitive << ( dma_write_chnl_sync_snd_reset_valid_curr );

  SC_METHOD(mac_Not_1U_1U_4_39);
  sensitive << ( mac_Xor_1Ux1U_1U_4_38_out1 );

  SC_METHOD(mac_And_1Ux1U_1U_4_40);
  sensitive << ( dma_write_chnl_sync_snd_valid_flop );
  sensitive << ( mac_Not_1U_1U_4_39_out1 );

  SC_METHOD(mac_Xor_1Ux1U_1U_4_41);
  sensitive << ( dma_write_chnl_sync_snd_set_valid_prev );
  sensitive << ( dma_write_chnl_set_valid_curr );

  SC_METHOD(mac_Or_1Ux1U_1U_4_42);
  sensitive << ( mac_And_1Ux1U_1U_4_40_out1 );
  sensitive << ( mac_Xor_1Ux1U_1U_4_41_out1 );

  SC_METHOD(mac_Not_1U_1U_4_45);
  sensitive << ( dma_write_chnl_valid );

  SC_METHOD(mac_Or_1Ux1U_1U_4_46);
  sensitive << ( dma_write_chnl_ready );
  sensitive << ( mac_Not_1U_1U_4_45_out1 );

  SC_METHOD(drive_cfg_done);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_global_state3);
  sensitive << clk.pos();
  dont_initialize();

  SC_METHOD(drive_cfg_config_accelerator_next);
  sensitive << ( global_state3 );
  sensitive << ( conf_done );

  plm_out_pong_shared = new mac_plm_block_out_dma64("plm_out_pong_shared");
  plm_out_pong_shared->CLK(clk);
  plm_out_pong_shared->WE0(plm_out_pong_shared_WE0_wire);
  plm_out_pong_shared->CE0(plm_out_pong_shared_CE0_wire);
  plm_out_pong_shared->D0(plm_out_pong_shared_D0_wire);
  plm_out_pong_shared->A0(plm_out_pong_shared_A0_wire);
  plm_out_pong_shared->WEM0(plm_out_pong_shared_WEM0_wire);
  plm_out_pong_shared->CE1(plm_out_pong_shared_CE1_wire);
  plm_out_pong_shared->Q1(plm_out_pong_shared_Q1_wire);
  plm_out_pong_shared->A1(plm_out_pong_shared_A1_wire);
  plm_out_pong_shared->CE2(plm_out_pong_shared_CE2_wire);
  plm_out_pong_shared->Q2(plm_out_pong_shared_Q2_wire);
  plm_out_pong_shared->A2(plm_out_pong_shared_A2_wire);

  SC_METHOD(mux_plm_out_pong_shared_0_inputs_plm_out_pong_shared_WEM0_wire);
  sensitive << ( plm_out_pong_compute_kernel_WEM0 );

  SC_METHOD(mux_plm_out_pong_shared_0_inputs_plm_out_pong_shared_A0_wire);
  sensitive << ( plm_out_pong_compute_kernel_A0 );

  SC_METHOD(mux_plm_out_pong_shared_0_inputs_plm_out_pong_shared_D0_wire);
  sensitive << ( plm_out_pong_compute_kernel_D0 );

  SC_METHOD(mux_plm_out_pong_shared_0_inputs_plm_out_pong_shared_CE0_wire);
  sensitive << ( plm_out_pong_compute_kernel_CE0 );

  SC_METHOD(mux_plm_out_pong_shared_0_inputs_plm_out_pong_shared_WE0_wire);
  sensitive << ( plm_out_pong_compute_kernel_WE0 );

  SC_METHOD(mux_plm_out_pong_shared_2_inputs_plm_out_pong_shared_A2_wire);
  sensitive << ( plm_out_pong_store_output_A2 );

  SC_METHOD(mux_plm_out_pong_shared_2_inputs_plm_out_pong_shared_CE2_wire);
  sensitive << ( plm_out_pong_store_output_CE2 );

  SC_METHOD(mux_plm_out_pong_shared_1_inputs_plm_out_pong_shared_A1_wire);
  sensitive << ( plm_out_pong_store_output_A1 );

  SC_METHOD(mux_plm_out_pong_shared_1_inputs_plm_out_pong_shared_CE1_wire);
  sensitive << ( plm_out_pong_store_output_CE1 );

  plm_out_ping_shared = new mac_plm_block_out_dma64("plm_out_ping_shared");
  plm_out_ping_shared->CLK(clk);
  plm_out_ping_shared->WE0(plm_out_ping_shared_WE0_wire);
  plm_out_ping_shared->CE0(plm_out_ping_shared_CE0_wire);
  plm_out_ping_shared->D0(plm_out_ping_shared_D0_wire);
  plm_out_ping_shared->A0(plm_out_ping_shared_A0_wire);
  plm_out_ping_shared->WEM0(plm_out_ping_shared_WEM0_wire);
  plm_out_ping_shared->CE1(plm_out_ping_shared_CE1_wire);
  plm_out_ping_shared->Q1(plm_out_ping_shared_Q1_wire);
  plm_out_ping_shared->A1(plm_out_ping_shared_A1_wire);
  plm_out_ping_shared->CE2(plm_out_ping_shared_CE2_wire);
  plm_out_ping_shared->Q2(plm_out_ping_shared_Q2_wire);
  plm_out_ping_shared->A2(plm_out_ping_shared_A2_wire);

  SC_METHOD(mux_plm_out_ping_shared_0_inputs_plm_out_ping_shared_WEM0_wire);
  sensitive << ( plm_out_ping_compute_kernel_WEM0 );

  SC_METHOD(mux_plm_out_ping_shared_0_inputs_plm_out_ping_shared_A0_wire);
  sensitive << ( plm_out_ping_compute_kernel_A0 );

  SC_METHOD(mux_plm_out_ping_shared_0_inputs_plm_out_ping_shared_D0_wire);
  sensitive << ( plm_out_ping_compute_kernel_D0 );

  SC_METHOD(mux_plm_out_ping_shared_0_inputs_plm_out_ping_shared_CE0_wire);
  sensitive << ( plm_out_ping_compute_kernel_CE0 );

  SC_METHOD(mux_plm_out_ping_shared_0_inputs_plm_out_ping_shared_WE0_wire);
  sensitive << ( plm_out_ping_compute_kernel_WE0 );

  SC_METHOD(mux_plm_out_ping_shared_2_inputs_plm_out_ping_shared_A2_wire);
  sensitive << ( plm_out_ping_store_output_A2 );

  SC_METHOD(mux_plm_out_ping_shared_2_inputs_plm_out_ping_shared_CE2_wire);
  sensitive << ( plm_out_ping_store_output_CE2 );

  SC_METHOD(mux_plm_out_ping_shared_1_inputs_plm_out_ping_shared_A1_wire);
  sensitive << ( plm_out_ping_store_output_A1 );

  SC_METHOD(mux_plm_out_ping_shared_1_inputs_plm_out_ping_shared_CE1_wire);
  sensitive << ( plm_out_ping_store_output_CE1 );

  plm_in_pong_shared = new mac_plm_block_in_dma64("plm_in_pong_shared");
  plm_in_pong_shared->CLK(clk);
  plm_in_pong_shared->WE0(plm_in_pong_shared_WE0_wire);
  plm_in_pong_shared->CE0(plm_in_pong_shared_CE0_wire);
  plm_in_pong_shared->D0(plm_in_pong_shared_D0_wire);
  plm_in_pong_shared->A0(plm_in_pong_shared_A0_wire);
  plm_in_pong_shared->WEM0(plm_in_pong_shared_WEM0_wire);
  plm_in_pong_shared->WE1(plm_in_pong_shared_WE1_wire);
  plm_in_pong_shared->CE1(plm_in_pong_shared_CE1_wire);
  plm_in_pong_shared->D1(plm_in_pong_shared_D1_wire);
  plm_in_pong_shared->A1(plm_in_pong_shared_A1_wire);
  plm_in_pong_shared->WEM1(plm_in_pong_shared_WEM1_wire);
  plm_in_pong_shared->CE2(plm_in_pong_shared_CE2_wire);
  plm_in_pong_shared->Q2(plm_in_pong_shared_Q2_wire);
  plm_in_pong_shared->A2(plm_in_pong_shared_A2_wire);

  SC_METHOD(copy_plm_in_pong_shared_2_outputs_plm_in_pong_compute_kernel_Q2);
  sensitive << ( plm_in_pong_shared_Q2_wire );

  SC_METHOD(mux_plm_in_pong_shared_2_inputs_plm_in_pong_shared_A2_wire);
  sensitive << ( plm_in_pong_compute_kernel_A2 );

  SC_METHOD(mux_plm_in_pong_shared_2_inputs_plm_in_pong_shared_CE2_wire);
  sensitive << ( plm_in_pong_compute_kernel_CE2 );

  SC_METHOD(mux_plm_in_pong_shared_1_inputs_plm_in_pong_shared_WEM1_wire);
  sensitive << ( plm_in_pong_load_input_WEM1 );

  SC_METHOD(mux_plm_in_pong_shared_1_inputs_plm_in_pong_shared_A1_wire);
  sensitive << ( plm_in_pong_load_input_A1 );

  SC_METHOD(mux_plm_in_pong_shared_1_inputs_plm_in_pong_shared_D1_wire);
  sensitive << ( plm_in_pong_load_input_D1 );

  SC_METHOD(mux_plm_in_pong_shared_1_inputs_plm_in_pong_shared_CE1_wire);
  sensitive << ( plm_in_pong_load_input_CE1 );

  SC_METHOD(mux_plm_in_pong_shared_1_inputs_plm_in_pong_shared_WE1_wire);
  sensitive << ( plm_in_pong_load_input_WE1 );

  SC_METHOD(mux_plm_in_pong_shared_0_inputs_plm_in_pong_shared_WEM0_wire);
  sensitive << ( plm_in_pong_load_input_WEM0 );

  SC_METHOD(mux_plm_in_pong_shared_0_inputs_plm_in_pong_shared_A0_wire);
  sensitive << ( plm_in_pong_load_input_A0 );

  SC_METHOD(mux_plm_in_pong_shared_0_inputs_plm_in_pong_shared_D0_wire);
  sensitive << ( plm_in_pong_load_input_D0 );

  SC_METHOD(mux_plm_in_pong_shared_0_inputs_plm_in_pong_shared_CE0_wire);
  sensitive << ( plm_in_pong_load_input_CE0 );

  SC_METHOD(mux_plm_in_pong_shared_0_inputs_plm_in_pong_shared_WE0_wire);
  sensitive << ( plm_in_pong_load_input_WE0 );

  plm_in_ping_shared = new mac_plm_block_in_dma64("plm_in_ping_shared");
  plm_in_ping_shared->CLK(clk);
  plm_in_ping_shared->WE0(plm_in_ping_shared_WE0_wire);
  plm_in_ping_shared->CE0(plm_in_ping_shared_CE0_wire);
  plm_in_ping_shared->D0(plm_in_ping_shared_D0_wire);
  plm_in_ping_shared->A0(plm_in_ping_shared_A0_wire);
  plm_in_ping_shared->WEM0(plm_in_ping_shared_WEM0_wire);
  plm_in_ping_shared->WE1(plm_in_ping_shared_WE1_wire);
  plm_in_ping_shared->CE1(plm_in_ping_shared_CE1_wire);
  plm_in_ping_shared->D1(plm_in_ping_shared_D1_wire);
  plm_in_ping_shared->A1(plm_in_ping_shared_A1_wire);
  plm_in_ping_shared->WEM1(plm_in_ping_shared_WEM1_wire);
  plm_in_ping_shared->CE2(plm_in_ping_shared_CE2_wire);
  plm_in_ping_shared->Q2(plm_in_ping_shared_Q2_wire);
  plm_in_ping_shared->A2(plm_in_ping_shared_A2_wire);

  SC_METHOD(copy_plm_in_ping_shared_2_outputs_plm_in_ping_compute_kernel_Q2);
  sensitive << ( plm_in_ping_shared_Q2_wire );

  SC_METHOD(mux_plm_in_ping_shared_2_inputs_plm_in_ping_shared_A2_wire);
  sensitive << ( plm_in_ping_compute_kernel_A2 );

  SC_METHOD(mux_plm_in_ping_shared_2_inputs_plm_in_ping_shared_CE2_wire);
  sensitive << ( plm_in_ping_compute_kernel_CE2 );

  SC_METHOD(mux_plm_in_ping_shared_1_inputs_plm_in_ping_shared_WEM1_wire);
  sensitive << ( plm_in_ping_load_input_WEM1 );

  SC_METHOD(mux_plm_in_ping_shared_1_inputs_plm_in_ping_shared_A1_wire);
  sensitive << ( plm_in_ping_load_input_A1 );

  SC_METHOD(mux_plm_in_ping_shared_1_inputs_plm_in_ping_shared_D1_wire);
  sensitive << ( plm_in_ping_load_input_D1 );

  SC_METHOD(mux_plm_in_ping_shared_1_inputs_plm_in_ping_shared_CE1_wire);
  sensitive << ( plm_in_ping_load_input_CE1 );

  SC_METHOD(mux_plm_in_ping_shared_1_inputs_plm_in_ping_shared_WE1_wire);
  sensitive << ( plm_in_ping_load_input_WE1 );

  SC_METHOD(mux_plm_in_ping_shared_0_inputs_plm_in_ping_shared_WEM0_wire);
  sensitive << ( plm_in_ping_load_input_WEM0 );

  SC_METHOD(mux_plm_in_ping_shared_0_inputs_plm_in_ping_shared_A0_wire);
  sensitive << ( plm_in_ping_load_input_A0 );

  SC_METHOD(mux_plm_in_ping_shared_0_inputs_plm_in_ping_shared_D0_wire);
  sensitive << ( plm_in_ping_load_input_D0 );

  SC_METHOD(mux_plm_in_ping_shared_0_inputs_plm_in_ping_shared_CE0_wire);
  sensitive << ( plm_in_ping_load_input_CE0 );

  SC_METHOD(mux_plm_in_ping_shared_0_inputs_plm_in_ping_shared_WE0_wire);
  sensitive << ( plm_in_ping_load_input_WE0 );

  SC_METHOD(drive_dma_read_ctrl_data_index);
  sensitive << ( dma_read_ctrl_data_index_slice );

  SC_METHOD(drive_dma_read_ctrl_data_length);
  sensitive << ( dma_read_ctrl_data_length_slice );

  SC_METHOD(drive_dma_read_ctrl_data_size);
  sensitive << ( dma_read_ctrl_data_size_slice );

  SC_METHOD(drive_dma_write_ctrl_data_index);
  sensitive << ( dma_write_ctrl_data_index_slice );

  SC_METHOD(drive_dma_write_ctrl_data_length);
  sensitive << ( dma_write_ctrl_data_length_slice );

  SC_METHOD(drive_dma_write_ctrl_data_size);
  sensitive << ( dma_write_ctrl_data_size_slice );

}
void mac::drive_debug(){
  debug = 0ULL;
}
// resource: regr_en_ac_1
void mac::drive_dma_read_ctrl_data_size_slice(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_ctrl_data_size_slice = sc_biguint<1>(0ULL);
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 4ULL: 
      dma_read_ctrl_data_size_slice = sc_biguint<1>(1ULL);
      break;
    }
  }
}
// resource: regr_en_ac_31
void mac::drive_dma_read_ctrl_data_length_slice(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_ctrl_data_length_slice = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 4ULL: 
      dma_read_ctrl_data_length_slice = (sc_uint<31> ) (s_reg_10.read().range(31
                                        ,1));
      break;
    }
  }
}
// resource: regr_en_ac_31
void mac::drive_dma_read_ctrl_data_index_slice(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_ctrl_data_index_slice = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 4ULL: 
      dma_read_ctrl_data_index_slice = (sc_uint<31> ) (s_reg_11.read());
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_ac_1
void mac::drive_dma_read_ctrl_valid(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_ctrl_valid = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 4ULL: 
      dma_read_ctrl_valid = 1ULL;
      break;
    case 5ULL: 
      if ( dma_read_ctrl_ready.read() ) {
        dma_read_ctrl_valid = 0ULL;
      } 
      break;
    }
  }
}
// resource: regr_en_ac_1
void mac::drive_dma_read_chnl_set_ready_curr(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_chnl_set_ready_curr = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 5ULL: 
      if ( (dma_read_ctrl_ready.read() && ((0ULL != s_reg_10.read()) && 
           mac_Or_1Ux1U_1U_4_15_out1.read())) ) {
        dma_read_chnl_set_ready_curr = (sc_uint<1> ) (mac_Not_1U_1U_4_30_out1
                                       .read());
      } 
      break;
    case 6ULL: 
      if ( mac_Or_1Ux1U_1U_4_15_out1.read() ) {
        dma_read_chnl_set_ready_curr = (sc_uint<1> ) (mac_Not_1U_1U_4_30_out1
                                       .read());
      } 
      break;
    case 7ULL: 
      if ( (mac_LessThan_16Ux32U_1U_4_32_out1.read() && 
           mac_Or_1Ux1U_1U_4_15_out1.read()) ) {
        dma_read_chnl_set_ready_curr = (sc_uint<1> ) (mac_Not_1U_1U_4_30_out1
                                       .read());
      } 
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_ac_1
void mac::drive_input_ready_channel_ready(){
  if ( (rst.read() == 0ULL) ) {
    input_ready_channel_ready = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 5ULL: 
      if ( (dma_read_ctrl_ready.read() && (0ULL == s_reg_10.read())) ) {
        input_ready_channel_ready = 1ULL;
      } 
      break;
    case 7ULL: 
      if ( mac_LessThan_16Ux32U_1U_4_32_out1.read() );
      else {
        input_ready_channel_ready = 1ULL;
      }
      break;
    case 8ULL: 
      if ( input_ready_channel_valid.read() ) {
        input_ready_channel_ready = 0ULL;
      } 
      break;
    }
  }
}
// resource: regr_en_as_1
void mac::drive_s_reg_1(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_1 = 1ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 8ULL: 
      s_reg_1 = mac_Not_1U_1U_4_36_out1.read();
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_10(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_10 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 3ULL: case 8ULL: 
      s_reg_10 = mac_N_Mux_32_2_2_4_24_out1.read();
      break;
    }
  }
}
// resource: regr_en_ac_31
void mac::drive_s_reg_11(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_11 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 3ULL: case 8ULL: 
      s_reg_11 = (sc_uint<31> ) (s_reg_3.read().range(31,1));
      break;
    }
  }
}
// resource: regr_en_ac_1
void mac::drive_s_reg_12(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_12 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 5ULL: 
      if ( (0ULL != s_reg_10.read()) ) {
        s_reg_12 = mac_Not_1U_1U_4_27_out1.read();
      } 
      break;
    }
  }
}
// resource: mux_16bx2i1c
// resource: regr_en_ac_16
void mac::drive_s_reg_13(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_13 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 5ULL: 
      if ( (0ULL != s_reg_10.read()) ) {
        s_reg_13 = 0ULL;
      } 
      break;
    case 7ULL: 
      s_reg_13 = s_reg_14.read();
      break;
    }
  }
}
// resource: regr_en_ac_16
void mac::drive_s_reg_14(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_14 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 5ULL: 
      if ( (0ULL != s_reg_10.read()) ) {
        s_reg_14 = (sc_uint<16> ) (mac_Add_16Ux2U_16U_4_28_out1.read());
      } 
      break;
    case 7ULL: 
      s_reg_14 = (sc_uint<16> ) (mac_Add_16Ux2U_16U_4_28_out1.read());
      break;
    }
  }
}
// resource: regr_en_ac_64
void mac::drive_s_reg_15(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_15 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 5ULL: 
      if ( (0ULL != s_reg_10.read()) ) {
        s_reg_15 = (sc_uint<64> ) (mac_N_MuxB_64_2_1_4_29_out1.read());
      } 
      break;
    case 6ULL: case 7ULL: 
      s_reg_15 = (sc_uint<64> ) (mac_N_MuxB_64_2_1_4_29_out1.read());
      break;
    }
  }
}
// resource: regr_en_ac_16
void mac::drive_s_reg_2(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_2 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 2ULL: 
      s_reg_2 = (sc_uint<16> ) (mac_Add_16Ux1U_16U_4_21_out1.read());
      break;
    case 3ULL: 
      if ( mac_GreaterThan_32Sx2S_1U_4_22_out1.read() );
      else {
        s_reg_2 = (sc_uint<16> ) (mac_Add_16Ux1U_16U_4_21_out1.read());
      }
      break;
    case 8ULL: 
      if ( (input_ready_channel_valid.read() && !
           mac_GreaterThan_32Sx2S_1U_4_35_out1.read()) ) {
        s_reg_2 = (sc_uint<16> ) (mac_Add_16Ux1U_16U_4_21_out1.read());
      } 
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_3(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_3 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 4ULL: 
      s_reg_3 = (sc_uint<32> ) (mac_Add_32Ux32U_32U_4_26_out1.read());
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_4(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_4 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 0ULL: case 1ULL: 
      s_reg_4 = (sc_uint<32> ) (conf_info_mac_n.read());
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_5(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_5 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 0ULL: case 1ULL: 
      s_reg_5 = (sc_uint<32> ) (mac_Sub_32Sx1U_32S_4_17_out1.read());
      break;
    }
  }
}
// resource: mux_32bx2i0c
// resource: regr_en_ac_32
void mac::drive_s_reg_6(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_6 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 2ULL: 
      s_reg_6 = (sc_uint<32> ) (mac_Add_32Sx1U_32S_4_20_out1.read());
      break;
    case 3ULL: 
      if ( mac_GreaterThan_32Sx2S_1U_4_22_out1.read() ) {
        s_reg_6 = (sc_uint<32> ) (mac_Sub_32Sx13U_32S_4_25_out1.read());
      } else {
        s_reg_6 = (sc_uint<32> ) (mac_Add_32Sx1U_32S_4_20_out1.read());
      }
      break;
    case 8ULL: 
      if ( input_ready_channel_valid.read() ) {
        if ( mac_GreaterThan_32Sx2S_1U_4_35_out1.read() ) {
          s_reg_6 = (sc_uint<32> ) (mac_Sub_32Sx13U_32S_4_25_out1.read());
        } else {
          s_reg_6 = (sc_uint<32> ) (mac_Add_32Sx1U_32S_4_20_out1.read());
        }
      } 
      break;
    }
  }
}
// resource: mux_1bx2i0c
// resource: regr_en_ac_1
void mac::drive_s_reg_8(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_8 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 3ULL: 
      s_reg_8 = s_reg_1.read();
      break;
    case 8ULL: 
      if ( input_ready_channel_valid.read() ) {
        s_reg_8 = mac_Not_1U_1U_4_36_out1.read();
      } 
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_9(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_9 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state.read()) ) {
    case 3ULL: case 8ULL: 
      s_reg_9 = s_reg_3.read();
      break;
    }
  }
}
// resource: mac_Mul_32Ux32U_32U_4  instance: mac_Mul_32Ux32U_32U_4_16
void mac::mac_Mul_32Ux32U_32U_4_16(){
  mac_Mul_32Ux32U_32U_4_16_out1 = (/*cliff*/sc_uint<32>)(sc_uint<32> )
                                  conf_info_mac_len.read() * (sc_uint<32> )
                                  conf_info_mac_vec.read();
}
// resource: mac_Sub_32Sx1U_32S_4  instance: mac_Sub_32Sx1U_32S_4_17
void mac::mac_Sub_32Sx1U_32S_4_17(){
  mac_Sub_32Sx1U_32S_4_17_out1 = (/*cliff*/sc_int<32>)(sc_int<32> )
                                 mac_Mul_32Ux32U_32U_4_16_out1.read() - 1ULL;
}
// resource: mac_LessThan_2Sx32S_1U_4  instance: mac_LessThan_2Sx32S_1U_4_18
void mac::mac_LessThan_2Sx32S_1U_4_18(){
  mac_LessThan_2Sx32S_1U_4_18_out1 = (/*imp*/sc_uint<1>)((sc_int<2> )0LL < (
                                     sc_int<32> )s_reg_4.read());
}
// resource: mac_Or_32Sx1U_32S_4  instance: mac_Or_32Sx1U_32S_4_19
void mac::mac_Or_32Sx1U_32S_4_19(){
  mac_Or_32Sx1U_32S_4_19_out1 = (sc_int<32> )s_reg_5.read() | 1ULL;
}
// resource: mac_Add_32Sx1U_32S_4  instance: mac_Add_32Sx1U_32S_4_20
void mac::mac_Add_32Sx1U_32S_4_20(){
  mac_Add_32Sx1U_32S_4_20_out1 = (/*cliff*/sc_int<32>)(
                                 mac_Or_32Sx1U_32S_4_19_out1.read() + 1ULL);
}
// resource: mac_Add_16Ux1U_16U_4  instance: mac_Add_16Ux1U_16U_4_21
void mac::mac_Add_16Ux1U_16U_4_21(){
  mac_Add_16Ux1U_16U_4_21_out1 = (/*cliff*/sc_uint<32>)((sc_uint<16> )s_reg_2
                                 .read() + 1ULL);
}
// resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_22
void mac::mac_GreaterThan_32Sx2S_1U_4_22(){
  mac_GreaterThan_32Sx2S_1U_4_22_out1 = (/*imp*/sc_uint<1>)((sc_int<32> )s_reg_6
                                        .read() > (sc_int<2> )0LL);
}
// resource: mac_GreaterThan_32Sx14S_1U_4  instance: mac_GreaterThan_32Sx14S_1U_4_23
void mac::mac_GreaterThan_32Sx14S_1U_4_23(){
  mac_GreaterThan_32Sx14S_1U_4_23_out1 = (/*imp*/sc_uint<1>)((sc_int<32> )
                                         s_reg_6.read() > (sc_int<14> )6400LL);
}
// resource: mac_N_Mux_32_2_2_4
void mac::mac_N_Mux_32_2_2_4_24(){
  if ( mac_GreaterThan_32Sx14S_1U_4_23_out1.read() ) {
    mac_N_Mux_32_2_2_4_24_out1 = (sc_uint<32> ) (6400LL);
  } else {
    mac_N_Mux_32_2_2_4_24_out1 = s_reg_6.read();
  }
}
// resource: mac_Sub_32Sx13U_32S_4  instance: mac_Sub_32Sx13U_32S_4_25
void mac::mac_Sub_32Sx13U_32S_4_25(){
  mac_Sub_32Sx13U_32S_4_25_out1 = (/*cliff*/sc_int<32>)(sc_int<32> )s_reg_6
                                  .read() - 6400ULL;
}
// resource: mac_Add_32Ux32U_32U_4  instance: mac_Add_32Ux32U_32U_4_26
void mac::mac_Add_32Ux32U_32U_4_26(){
  mac_Add_32Ux32U_32U_4_26_out1 = (/*cliff*/sc_uint<32>)((sc_uint<32> )s_reg_9
                                  .read() + (sc_uint<32> )s_reg_10.read());
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_27
void mac::mac_Not_1U_1U_4_27(){
  mac_Not_1U_1U_4_27_out1 = (sc_uint<1> ) (!s_reg_8.read());
}
// resource: mux_16bx2i1c
void mac::drive_mac_Add_16Ux2U_16U_4_28_in2(){
  if ( gs_ctrl0.read() ) {
    mac_Add_16Ux2U_16U_4_28_in2 = (sc_uint<16> ) (s_reg_14.read());
  } else {
    mac_Add_16Ux2U_16U_4_28_in2 = 0ULL;
  }
}
// resource: mac_Add_16Ux2U_16U_4  instance: mac_Add_16Ux2U_16U_4_28
void mac::mac_Add_16Ux2U_16U_4_28(){
  mac_Add_16Ux2U_16U_4_28_out1 = (/*cliff*/sc_uint<32>)(
                                 mac_Add_16Ux2U_16U_4_28_in2.read() + 2ULL);
}
// resource: mac_N_MuxB_64_2_1_4
void mac::mac_N_MuxB_64_2_1_4_29(){
  if ( dma_read_chnl_ready.read() ) {
    mac_N_MuxB_64_2_1_4_29_out1 = (sc_biguint<64> ) (dma_read_chnl_data.read());
  } else {
    mac_N_MuxB_64_2_1_4_29_out1 = (sc_biguint<64> ) (dma_read_chnl_data_buf
                                  .read());
  }
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_30
void mac::mac_Not_1U_1U_4_30(){
  mac_Not_1U_1U_4_30_out1 = (sc_uint<1> ) (!dma_read_chnl_set_ready_curr.read())
  ;
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_31
void mac::mac_Not_1U_1U_4_31(){
  mac_Not_1U_1U_4_31_out1 = (sc_uint<1> ) (!s_reg_8.read());
}
// resource: mac_LessThan_16Ux32U_1U_4  instance: mac_LessThan_16Ux32U_1U_4_32
void mac::mac_LessThan_16Ux32U_1U_4_32(){
  mac_LessThan_16Ux32U_1U_4_32_out1 = (/*imp*/sc_uint<1>)((sc_uint<16> )s_reg_14
                                      .read() < (sc_uint<32> )s_reg_10.read());
}
// resource: mac_Add_13Ux1U_13U_4  instance: mac_Add_13Ux1U_13U_4_33
void mac::mac_Add_13Ux1U_13U_4_33(){
  mac_Add_13Ux1U_13U_4_33_out1 = (/*cliff*/sc_uint<32>)((sc_uint<13> )s_reg_13
                                 .read() + 1ULL);
}
// resource: mac_Add_13Ux1U_13U_4  instance: mac_Add_13Ux1U_13U_4_34
void mac::mac_Add_13Ux1U_13U_4_34(){
  mac_Add_13Ux1U_13U_4_34_out1 = (/*cliff*/sc_uint<32>)((sc_uint<13> )s_reg_13
                                 .read() + 1ULL);
}
void mac::drive_plm_in_pong_load_input_A1(){
  plm_in_pong_load_input_A1 = (sc_uint<13> ) (s_reg_13.read());
}
void mac::drive_plm_in_pong_load_input_D1(){
  plm_in_pong_load_input_D1 = (sc_uint<32> ) (s_reg_15.read());
}
// resource: mux_1bx2i2c
void mac::drive_plm_in_pong_load_input_WE1(){
  if ( gs_ctrl1.read() ) {
    if ( s_reg_12.read() ) {
      plm_in_pong_load_input_WE1 = 1ULL;
    } else {
      plm_in_pong_load_input_WE1 = 0ULL;
    }
  } else {
    plm_in_pong_load_input_WE1 = 0ULL;
  }
}
// resource: mux_1bx2i1c
void mac::drive_plm_in_pong_load_input_CE1(){
  if ( gs_ctrl2.read() ) {
    if ( s_reg_12.read() ) {
      plm_in_pong_load_input_CE1 = (sc_uint<1> ) (s_reg_12.read());
    } else {
      plm_in_pong_load_input_CE1 = 0ULL;
    }
  } else {
    plm_in_pong_load_input_CE1 = 0ULL;
  }
}
// resource: mux_32bx2i2c
void mac::drive_plm_in_pong_load_input_WEM1(){
  if ( gs_ctrl3.read() ) {
    if ( s_reg_12.read() ) {
      plm_in_pong_load_input_WEM1 = 4294967295ULL;
    } else {
      plm_in_pong_load_input_WEM1 = -1ULL;
    }
  } else {
    plm_in_pong_load_input_WEM1 = -1ULL;
  }
}
void mac::drive_plm_in_ping_load_input_A1(){
  plm_in_ping_load_input_A1 = (sc_uint<13> ) (s_reg_13.read());
}
void mac::drive_plm_in_ping_load_input_D1(){
  plm_in_ping_load_input_D1 = (sc_uint<32> ) (s_reg_15.read());
}
// resource: mux_1bx2i2c
void mac::drive_plm_in_ping_load_input_WE1(){
  if ( gs_ctrl4.read() ) {
    if ( s_reg_8.read() ) {
      plm_in_ping_load_input_WE1 = 1ULL;
    } else {
      plm_in_ping_load_input_WE1 = 0ULL;
    }
  } else {
    plm_in_ping_load_input_WE1 = 0ULL;
  }
}
// resource: mux_1bx2i1c
void mac::drive_plm_in_ping_load_input_CE1(){
  if ( gs_ctrl5.read() ) {
    if ( s_reg_8.read() ) {
      plm_in_ping_load_input_CE1 = (sc_uint<1> ) (s_reg_8.read());
    } else {
      plm_in_ping_load_input_CE1 = 0ULL;
    }
  } else {
    plm_in_ping_load_input_CE1 = 0ULL;
  }
}
// resource: mux_32bx2i2c
void mac::drive_plm_in_ping_load_input_WEM1(){
  if ( gs_ctrl6.read() ) {
    if ( s_reg_8.read() ) {
      plm_in_ping_load_input_WEM1 = 4294967295ULL;
    } else {
      plm_in_ping_load_input_WEM1 = -1ULL;
    }
  } else {
    plm_in_ping_load_input_WEM1 = -1ULL;
  }
}
void mac::drive_plm_in_pong_load_input_A0(){
  plm_in_pong_load_input_A0 = (sc_uint<13> ) (mac_Add_13Ux1U_13U_4_33_out1
                              .read());
}
void mac::drive_plm_in_pong_load_input_D0(){
  plm_in_pong_load_input_D0 = (sc_uint<32> ) (s_reg_15.read().range(63,32));
}
// resource: mux_1bx2i2c
void mac::drive_plm_in_pong_load_input_WE0(){
  if ( gs_ctrl7.read() ) {
    if ( (s_reg_12.read() && mac_Not_1U_1U_4_31_out1.read()) ) {
      plm_in_pong_load_input_WE0 = 1ULL;
    } else {
      plm_in_pong_load_input_WE0 = 0ULL;
    }
  } else {
    plm_in_pong_load_input_WE0 = 0ULL;
  }
}
// resource: mux_1bx2i2c
void mac::drive_plm_in_pong_load_input_CE0(){
  if ( gs_ctrl8.read() ) {
    if ( (s_reg_12.read() && mac_Not_1U_1U_4_31_out1.read()) ) {
      plm_in_pong_load_input_CE0 = 1ULL;
    } else {
      plm_in_pong_load_input_CE0 = 0ULL;
    }
  } else {
    plm_in_pong_load_input_CE0 = 0ULL;
  }
}
// resource: mux_32bx2i2c
void mac::drive_plm_in_pong_load_input_WEM0(){
  if ( gs_ctrl9.read() ) {
    if ( (s_reg_12.read() && mac_Not_1U_1U_4_31_out1.read()) ) {
      plm_in_pong_load_input_WEM0 = 4294967295ULL;
    } else {
      plm_in_pong_load_input_WEM0 = -1ULL;
    }
  } else {
    plm_in_pong_load_input_WEM0 = -1ULL;
  }
}
void mac::drive_plm_in_ping_load_input_A0(){
  plm_in_ping_load_input_A0 = (sc_uint<13> ) (mac_Add_13Ux1U_13U_4_34_out1
                              .read());
}
void mac::drive_plm_in_ping_load_input_D0(){
  plm_in_ping_load_input_D0 = (sc_uint<32> ) (s_reg_15.read().range(63,32));
}
// resource: mux_1bx2i2c
void mac::drive_plm_in_ping_load_input_WE0(){
  if ( gs_ctrl10.read() ) {
    if ( s_reg_8.read() ) {
      plm_in_ping_load_input_WE0 = 1ULL;
    } else {
      plm_in_ping_load_input_WE0 = 0ULL;
    }
  } else {
    plm_in_ping_load_input_WE0 = 0ULL;
  }
}
// resource: mux_1bx2i2c
void mac::drive_plm_in_ping_load_input_CE0(){
  if ( gs_ctrl11.read() ) {
    if ( s_reg_8.read() ) {
      plm_in_ping_load_input_CE0 = 1ULL;
    } else {
      plm_in_ping_load_input_CE0 = 0ULL;
    }
  } else {
    plm_in_ping_load_input_CE0 = 0ULL;
  }
}
// resource: mux_32bx2i2c
void mac::drive_plm_in_ping_load_input_WEM0(){
  if ( gs_ctrl12.read() ) {
    if ( s_reg_8.read() ) {
      plm_in_ping_load_input_WEM0 = 4294967295ULL;
    } else {
      plm_in_ping_load_input_WEM0 = -1ULL;
    }
  } else {
    plm_in_ping_load_input_WEM0 = -1ULL;
  }
}
// resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_35
void mac::mac_GreaterThan_32Sx2S_1U_4_35(){
  mac_GreaterThan_32Sx2S_1U_4_35_out1 = (/*imp*/sc_uint<1>)((sc_int<32> )s_reg_6
                                        .read() > (sc_int<2> )0LL);
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_36
void mac::mac_Not_1U_1U_4_36(){
  mac_Not_1U_1U_4_36_out1 = (sc_uint<1> ) (!s_reg_8.read());
}
// resource: mac_LessThan_17Sx32S_1U_4  instance: mac_LessThan_17Sx32S_1U_4_37
void mac::mac_LessThan_17Sx32S_1U_4_37(){
  mac_LessThan_17Sx32S_1U_4_37_out1 = (/*imp*/sc_uint<1>)((sc_int<17> )s_reg_2
                                      .read() < (sc_int<32> )s_reg_4.read());
}
// resource: regr_ac_4
void mac::drive_global_state(){
  if ( (rst.read() == 0ULL) ) {
    global_state = 0ULL;
  } else {
    global_state = global_state_next.read();
  }
}
// resource: mux_4bx10i9c
void mac::drive_global_state_next(){
  switch( (sc_uint<4>)(global_state.read()) ) {
  default:
    global_state_next = (global_state.read() + 1ULL);
    break;
  case 0ULL: case 1ULL: 
    if ( cfg_done.read() ) {
      global_state_next = 2ULL;
    } else {
      global_state_next = 1ULL;
    }
    break;
  case 2ULL: 
    if ( mac_LessThan_2Sx32S_1U_4_18_out1.read() ) {
      global_state_next = (global_state.read() + 1ULL);
    } else {
      global_state_next = 9ULL;
    }
    break;
  case 3ULL: 
    if ( mac_GreaterThan_32Sx2S_1U_4_22_out1.read() ) {
      global_state_next = (global_state.read() + 1ULL);
    } else {
      if ( mac_LessThan_17Sx32S_1U_4_37_out1.read() ) {
        global_state_next = 3ULL;
      } else {
        global_state_next = 9ULL;
      }
    }
    break;
  case 5ULL: 
    if ( dma_read_ctrl_ready.read() ) {
      switch( (sc_uint<32>)(s_reg_10.read()) ) {
      default:
        if ( mac_Or_1Ux1U_1U_4_15_out1.read() ) {
          global_state_next = 7ULL;
        } else {
          global_state_next = (global_state.read() + 1ULL);
        }
        break;
      case 0ULL: 
        global_state_next = 8ULL;
        break;
      }
    } else {
      global_state_next = 5ULL;
    }
    break;
  case 6ULL: 
    if ( mac_Or_1Ux1U_1U_4_15_out1.read() ) {
      global_state_next = (global_state.read() + 1ULL);
    } else {
      global_state_next = 6ULL;
    }
    break;
  case 7ULL: 
    if ( mac_LessThan_16Ux32U_1U_4_32_out1.read() ) {
      if ( mac_Or_1Ux1U_1U_4_15_out1.read() ) {
        global_state_next = 7ULL;
      } else {
        global_state_next = 6ULL;
      }
    } else {
      global_state_next = (global_state.read() + 1ULL);
    }
    break;
  case 8ULL: 
    if ( input_ready_channel_valid.read() ) {
      if ( mac_GreaterThan_32Sx2S_1U_4_35_out1.read() ) {
        global_state_next = 4ULL;
      } else {
        if ( mac_LessThan_17Sx32S_1U_4_37_out1.read() ) {
          global_state_next = 3ULL;
        } else {
          global_state_next = (global_state.read() + 1ULL);
        }
      }
    } else {
      global_state_next = 8ULL;
    }
    break;
  case 9ULL: 
    global_state_next = 9ULL;
    break;
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl0(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl0 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl0 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl0 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl1(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl1 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl1 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl1 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl2(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl2 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl2 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl2 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl3(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl3 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl3 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl3 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl4(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl4 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl4 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl4 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl5(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl5 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl5 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl5 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl6(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl6 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl6 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl6 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl7(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl7 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl7 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl7 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl8(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl8 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl8 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl8 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl9(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl9 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl9 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl9 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl10(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl10 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl10 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl10 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl11(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl11 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl11 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl11 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl12(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl12 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state_next.read()) ) {
    default:
      gs_ctrl12 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl12 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_ac_1
void mac::drive_input_ready_channel_valid(){
  if ( (rst.read() == 0ULL) ) {
    input_ready_channel_valid = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: 
      if ( (cfg_done.read() && (mac_LessThan_2Sx32S_1U_4_72_out1.read() && 
           mac_GreaterThan_32Sx2S_1U_4_74_out1.read())) ) {
        input_ready_channel_valid = 1ULL;
      } 
      break;
    case 2ULL: 
      if ( input_ready_channel_ready.read() ) {
        if ( ((0ULL == s_reg_47.read()) && mac_GreaterThan_32Sx2S_1U_4_97_out1
             .read()) ) {
          input_ready_channel_valid = 1ULL;
        } else {
          input_ready_channel_valid = 0ULL;
        }
      } 
      break;
    case 6ULL: 
      if ( (!mac_LessThan_32Ux32U_1U_4_93_out1.read() && 
           mac_GreaterThan_32Sx2S_1U_4_97_out1.read()) ) {
        input_ready_channel_valid = 1ULL;
      } 
      break;
    case 7ULL: 
      if ( (output_ready_channel_valid.read() && (
           mac_LessThan_17Sx32S_1U_4_99_out1.read() && 
           mac_GreaterThan_32Sx2S_1U_4_74_out1.read())) ) {
        input_ready_channel_valid = 1ULL;
      } 
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_ac_1
void mac::drive_output_ready_channel_ready(){
  if ( (rst.read() == 0ULL) ) {
    output_ready_channel_ready = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: 
      if ( (cfg_done.read() && (mac_LessThan_2Sx32S_1U_4_72_out1.read() && !
           mac_GreaterThan_32Sx2S_1U_4_74_out1.read())) ) {
        output_ready_channel_ready = 1ULL;
      } 
      break;
    case 2ULL: 
      if ( (input_ready_channel_ready.read() && ((0ULL == s_reg_47.read()) && !
           mac_GreaterThan_32Sx2S_1U_4_97_out1.read())) ) {
        output_ready_channel_ready = 1ULL;
      } 
      break;
    case 6ULL: 
      if ( (!mac_LessThan_32Ux32U_1U_4_93_out1.read() && !
           mac_GreaterThan_32Sx2S_1U_4_97_out1.read()) ) {
        output_ready_channel_ready = 1ULL;
      } 
      break;
    case 7ULL: 
      if ( output_ready_channel_valid.read() ) {
        if ( (mac_LessThan_17Sx32S_1U_4_99_out1.read() && !
             mac_GreaterThan_32Sx2S_1U_4_74_out1.read()) ) {
          output_ready_channel_ready = 1ULL;
        } else {
          output_ready_channel_ready = 0ULL;
        }
      } 
      break;
    }
  }
}
// resource: regr_en_as_1
void mac::drive_s_reg_36(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_36 = 1ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 2ULL: case 6ULL: 
      s_reg_36 = s_reg_43.read();
      break;
    }
  }
}
// resource: regr_en_ac_16
void mac::drive_s_reg_37(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_37 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: 
      if ( cfg_done.read() ) {
        s_reg_37 = (sc_uint<16> ) (mac_Add_16Ux1U_16U_4_75_out1.read());
      } 
      break;
    case 7ULL: 
      if ( output_ready_channel_valid.read() ) {
        s_reg_37 = (sc_uint<16> ) (mac_Add_16Ux1U_16U_4_75_out1.read());
      } 
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_38(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_38 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: 
      s_reg_38 = (sc_uint<32> ) (conf_info_mac_len.read());
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_39(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_39 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: 
      s_reg_39 = (sc_uint<32> ) (conf_info_mac_vec.read());
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_40(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_40 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: 
      s_reg_40 = (sc_uint<32> ) (conf_info_mac_n.read());
      break;
    }
  }
}
// resource: mux_1bx2i1c
// resource: regr_en_ac_1
void mac::drive_s_reg_41(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_41 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: 
      s_reg_41 = 1ULL;
      break;
    case 7ULL: 
      if ( output_ready_channel_valid.read() ) {
        s_reg_41 = mac_Not_1U_1U_4_98_out1.read();
      } 
      break;
    }
  }
}
// resource: mux_1bx2i0c
// resource: regr_en_ac_1
void mac::drive_s_reg_43(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_43 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: case 7ULL: 
      s_reg_43 = s_reg_36.read();
      break;
    case 4ULL: 
      s_reg_43 = mac_Not_1U_1U_4_87_out1.read();
      break;
    }
  }
}
// resource: mux_32bx2i1c
// resource: regr_en_ac_32
void mac::drive_s_reg_44(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_44 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: case 7ULL: 
      s_reg_44 = 0ULL;
      break;
    case 6ULL: 
      s_reg_44 = (sc_uint<32> ) (mac_N_Mux_32_2_3_4_94_out1.read());
      break;
    }
  }
}
// resource: mux_7bx2i1c
// resource: regr_en_ac_7
void mac::drive_s_reg_45(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_45 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: case 7ULL: 
      s_reg_45 = 0ULL;
      break;
    case 6ULL: 
      s_reg_45 = (sc_uint<7> ) (mac_Add_13Ux1U_13U_4_95_out1.read());
      break;
    }
  }
}
// resource: mux_32bx2i1c
// resource: regr_en_ac_32
void mac::drive_s_reg_46(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_46 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: case 7ULL: 
      s_reg_46 = 0ULL;
      break;
    case 6ULL: 
      s_reg_46 = (sc_uint<32> ) (mac_N_Mux_32_2_3_4_96_out1.read());
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_47(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_47 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: case 7ULL: 
      s_reg_47 = mac_N_Mux_32_2_2_4_77_out1.read();
      break;
    case 2ULL: 
      if ( input_ready_channel_ready.read() ) {
        if ( (0ULL == s_reg_47.read()) ) {
          s_reg_47 = mac_N_Mux_32_2_2_4_77_out1.read();
        } 
      } 
      break;
    case 6ULL: 
      if ( mac_LessThan_32Ux32U_1U_4_93_out1.read() );
      else {
        s_reg_47 = mac_N_Mux_32_2_2_4_77_out1.read();
      }
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_48(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_48 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 0ULL: case 1ULL: case 7ULL: 
      s_reg_48 = (sc_uint<32> ) (mac_Sub_32Sx13U_32S_4_78_out1.read());
      break;
    case 2ULL: 
      if ( input_ready_channel_ready.read() ) {
        if ( (0ULL == s_reg_47.read()) ) {
          s_reg_48 = (sc_uint<32> ) (mac_Sub_32Sx13U_32S_4_78_out1.read());
        } 
      } 
      break;
    case 6ULL: 
      if ( mac_LessThan_32Ux32U_1U_4_93_out1.read() );
      else {
        s_reg_48 = (sc_uint<32> ) (mac_Sub_32Sx13U_32S_4_78_out1.read());
      }
      break;
    }
  }
}
// resource: regr_en_ac_1
void mac::drive_s_reg_49(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_49 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 2ULL: 
      if ( (0ULL != s_reg_47.read()) ) {
        s_reg_49 = s_reg_43.read();
      } 
      break;
    case 6ULL: 
      s_reg_49 = s_reg_43.read();
      break;
    }
  }
}
// resource: mux_32bx2i1c
// resource: regr_en_ac_32
void mac::drive_s_reg_50(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_50 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 2ULL: 
      if ( (0ULL != s_reg_47.read()) ) {
        s_reg_50 = 0ULL;
      } 
      break;
    case 6ULL: 
      s_reg_50 = s_reg_60.read();
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_51(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_51 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 2ULL: 
      if ( (0ULL != s_reg_47.read()) ) {
        s_reg_51 = (sc_uint<32> ) (mac_Add_32Ux2U_32U_4_79_out1.read());
      } 
      break;
    case 6ULL: 
      s_reg_51 = (sc_uint<32> ) (mac_Add_32Ux2U_32U_4_79_out1.read());
      break;
    }
  }
}
// resource: regr_en_ac_1
void mac::drive_s_reg_52(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_52 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 2ULL: 
      if ( (0ULL != s_reg_47.read()) ) {
        s_reg_52 = mac_Not_1U_1U_4_80_out1.read();
      } 
      break;
    case 6ULL: 
      s_reg_52 = mac_Not_1U_1U_4_80_out1.read();
      break;
    }
  }
}
// resource: regr_ac_1
void mac::drive_s_reg_55(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_55 = 0ULL;
  } else {
    s_reg_55 = mac_Not_1U_1U_4_83_out1.read();
  }
}
// resource: regr_en_ac_1
void mac::drive_s_reg_56(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_56 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 3ULL: 
      s_reg_56 = mac_Equal_32Ux32U_1U_4_84_out1.read();
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_57(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_57 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1.read()) ) {
    case 3ULL: 
      s_reg_57 = mac_N_Mux_32_2_2_4_85_out1.read();
      break;
    }
  }
}
// resource: regr_ac_1
void mac::drive_s_reg_58(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_58 = 0ULL;
  } else {
    s_reg_58 = mac_And_1Ux1U_1U_4_86_out1.read();
  }
}
// resource: regr_ac_32
void mac::drive_s_reg_60(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_60 = 0ULL;
  } else {
    s_reg_60 = (sc_uint<32> ) (mac_Add_32Sx2U_32S_4_89_out1.read());
  }
}
// resource: regr_ac_32
void mac::drive_s_reg_61(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_61 = 0ULL;
  } else {
    s_reg_61 = (sc_uint<32> ) (mac_Add_32Ux32U_32U_4_92_out1.read());
  }
}
// resource: mac_LessThan_2Sx32S_1U_4  instance: mac_LessThan_2Sx32S_1U_4_72
void mac::mac_LessThan_2Sx32S_1U_4_72(){
  mac_LessThan_2Sx32S_1U_4_72_out1 = (/*imp*/sc_uint<1>)((sc_int<2> )0LL < 
                                     conf_info_mac_n.read());
}
// resource: mux_32bx2i0c
void mac::drive_mac_Mul_32Ux32U_32U_4_73_in2(){
  if ( gs_ctrl13.read() ) {
    /* state16 */
    mac_Mul_32Ux32U_32U_4_73_in2 = (sc_uint<32> ) (s_reg_38.read());
  } else {
    /* state14 */
    mac_Mul_32Ux32U_32U_4_73_in2 = (sc_uint<32> ) (conf_info_mac_len.read());
  }
}
// resource: mux_32bx2i0c
void mac::drive_mac_Mul_32Ux32U_32U_4_73_in1(){
  if ( gs_ctrl14.read() ) {
    mac_Mul_32Ux32U_32U_4_73_in1 = (sc_uint<32> ) (s_reg_39.read());
  } else {
    mac_Mul_32Ux32U_32U_4_73_in1 = (sc_uint<32> ) (conf_info_mac_vec.read());
  }
}
// resource: mac_Mul_32Ux32U_32U_4  instance: mac_Mul_32Ux32U_32U_4_73
void mac::mac_Mul_32Ux32U_32U_4_73(){
  mac_Mul_32Ux32U_32U_4_73_out1 = (/*cliff*/sc_uint<32>)
                                  mac_Mul_32Ux32U_32U_4_73_in2.read() * 
                                  mac_Mul_32Ux32U_32U_4_73_in1.read();
}
// resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_74
void mac::mac_GreaterThan_32Sx2S_1U_4_74(){
  mac_GreaterThan_32Sx2S_1U_4_74_out1 = (/*imp*/sc_uint<1>)((sc_int<32> )
                                        mac_Mul_32Ux32U_32U_4_73_out1.read() > (
                                        sc_int<2> )0LL);
}
// resource: mac_Add_16Ux1U_16U_4  instance: mac_Add_16Ux1U_16U_4_75
void mac::mac_Add_16Ux1U_16U_4_75(){
  mac_Add_16Ux1U_16U_4_75_out1 = (/*cliff*/sc_uint<32>)((sc_uint<16> )s_reg_37
                                 .read() + 1ULL);
}
// resource: mux_32bx2i0c
void mac::drive_mac_GreaterThan_32Sx14S_1U_4_76_in2(){
  if ( gs_ctrl15.read() ) {
    /* state25 */
    mac_GreaterThan_32Sx14S_1U_4_76_in2 = (sc_int<32> ) (s_reg_48.read());
  } else {
    /* state27 */
    mac_GreaterThan_32Sx14S_1U_4_76_in2 = (sc_int<32> ) (
                                          mac_Mul_32Ux32U_32U_4_73_out1.read());
  }
}
// resource: mac_GreaterThan_32Sx14S_1U_4  instance: mac_GreaterThan_32Sx14S_1U_4_76
void mac::mac_GreaterThan_32Sx14S_1U_4_76(){
  mac_GreaterThan_32Sx14S_1U_4_76_out1 = (/*imp*/sc_uint<1>)(
                                         mac_GreaterThan_32Sx14S_1U_4_76_in2
                                         .read() > (sc_int<14> )6400LL);
}
// resource: mux_32bx2i0c
void mac::drive_mac_N_Mux_32_2_2_4_77_in3(){
  if ( gs_ctrl16.read() ) {
    mac_N_Mux_32_2_2_4_77_in3 = (sc_int<32> ) (s_reg_48.read());
  } else {
    mac_N_Mux_32_2_2_4_77_in3 = (sc_int<32> ) (mac_Mul_32Ux32U_32U_4_73_out1
                                .read());
  }
}
// resource: mac_N_Mux_32_2_2_4
void mac::mac_N_Mux_32_2_2_4_77(){
  if ( mac_GreaterThan_32Sx14S_1U_4_76_out1.read() ) {
    mac_N_Mux_32_2_2_4_77_out1 = (sc_uint<32> ) (6400LL);
  } else {
    mac_N_Mux_32_2_2_4_77_out1 = (sc_uint<32> ) (mac_N_Mux_32_2_2_4_77_in3
                                 .read());
  }
}
// resource: mux_32bx2i0c
void mac::drive_mac_Sub_32Sx13U_32S_4_78_in2(){
  if ( gs_ctrl17.read() ) {
    mac_Sub_32Sx13U_32S_4_78_in2 = (sc_int<32> ) (s_reg_48.read());
  } else {
    mac_Sub_32Sx13U_32S_4_78_in2 = (sc_int<32> ) (mac_Mul_32Ux32U_32U_4_73_out1
                                   .read());
  }
}
// resource: mac_Sub_32Sx13U_32S_4  instance: mac_Sub_32Sx13U_32S_4_78
void mac::mac_Sub_32Sx13U_32S_4_78(){
  mac_Sub_32Sx13U_32S_4_78_out1 = (/*cliff*/sc_int<32>)
                                  mac_Sub_32Sx13U_32S_4_78_in2.read() - 6400ULL;
}
// resource: mux_32bx2i0c
void mac::drive_mac_Add_32Ux2U_32U_4_79_in2(){
  if ( gs_ctrl18.read() ) {
    /* state45 */
    mac_Add_32Ux2U_32U_4_79_in2 = mac_N_Mux_32_2_3_4_94_out1.read();
  } else {
    /* state46 */
    mac_Add_32Ux2U_32U_4_79_in2 = (sc_uint<32> ) (s_reg_44.read());
  }
}
// resource: mac_Add_32Ux2U_32U_4  instance: mac_Add_32Ux2U_32U_4_79
void mac::mac_Add_32Ux2U_32U_4_79(){
  mac_Add_32Ux2U_32U_4_79_out1 = (/*cliff*/sc_uint<32>)(
                                 mac_Add_32Ux2U_32U_4_79_in2.read() + 2ULL);
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_80
void mac::mac_Not_1U_1U_4_80(){
  mac_Not_1U_1U_4_80_out1 = (sc_uint<1> ) (!s_reg_43.read());
}
// resource: mux_13bx2i1c
void mac::drive_mac_Add_13Sx1U_13S_4_81_in2(){
  if ( gs_ctrl19.read() ) {
    mac_Add_13Sx1U_13S_4_81_in2 = (sc_int<13> )s_reg_60.read();
  } else {
    mac_Add_13Sx1U_13S_4_81_in2 = 0LL;
  }
}
// resource: mac_Add_13Sx1U_13S_4  instance: mac_Add_13Sx1U_13S_4_81
void mac::mac_Add_13Sx1U_13S_4_81(){
  mac_Add_13Sx1U_13S_4_81_out1 = (/*cliff*/sc_int<32>)(
                                 mac_Add_13Sx1U_13S_4_81_in2.read() + 1ULL);
}
// resource: mux_13bx2i1c
void mac::drive_mac_Add_13Sx1U_13S_4_82_in2(){
  if ( gs_ctrl20.read() ) {
    mac_Add_13Sx1U_13S_4_82_in2 = (sc_int<13> )s_reg_60.read();
  } else {
    mac_Add_13Sx1U_13S_4_82_in2 = 0LL;
  }
}
// resource: mac_Add_13Sx1U_13S_4  instance: mac_Add_13Sx1U_13S_4_82
void mac::mac_Add_13Sx1U_13S_4_82(){
  mac_Add_13Sx1U_13S_4_82_out1 = (/*cliff*/sc_int<32>)(
                                 mac_Add_13Sx1U_13S_4_82_in2.read() + 1ULL);
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_83
void mac::mac_Not_1U_1U_4_83(){
  mac_Not_1U_1U_4_83_out1 = (sc_uint<1> ) (!s_reg_41.read());
}
// resource: mac_Equal_32Ux32U_1U_4  instance: mac_Equal_32Ux32U_1U_4_84
void mac::mac_Equal_32Ux32U_1U_4_84(){
  mac_Equal_32Ux32U_1U_4_84_out1 = ((sc_uint<32> )s_reg_51.read() == (
                                   sc_uint<32> )s_reg_38.read());
}
// resource: mux_13bx2i0c
void mac::drive_plm_in_ping_compute_kernel_A2(){
  if ( gs_ctrl21.read() ) {
    plm_in_ping_compute_kernel_A2 = (sc_uint<13> ) (s_reg_50.read());
  } else {
    plm_in_ping_compute_kernel_A2 = (sc_uint<13> ) (mac_Add_13Sx1U_13S_4_81_out1
                                    .read());
  }
}
// resource: mux_1bx3i1c
void mac::drive_plm_in_ping_compute_kernel_CE2(){
  switch( (sc_uint<2>)(gs_ctrl22.read()) ) {
  default:
    plm_in_ping_compute_kernel_CE2 = 0ULL;
    break;
  case 1ULL: 
    if ( (input_ready_channel_ready.read() && ((0ULL != s_reg_47.read()) && 
         s_reg_43.read())) ) {
      plm_in_ping_compute_kernel_CE2 = (sc_uint<1> ) (s_reg_43.read());
    } else {
      plm_in_ping_compute_kernel_CE2 = 0ULL;
    }
    break;
  case 2ULL: 
    if ( s_reg_49.read() ) {
      plm_in_ping_compute_kernel_CE2 = (sc_uint<1> ) (s_reg_49.read());
    } else {
      plm_in_ping_compute_kernel_CE2 = 0ULL;
    }
    break;
  case 3ULL: 
    if ( (mac_LessThan_32Ux32U_1U_4_93_out1.read() && s_reg_43.read()) ) {
      plm_in_ping_compute_kernel_CE2 = (sc_uint<1> ) (s_reg_43.read());
    } else {
      plm_in_ping_compute_kernel_CE2 = 0ULL;
    }
    break;
  }
}
// resource: mux_13bx2i0c
void mac::drive_plm_in_pong_compute_kernel_A2(){
  if ( gs_ctrl23.read() ) {
    plm_in_pong_compute_kernel_A2 = (sc_uint<13> ) (s_reg_50.read());
  } else {
    plm_in_pong_compute_kernel_A2 = (sc_uint<13> ) (mac_Add_13Sx1U_13S_4_82_out1
                                    .read());
  }
}
// resource: mux_1bx3i1c
void mac::drive_plm_in_pong_compute_kernel_CE2(){
  switch( (sc_uint<2>)(gs_ctrl24.read()) ) {
  default:
    plm_in_pong_compute_kernel_CE2 = 0ULL;
    break;
  case 1ULL: 
    if ( (input_ready_channel_ready.read() && ((0ULL != s_reg_47.read()) && 
         mac_Not_1U_1U_4_80_out1.read())) ) {
      plm_in_pong_compute_kernel_CE2 = (sc_uint<1> ) (mac_Not_1U_1U_4_80_out1
                                       .read());
    } else {
      plm_in_pong_compute_kernel_CE2 = 0ULL;
    }
    break;
  case 2ULL: 
    if ( s_reg_52.read() ) {
      plm_in_pong_compute_kernel_CE2 = (sc_uint<1> ) (s_reg_52.read());
    } else {
      plm_in_pong_compute_kernel_CE2 = 0ULL;
    }
    break;
  case 3ULL: 
    if ( (mac_LessThan_32Ux32U_1U_4_93_out1.read() && mac_Not_1U_1U_4_80_out1
         .read()) ) {
      plm_in_pong_compute_kernel_CE2 = (sc_uint<1> ) (mac_Not_1U_1U_4_80_out1
                                       .read());
    } else {
      plm_in_pong_compute_kernel_CE2 = 0ULL;
    }
    break;
  }
}
// resource: mac_N_Mux_32_2_2_4
void mac::mac_N_Mux_32_2_2_4_85(){
  if ( s_reg_49.read() ) {
    mac_N_Mux_32_2_2_4_85_out1 = plm_in_ping_compute_kernel_Q2.read();
  } else {
    mac_N_Mux_32_2_2_4_85_out1 = plm_in_pong_compute_kernel_Q2.read();
  }
}
// resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_86
void mac::mac_And_1Ux1U_1U_4_86(){
  mac_And_1Ux1U_1U_4_86_out1 = s_reg_55.read() & s_reg_56.read();
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_87
void mac::mac_Not_1U_1U_4_87(){
  mac_Not_1U_1U_4_87_out1 = (sc_uint<1> ) (!s_reg_49.read());
}
// resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_88
void mac::mac_And_1Ux1U_1U_4_88(){
  mac_And_1Ux1U_1U_4_88_out1 = s_reg_56.read() & s_reg_41.read();
}
// resource: mac_Add_32Sx2U_32S_4  instance: mac_Add_32Sx2U_32S_4_89
void mac::mac_Add_32Sx2U_32S_4_89(){
  mac_Add_32Sx2U_32S_4_89_out1 = (/*cliff*/sc_int<32>)((sc_int<32> )s_reg_50
                                 .read() + 2ULL);
}
// resource: mac_N_Mux_32_2_2_4
void mac::mac_N_Mux_32_2_2_4_90(){
  if ( s_reg_49.read() ) {
    mac_N_Mux_32_2_2_4_90_out1 = plm_in_ping_compute_kernel_Q2.read();
  } else {
    mac_N_Mux_32_2_2_4_90_out1 = plm_in_pong_compute_kernel_Q2.read();
  }
}
// resource: mac_Mul_32Ux32U_32U_4  instance: mac_Mul_32Ux32U_32U_4_91
void mac::mac_Mul_32Ux32U_32U_4_91(){
  mac_Mul_32Ux32U_32U_4_91_out1 = (/*cliff*/sc_uint<32>)(sc_uint<32> )
                                  mac_N_Mux_32_2_2_4_90_out1.read() * (
                                  sc_uint<32> )s_reg_57.read();
}
// resource: mac_Add_32Ux32U_32U_4  instance: mac_Add_32Ux32U_32U_4_92
void mac::mac_Add_32Ux32U_32U_4_92(){
  mac_Add_32Ux32U_32U_4_92_out1 = (/*cliff*/sc_uint<32>)(
                                  mac_Mul_32Ux32U_32U_4_91_out1.read() + (
                                  sc_uint<32> )s_reg_46.read());
}
// resource: mac_LessThan_32Ux32U_1U_4  instance: mac_LessThan_32Ux32U_1U_4_93
void mac::mac_LessThan_32Ux32U_1U_4_93(){
  mac_LessThan_32Ux32U_1U_4_93_out1 = (/*imp*/sc_uint<1>)((sc_uint<32> )s_reg_60
                                      .read() < (sc_uint<32> )s_reg_47.read());
}
// resource: mac_N_Mux_32_2_3_4
void mac::mac_N_Mux_32_2_3_4_94(){
  if ( s_reg_56.read() ) {
    mac_N_Mux_32_2_3_4_94_out1 = (sc_uint<32> ) (0ULL);
  } else {
    mac_N_Mux_32_2_3_4_94_out1 = (sc_uint<32> ) (s_reg_51.read());
  }
}
// resource: mac_Add_13Ux1U_13U_4  instance: mac_Add_13Ux1U_13U_4_95
void mac::mac_Add_13Ux1U_13U_4_95(){
  mac_Add_13Ux1U_13U_4_95_out1 = (/*cliff*/sc_uint<32>)((sc_uint<13> )s_reg_45
                                 .read() + s_reg_56.read());
}
// resource: mac_N_Mux_32_2_3_4
void mac::mac_N_Mux_32_2_3_4_96(){
  if ( s_reg_56.read() ) {
    mac_N_Mux_32_2_3_4_96_out1 = (sc_uint<32> ) (0ULL);
  } else {
    mac_N_Mux_32_2_3_4_96_out1 = (sc_uint<32> ) (s_reg_61.read());
  }
}
void mac::drive_plm_out_pong_compute_kernel_A0(){
  plm_out_pong_compute_kernel_A0 = s_reg_45.read();
}
void mac::drive_plm_out_pong_compute_kernel_D0(){
  plm_out_pong_compute_kernel_D0 = (sc_uint<32> ) (mac_Add_32Ux32U_32U_4_92_out1
                                   .read());
}
// resource: mux_1bx2i2c
void mac::drive_plm_out_pong_compute_kernel_WE0(){
  if ( gs_ctrl25.read() ) {
    if ( s_reg_58.read() ) {
      plm_out_pong_compute_kernel_WE0 = 1ULL;
    } else {
      plm_out_pong_compute_kernel_WE0 = 0ULL;
    }
  } else {
    plm_out_pong_compute_kernel_WE0 = 0ULL;
  }
}
// resource: mux_1bx2i1c
void mac::drive_plm_out_pong_compute_kernel_CE0(){
  if ( gs_ctrl26.read() ) {
    if ( s_reg_58.read() ) {
      plm_out_pong_compute_kernel_CE0 = (sc_uint<1> ) (s_reg_58.read());
    } else {
      plm_out_pong_compute_kernel_CE0 = 0ULL;
    }
  } else {
    plm_out_pong_compute_kernel_CE0 = 0ULL;
  }
}
// resource: mux_32bx2i2c
void mac::drive_plm_out_pong_compute_kernel_WEM0(){
  if ( gs_ctrl27.read() ) {
    if ( s_reg_58.read() ) {
      plm_out_pong_compute_kernel_WEM0 = 4294967295ULL;
    } else {
      plm_out_pong_compute_kernel_WEM0 = -1ULL;
    }
  } else {
    plm_out_pong_compute_kernel_WEM0 = -1ULL;
  }
}
void mac::drive_plm_out_ping_compute_kernel_A0(){
  plm_out_ping_compute_kernel_A0 = s_reg_45.read();
}
void mac::drive_plm_out_ping_compute_kernel_D0(){
  plm_out_ping_compute_kernel_D0 = (sc_uint<32> ) (mac_Add_32Ux32U_32U_4_92_out1
                                   .read());
}
// resource: mux_1bx2i2c
void mac::drive_plm_out_ping_compute_kernel_WE0(){
  if ( gs_ctrl28.read() ) {
    if ( mac_And_1Ux1U_1U_4_88_out1.read() ) {
      plm_out_ping_compute_kernel_WE0 = 1ULL;
    } else {
      plm_out_ping_compute_kernel_WE0 = 0ULL;
    }
  } else {
    plm_out_ping_compute_kernel_WE0 = 0ULL;
  }
}
// resource: mux_1bx2i1c
void mac::drive_plm_out_ping_compute_kernel_CE0(){
  if ( gs_ctrl29.read() ) {
    if ( mac_And_1Ux1U_1U_4_88_out1.read() ) {
      plm_out_ping_compute_kernel_CE0 = (sc_uint<1> ) (
                                        mac_And_1Ux1U_1U_4_88_out1.read());
    } else {
      plm_out_ping_compute_kernel_CE0 = 0ULL;
    }
  } else {
    plm_out_ping_compute_kernel_CE0 = 0ULL;
  }
}
// resource: mux_32bx2i2c
void mac::drive_plm_out_ping_compute_kernel_WEM0(){
  if ( gs_ctrl30.read() ) {
    if ( mac_And_1Ux1U_1U_4_88_out1.read() ) {
      plm_out_ping_compute_kernel_WEM0 = 4294967295ULL;
    } else {
      plm_out_ping_compute_kernel_WEM0 = -1ULL;
    }
  } else {
    plm_out_ping_compute_kernel_WEM0 = -1ULL;
  }
}
// resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_97
void mac::mac_GreaterThan_32Sx2S_1U_4_97(){
  mac_GreaterThan_32Sx2S_1U_4_97_out1 = (/*imp*/sc_uint<1>)((sc_int<32> )
                                        s_reg_48.read() > (sc_int<2> )0LL);
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_98
void mac::mac_Not_1U_1U_4_98(){
  mac_Not_1U_1U_4_98_out1 = (sc_uint<1> ) (!s_reg_41.read());
}
// resource: mac_LessThan_17Sx32S_1U_4  instance: mac_LessThan_17Sx32S_1U_4_99
void mac::mac_LessThan_17Sx32S_1U_4_99(){
  mac_LessThan_17Sx32S_1U_4_99_out1 = (/*imp*/sc_uint<1>)((sc_int<17> )s_reg_37
                                      .read() < (sc_int<32> )s_reg_40.read());
}
// resource: regr_ac_4
void mac::drive_global_state1(){
  if ( (rst.read() == 0ULL) ) {
    global_state1 = 0ULL;
  } else {
    global_state1 = global_state1_next.read();
  }
}
// resource: mux_4bx6i5c
void mac::drive_global_state1_next(){
  switch( (sc_uint<4>)(global_state1.read()) ) {
  default:
    global_state1_next = (global_state1.read() + 1ULL);
    break;
  case 0ULL: case 1ULL: 
    if ( cfg_done.read() ) {
      if ( mac_LessThan_2Sx32S_1U_4_72_out1.read() ) {
        if ( mac_GreaterThan_32Sx2S_1U_4_74_out1.read() ) {
          global_state1_next = 2ULL;
        } else {
          global_state1_next = 7ULL;
        }
      } else {
        global_state1_next = 8ULL;
      }
    } else {
      global_state1_next = 1ULL;
    }
    break;
  case 2ULL: 
    if ( input_ready_channel_ready.read() ) {
      /* state42 */
      switch( (sc_uint<32>)(s_reg_47.read()) ) {
      default:
        global_state1_next = (global_state1.read() + 1ULL);
        break;
      case 0ULL: 
        if ( mac_GreaterThan_32Sx2S_1U_4_97_out1.read() ) {
          global_state1_next = 2ULL;
        } else {
          global_state1_next = 7ULL;
        }
        break;
      }
    } else {
      global_state1_next = 2ULL;
    }
    break;
  case 6ULL: 
    if ( mac_LessThan_32Ux32U_1U_4_93_out1.read() ) {
      global_state1_next = 3ULL;
    } else {
      if ( mac_GreaterThan_32Sx2S_1U_4_97_out1.read() ) {
        global_state1_next = 2ULL;
      } else {
        global_state1_next = (global_state1.read() + 1ULL);
      }
    }
    break;
  case 7ULL: 
    if ( output_ready_channel_valid.read() ) {
      if ( mac_LessThan_17Sx32S_1U_4_99_out1.read() ) {
        if ( mac_GreaterThan_32Sx2S_1U_4_74_out1.read() ) {
          global_state1_next = 2ULL;
        } else {
          global_state1_next = 7ULL;
        }
      } else {
        global_state1_next = (global_state1.read() + 1ULL);
      }
    } else {
      global_state1_next = 7ULL;
    }
    break;
  case 8ULL: 
    global_state1_next = 8ULL;
    break;
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl13(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl13 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl13 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl13 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl14(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl14 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl14 = 0ULL;
      break;
    case 7ULL: 
      gs_ctrl14 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl15(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl15 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl15 = 0ULL;
      break;
    case 2ULL: case 6ULL: 
      gs_ctrl15 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl16(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl16 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl16 = 0ULL;
      break;
    case 2ULL: case 6ULL: 
      gs_ctrl16 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl17(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl17 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl17 = 0ULL;
      break;
    case 2ULL: case 6ULL: 
      gs_ctrl17 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl18(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl18 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl18 = 0ULL;
      break;
    case 6ULL: 
      gs_ctrl18 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl19(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl19 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl19 = 0ULL;
      break;
    case 6ULL: 
      gs_ctrl19 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl20(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl20 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl20 = 0ULL;
      break;
    case 6ULL: 
      gs_ctrl20 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl21(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl21 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl21 = 0ULL;
      break;
    case 4ULL: 
      gs_ctrl21 = 1ULL;
      break;
    }
  }
}
// resource: mux_2bx4i4c
// resource: regr_ac_2
void mac::drive_gs_ctrl22(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl22 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl22 = 0ULL;
      break;
    case 2ULL: 
      gs_ctrl22 = 1ULL;
      break;
    case 4ULL: 
      gs_ctrl22 = 2ULL;
      break;
    case 6ULL: 
      gs_ctrl22 = 3ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl23(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl23 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl23 = 0ULL;
      break;
    case 4ULL: 
      gs_ctrl23 = 1ULL;
      break;
    }
  }
}
// resource: mux_2bx4i4c
// resource: regr_ac_2
void mac::drive_gs_ctrl24(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl24 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl24 = 0ULL;
      break;
    case 2ULL: 
      gs_ctrl24 = 1ULL;
      break;
    case 4ULL: 
      gs_ctrl24 = 2ULL;
      break;
    case 6ULL: 
      gs_ctrl24 = 3ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl25(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl25 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl25 = 0ULL;
      break;
    case 5ULL: 
      gs_ctrl25 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl26(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl26 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl26 = 0ULL;
      break;
    case 5ULL: 
      gs_ctrl26 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl27(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl27 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl27 = 0ULL;
      break;
    case 5ULL: 
      gs_ctrl27 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl28(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl28 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl28 = 0ULL;
      break;
    case 5ULL: 
      gs_ctrl28 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl29(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl29 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl29 = 0ULL;
      break;
    case 5ULL: 
      gs_ctrl29 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl30(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl30 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state1_next.read()) ) {
    default:
      gs_ctrl30 = 0ULL;
      break;
    case 5ULL: 
      gs_ctrl30 = 1ULL;
      break;
    }
  }
}
// resource: mux_64bx2i0c
// resource: regr_en_ac_64
void mac::drive_dma_write_chnl_data(){
  if ( (rst.read() == 0ULL) ) {
    dma_write_chnl_data = sc_biguint<64>(0ULL);
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 7ULL: 
      if ( mac_Or_1Ux1U_1U_4_46_out1.read() ) {
        dma_write_chnl_data = (sc_biguint<64> ) (mac_N_MuxB_64_2_1_4_67_out1
                              .read());
      } 
      break;
    case 8ULL: 
      if ( mac_Or_1Ux1U_1U_4_46_out1.read() ) {
        dma_write_chnl_data = (sc_biguint<64> ) (s_reg_34.read());
      } 
      break;
    }
  }
}
// resource: regr_en_ac_1
void mac::drive_dma_write_ctrl_data_size_slice(){
  if ( (rst.read() == 0ULL) ) {
    dma_write_ctrl_data_size_slice = sc_biguint<1>(0ULL);
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 5ULL: 
      if ( output_ready_channel_ready.read() ) {
        dma_write_ctrl_data_size_slice = sc_biguint<1>(1ULL);
      } 
      break;
    }
  }
}
// resource: regr_en_ac_31
void mac::drive_dma_write_ctrl_data_length_slice(){
  if ( (rst.read() == 0ULL) ) {
    dma_write_ctrl_data_length_slice = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 5ULL: 
      if ( output_ready_channel_ready.read() ) {
        dma_write_ctrl_data_length_slice = (sc_uint<31> ) (s_reg_27.read()
                                           .range(31,1));
      } 
      break;
    }
  }
}
// resource: regr_en_ac_31
void mac::drive_dma_write_ctrl_data_index_slice(){
  if ( (rst.read() == 0ULL) ) {
    dma_write_ctrl_data_index_slice = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 5ULL: 
      if ( output_ready_channel_ready.read() ) {
        dma_write_ctrl_data_index_slice = (sc_uint<31> ) (s_reg_28.read());
      } 
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_ac_1
void mac::drive_dma_write_ctrl_valid(){
  if ( (rst.read() == 0ULL) ) {
    dma_write_ctrl_valid = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 5ULL: 
      if ( output_ready_channel_ready.read() ) {
        dma_write_ctrl_valid = 1ULL;
      } 
      break;
    case 6ULL: 
      if ( dma_write_ctrl_ready.read() ) {
        dma_write_ctrl_valid = 0ULL;
      } 
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_ac_1
void mac::drive_acc_done(){
  if ( (rst.read() == 0ULL) ) {
    acc_done = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 3ULL: 
      if ( mac_LessThan_2Sx32S_1U_4_52_out1.read() );
      else {
        acc_done = 1ULL;
      }
      break;
    case 4ULL: 
      if ( (!mac_GreaterThan_32Sx2S_1U_4_57_out1.read() && !
           mac_LessThan_17Sx32S_1U_4_71_out1.read()) ) {
        acc_done = 1ULL;
      } 
      break;
    case 6ULL: 
      if ( (dma_write_ctrl_ready.read() && ((0ULL == s_reg_27.read()) && (!
           mac_GreaterThan_32Sx2S_1U_4_70_out1.read() && !
           mac_LessThan_17Sx32S_1U_4_71_out1.read()))) ) {
        acc_done = 1ULL;
      } 
      break;
    case 7ULL: case 8ULL: 
      if ( (mac_Or_1Ux1U_1U_4_46_out1.read() && (!
           mac_LessThan_16Ux32U_1U_4_68_out1.read() && (!
           mac_GreaterThan_32Sx2S_1U_4_70_out1.read() && !
           mac_LessThan_17Sx32S_1U_4_71_out1.read()))) ) {
        acc_done = 1ULL;
      } 
      break;
    case 9ULL: 
      acc_done = 0ULL;
      break;
    }
  }
}
// resource: regr_en_ac_1
void mac::drive_dma_write_chnl_set_valid_curr(){
  if ( (rst.read() == 0ULL) ) {
    dma_write_chnl_set_valid_curr = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 7ULL: case 8ULL: 
      if ( mac_Or_1Ux1U_1U_4_46_out1.read() ) {
        dma_write_chnl_set_valid_curr = (sc_uint<1> ) (mac_Not_1U_1U_4_69_out1
                                        .read());
      } 
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_en_ac_1
void mac::drive_output_ready_channel_valid(){
  if ( (rst.read() == 0ULL) ) {
    output_ready_channel_valid = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 4ULL: 
      if ( mac_GreaterThan_32Sx2S_1U_4_57_out1.read() ) {
        output_ready_channel_valid = 1ULL;
      } 
      break;
    case 5ULL: 
      if ( output_ready_channel_ready.read() ) {
        output_ready_channel_valid = 0ULL;
      } 
      break;
    case 6ULL: 
      if ( (dma_write_ctrl_ready.read() && ((0ULL == s_reg_27.read()) && 
           mac_GreaterThan_32Sx2S_1U_4_70_out1.read())) ) {
        output_ready_channel_valid = 1ULL;
      } 
      break;
    case 7ULL: case 8ULL: 
      if ( (mac_Or_1Ux1U_1U_4_46_out1.read() && (!
           mac_LessThan_16Ux32U_1U_4_68_out1.read() && 
           mac_GreaterThan_32Sx2S_1U_4_70_out1.read())) ) {
        output_ready_channel_valid = 1ULL;
      } 
      break;
    }
  }
}
// resource: regr_en_ac_16
void mac::drive_s_reg_16(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_16 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 3ULL: 
      s_reg_16 = (sc_uint<16> ) (mac_Add_16Ux1U_16U_4_56_out1.read());
      break;
    case 4ULL: 
      if ( mac_GreaterThan_32Sx2S_1U_4_57_out1.read() );
      else {
        s_reg_16 = (sc_uint<16> ) (mac_Add_16Ux1U_16U_4_56_out1.read());
      }
      break;
    case 6ULL: 
      if ( (dma_write_ctrl_ready.read() && ((0ULL == s_reg_27.read()) && !
           mac_GreaterThan_32Sx2S_1U_4_70_out1.read())) ) {
        s_reg_16 = (sc_uint<16> ) (mac_Add_16Ux1U_16U_4_56_out1.read());
      } 
      break;
    case 7ULL: case 8ULL: 
      if ( (mac_Or_1Ux1U_1U_4_46_out1.read() && (!
           mac_LessThan_16Ux32U_1U_4_68_out1.read() && !
           mac_GreaterThan_32Sx2S_1U_4_70_out1.read())) ) {
        s_reg_16 = (sc_uint<16> ) (mac_Add_16Ux1U_16U_4_56_out1.read());
      } 
      break;
    }
  }
}
// resource: regr_en_as_1
void mac::drive_s_reg_17(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_17 = 1ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 5ULL: 
      s_reg_17 = mac_Not_1U_1U_4_61_out1.read();
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_18(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_18 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 0ULL: case 1ULL: 
      s_reg_18 = (sc_uint<32> ) (conf_info_mac_n.read());
      break;
    }
  }
}
// resource: regr_ac_32
void mac::drive_s_reg_19(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_19 = 0ULL;
  } else {
    s_reg_19 = (sc_uint<32> ) (conf_info_mac_vec.read());
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_20(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_20 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 0ULL: case 1ULL: 
      s_reg_20 = (sc_uint<32> ) (mac_Add_32Sx1U_32S_4_50_out1.read());
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_21(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_21 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 2ULL: 
      s_reg_21 = (sc_uint<32> ) (mac_Sub_32Sx1U_32S_4_51_out1.read());
      break;
    }
  }
}
// resource: mux_32bx2i0c
// resource: regr_en_ac_32
void mac::drive_s_reg_22(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_22 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 3ULL: 
      s_reg_22 = (sc_uint<32> ) (mac_Mul_32Ux32U_32U_4_53_out1.read());
      break;
    case 5ULL: 
      s_reg_22 = (sc_uint<32> ) (mac_Add_32Ux32U_32U_4_62_out1.read());
      break;
    }
  }
}
// resource: mux_32bx2i0c
// resource: regr_en_ac_32
void mac::drive_s_reg_23(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_23 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 3ULL: 
      s_reg_23 = (sc_uint<32> ) (mac_Add_32Sx1U_32S_4_55_out1.read());
      break;
    case 4ULL: 
      if ( mac_GreaterThan_32Sx2S_1U_4_57_out1.read() ) {
        s_reg_23 = (sc_uint<32> ) (mac_Sub_32Sx7U_32S_4_60_out1.read());
      } else {
        s_reg_23 = (sc_uint<32> ) (mac_Add_32Sx1U_32S_4_55_out1.read());
      }
      break;
    case 6ULL: 
      if ( (dma_write_ctrl_ready.read() && (0ULL == s_reg_27.read())) ) {
        if ( mac_GreaterThan_32Sx2S_1U_4_70_out1.read() ) {
          s_reg_23 = (sc_uint<32> ) (mac_Sub_32Sx7U_32S_4_60_out1.read());
        } else {
          s_reg_23 = (sc_uint<32> ) (mac_Add_32Sx1U_32S_4_55_out1.read());
        }
      } 
      break;
    case 7ULL: case 8ULL: 
      if ( (mac_Or_1Ux1U_1U_4_46_out1.read() && !
           mac_LessThan_16Ux32U_1U_4_68_out1.read()) ) {
        if ( mac_GreaterThan_32Sx2S_1U_4_70_out1.read() ) {
          s_reg_23 = (sc_uint<32> ) (mac_Sub_32Sx7U_32S_4_60_out1.read());
        } else {
          s_reg_23 = (sc_uint<32> ) (mac_Add_32Sx1U_32S_4_55_out1.read());
        }
      } 
      break;
    }
  }
}
// resource: regr_en_ac_1
void mac::drive_s_reg_25(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_25 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 4ULL: 
      s_reg_25 = s_reg_17.read();
      break;
    case 6ULL: 
      if ( (dma_write_ctrl_ready.read() && (0ULL == s_reg_27.read())) ) {
        s_reg_25 = s_reg_17.read();
      } 
      break;
    case 7ULL: case 8ULL: 
      if ( (mac_Or_1Ux1U_1U_4_46_out1.read() && !
           mac_LessThan_16Ux32U_1U_4_68_out1.read()) ) {
        s_reg_25 = s_reg_17.read();
      } 
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_26(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_26 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 4ULL: case 6ULL: case 7ULL: case 8ULL: 
      s_reg_26 = s_reg_22.read();
      break;
    }
  }
}
// resource: regr_en_ac_32
void mac::drive_s_reg_27(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_27 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 4ULL: 
      s_reg_27 = (sc_uint<32> ) (mac_N_Mux_32_2_4_4_59_out1.read());
      break;
    case 6ULL: 
      if ( (dma_write_ctrl_ready.read() && (0ULL == s_reg_27.read())) ) {
        s_reg_27 = (sc_uint<32> ) (mac_N_Mux_32_2_4_4_59_out1.read());
      } 
      break;
    case 7ULL: case 8ULL: 
      if ( (mac_Or_1Ux1U_1U_4_46_out1.read() && !
           mac_LessThan_16Ux32U_1U_4_68_out1.read()) ) {
        s_reg_27 = (sc_uint<32> ) (mac_N_Mux_32_2_4_4_59_out1.read());
      } 
      break;
    }
  }
}
// resource: regr_en_ac_31
void mac::drive_s_reg_28(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_28 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 4ULL: case 6ULL: case 7ULL: case 8ULL: 
      s_reg_28 = (sc_uint<31> ) (s_reg_22.read().range(31,1));
      break;
    }
  }
}
// resource: regr_en_ac_16
void mac::drive_s_reg_31(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_31 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 6ULL: 
      if ( (0ULL != s_reg_27.read()) ) {
        s_reg_31 = (sc_uint<16> ) (mac_Add_16Ux2U_16U_4_64_out1.read());
      } 
      break;
    case 7ULL: case 8ULL: 
      if ( mac_Or_1Ux1U_1U_4_46_out1.read() ) {
        s_reg_31 = (sc_uint<16> ) (mac_Add_16Ux2U_16U_4_64_out1.read());
      } 
      break;
    }
  }
}
// resource: regr_en_ac_64
void mac::drive_s_reg_34(){
  if ( (rst.read() == 0ULL) ) {
    s_reg_34 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2.read()) ) {
    case 7ULL: 
      s_reg_34 = (sc_uint<64> ) (mac_N_MuxB_64_2_1_4_67_out1.read());
      break;
    }
  }
}
// resource: mac_Mul_32Ux32U_32U_4  instance: mac_Mul_32Ux32U_32U_4_47
void mac::mac_Mul_32Ux32U_32U_4_47(){
  mac_Mul_32Ux32U_32U_4_47_out1 = (/*cliff*/sc_uint<32>)(sc_uint<32> )
                                  conf_info_mac_len.read() * (sc_uint<32> )
                                  conf_info_mac_vec.read();
}
// resource: mac_Sub_32Sx1U_32S_4  instance: mac_Sub_32Sx1U_32S_4_48
void mac::mac_Sub_32Sx1U_32S_4_48(){
  mac_Sub_32Sx1U_32S_4_48_out1 = (/*cliff*/sc_int<32>)(sc_int<32> )
                                 mac_Mul_32Ux32U_32U_4_47_out1.read() - 1ULL;
}
// resource: mac_Or_32Sx1U_32S_4  instance: mac_Or_32Sx1U_32S_4_49
void mac::mac_Or_32Sx1U_32S_4_49(){
  mac_Or_32Sx1U_32S_4_49_out1 = mac_Sub_32Sx1U_32S_4_48_out1.read() | 1ULL;
}
// resource: mac_Add_32Sx1U_32S_4  instance: mac_Add_32Sx1U_32S_4_50
void mac::mac_Add_32Sx1U_32S_4_50(){
  mac_Add_32Sx1U_32S_4_50_out1 = (/*cliff*/sc_int<32>)(
                                 mac_Or_32Sx1U_32S_4_49_out1.read() + 1ULL);
}
// resource: mac_Sub_32Sx1U_32S_4  instance: mac_Sub_32Sx1U_32S_4_51
void mac::mac_Sub_32Sx1U_32S_4_51(){
  mac_Sub_32Sx1U_32S_4_51_out1 = (/*cliff*/sc_int<32>)(sc_int<32> )s_reg_19
                                 .read() - 1ULL;
}
// resource: mac_LessThan_2Sx32S_1U_4  instance: mac_LessThan_2Sx32S_1U_4_52
void mac::mac_LessThan_2Sx32S_1U_4_52(){
  mac_LessThan_2Sx32S_1U_4_52_out1 = (/*imp*/sc_uint<1>)((sc_int<2> )0LL < (
                                     sc_int<32> )s_reg_18.read());
}
// resource: mac_Mul_32Ux32U_32U_4  instance: mac_Mul_32Ux32U_32U_4_53
void mac::mac_Mul_32Ux32U_32U_4_53(){
  mac_Mul_32Ux32U_32U_4_53_out1 = (/*cliff*/sc_uint<32>)(sc_uint<32> )s_reg_20
                                  .read() * (sc_uint<32> )s_reg_18.read();
}
// resource: mac_Or_32Sx1U_32S_4  instance: mac_Or_32Sx1U_32S_4_54
void mac::mac_Or_32Sx1U_32S_4_54(){
  mac_Or_32Sx1U_32S_4_54_out1 = (sc_int<32> )s_reg_21.read() | 1ULL;
}
// resource: mac_Add_32Sx1U_32S_4  instance: mac_Add_32Sx1U_32S_4_55
void mac::mac_Add_32Sx1U_32S_4_55(){
  mac_Add_32Sx1U_32S_4_55_out1 = (/*cliff*/sc_int<32>)(
                                 mac_Or_32Sx1U_32S_4_54_out1.read() + 1ULL);
}
// resource: mac_Add_16Ux1U_16U_4  instance: mac_Add_16Ux1U_16U_4_56
void mac::mac_Add_16Ux1U_16U_4_56(){
  mac_Add_16Ux1U_16U_4_56_out1 = (/*cliff*/sc_uint<32>)((sc_uint<16> )s_reg_16
                                 .read() + 1ULL);
}
// resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_57
void mac::mac_GreaterThan_32Sx2S_1U_4_57(){
  mac_GreaterThan_32Sx2S_1U_4_57_out1 = (/*imp*/sc_uint<1>)((sc_int<32> )
                                        s_reg_23.read() > (sc_int<2> )0LL);
}
// resource: mac_GreaterThan_32Sx8S_1U_4  instance: mac_GreaterThan_32Sx8S_1U_4_58
void mac::mac_GreaterThan_32Sx8S_1U_4_58(){
  mac_GreaterThan_32Sx8S_1U_4_58_out1 = (/*imp*/sc_uint<1>)((sc_int<32> )
                                        s_reg_23.read() > (sc_int<8> )100LL);
}
// resource: mac_N_Mux_32_2_4_4
void mac::mac_N_Mux_32_2_4_4_59(){
  if ( mac_GreaterThan_32Sx8S_1U_4_58_out1.read() ) {
    mac_N_Mux_32_2_4_4_59_out1 = (sc_uint<32> ) (100ULL);
  } else {
    mac_N_Mux_32_2_4_4_59_out1 = (sc_uint<32> ) (s_reg_23.read());
  }
}
// resource: mac_Sub_32Sx7U_32S_4  instance: mac_Sub_32Sx7U_32S_4_60
void mac::mac_Sub_32Sx7U_32S_4_60(){
  mac_Sub_32Sx7U_32S_4_60_out1 = (/*cliff*/sc_int<32>)(sc_int<32> )s_reg_23
                                 .read() - 100ULL;
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_61
void mac::mac_Not_1U_1U_4_61(){
  mac_Not_1U_1U_4_61_out1 = (sc_uint<1> ) (!s_reg_25.read());
}
// resource: mac_Add_32Ux32U_32U_4  instance: mac_Add_32Ux32U_32U_4_62
void mac::mac_Add_32Ux32U_32U_4_62(){
  mac_Add_32Ux32U_32U_4_62_out1 = (/*cliff*/sc_uint<32>)((sc_uint<32> )s_reg_26
                                  .read() + (sc_uint<32> )s_reg_27.read());
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_63
void mac::mac_Not_1U_1U_4_63(){
  mac_Not_1U_1U_4_63_out1 = (sc_uint<1> ) (!s_reg_25.read());
}
// resource: mux_16bx2i1c
void mac::drive_mac_Add_16Ux2U_16U_4_64_in2(){
  if ( gs_ctrl31.read() ) {
    mac_Add_16Ux2U_16U_4_64_in2 = (sc_uint<16> ) (s_reg_31.read());
  } else {
    mac_Add_16Ux2U_16U_4_64_in2 = 0ULL;
  }
}
// resource: mac_Add_16Ux2U_16U_4  instance: mac_Add_16Ux2U_16U_4_64
void mac::mac_Add_16Ux2U_16U_4_64(){
  mac_Add_16Ux2U_16U_4_64_out1 = (/*cliff*/sc_uint<32>)(
                                 mac_Add_16Ux2U_16U_4_64_in2.read() + 2ULL);
}
// resource: mux_7bx2i1c
void mac::drive_mac_Add_13Ux1U_13U_4_65_in2_slice(){
  if ( gs_ctrl32.read() ) {
    mac_Add_13Ux1U_13U_4_65_in2_slice = (sc_uint<7> ) ((sc_uint<7> )s_reg_31
                                        .read());
  } else {
    mac_Add_13Ux1U_13U_4_65_in2_slice = 0ULL;
  }
}
// resource: mac_Add_13Ux1U_13U_4  instance: mac_Add_13Ux1U_13U_4_65
void mac::mac_Add_13Ux1U_13U_4_65(){
  mac_Add_13Ux1U_13U_4_65_out1 = (/*cliff*/sc_uint<32>)(( (sc_uint<13> )
                                 (sc_bv<13>)((sc_bv<6>)(0ULL), 
                                 (sc_bv<7>)((sc_uint<7> )
                                 mac_Add_13Ux1U_13U_4_65_in2_slice.read())) ) + 
                                 1ULL);
}
// resource: mux_7bx2i1c
void mac::drive_mac_Add_13Ux1U_13U_4_66_in2_slice(){
  if ( gs_ctrl33.read() ) {
    mac_Add_13Ux1U_13U_4_66_in2_slice = (sc_uint<7> ) ((sc_uint<7> )s_reg_31
                                        .read());
  } else {
    mac_Add_13Ux1U_13U_4_66_in2_slice = 0ULL;
  }
}
// resource: mac_Add_13Ux1U_13U_4  instance: mac_Add_13Ux1U_13U_4_66
void mac::mac_Add_13Ux1U_13U_4_66(){
  mac_Add_13Ux1U_13U_4_66_out1 = (/*cliff*/sc_uint<32>)(( (sc_uint<13> )
                                 (sc_bv<13>)((sc_bv<6>)(0ULL), 
                                 (sc_bv<7>)((sc_uint<7> )
                                 mac_Add_13Ux1U_13U_4_66_in2_slice.read())) ) + 
                                 1ULL);
}
// resource: mux_7bx2i1c
void mac::drive_plm_out_ping_store_output_A2(){
  if ( gs_ctrl34.read() ) {
    plm_out_ping_store_output_A2 = (sc_uint<7> ) (s_reg_31.read());
  } else {
    plm_out_ping_store_output_A2 = 0ULL;
  }
}
// resource: mux_1bx2i1c
void mac::drive_plm_out_ping_store_output_CE2(){
  switch( (sc_uint<2>)(gs_ctrl35.read()) ) {
  default:
    plm_out_ping_store_output_CE2 = 0ULL;
    break;
  case 1ULL: 
    if ( (dma_write_ctrl_ready.read() && ((0ULL != s_reg_27.read()) && s_reg_25
         .read())) ) {
      plm_out_ping_store_output_CE2 = (sc_uint<1> ) (s_reg_25.read());
    } else {
      plm_out_ping_store_output_CE2 = 0ULL;
    }
    break;
  case 2ULL: 
    if ( (mac_Or_1Ux1U_1U_4_46_out1.read() && (mac_LessThan_16Ux32U_1U_4_68_out1
         .read() && s_reg_25.read())) ) {
      plm_out_ping_store_output_CE2 = (sc_uint<1> ) (s_reg_25.read());
    } else {
      plm_out_ping_store_output_CE2 = 0ULL;
    }
    break;
  }
}
void mac::drive_plm_out_ping_store_output_A1(){
  plm_out_ping_store_output_A1 = (sc_uint<7> ) (mac_Add_13Ux1U_13U_4_65_out1
                                 .read());
}
// resource: mux_1bx2i1c
void mac::drive_plm_out_ping_store_output_CE1(){
  switch( (sc_uint<2>)(gs_ctrl36.read()) ) {
  default:
    plm_out_ping_store_output_CE1 = 0ULL;
    break;
  case 1ULL: 
    if ( (dma_write_ctrl_ready.read() && ((0ULL != s_reg_27.read()) && s_reg_25
         .read())) ) {
      plm_out_ping_store_output_CE1 = (sc_uint<1> ) (s_reg_25.read());
    } else {
      plm_out_ping_store_output_CE1 = 0ULL;
    }
    break;
  case 2ULL: 
    if ( (mac_Or_1Ux1U_1U_4_46_out1.read() && (mac_LessThan_16Ux32U_1U_4_68_out1
         .read() && s_reg_25.read())) ) {
      plm_out_ping_store_output_CE1 = (sc_uint<1> ) (s_reg_25.read());
    } else {
      plm_out_ping_store_output_CE1 = 0ULL;
    }
    break;
  }
}
// resource: mux_7bx2i1c
void mac::drive_plm_out_pong_store_output_A2(){
  if ( gs_ctrl37.read() ) {
    plm_out_pong_store_output_A2 = (sc_uint<7> ) (s_reg_31.read());
  } else {
    plm_out_pong_store_output_A2 = 0ULL;
  }
}
// resource: mux_1bx2i1c
void mac::drive_plm_out_pong_store_output_CE2(){
  switch( (sc_uint<2>)(gs_ctrl38.read()) ) {
  default:
    plm_out_pong_store_output_CE2 = 0ULL;
    break;
  case 1ULL: 
    if ( (dma_write_ctrl_ready.read() && ((0ULL != s_reg_27.read()) && 
         mac_Not_1U_1U_4_63_out1.read())) ) {
      plm_out_pong_store_output_CE2 = (sc_uint<1> ) (mac_Not_1U_1U_4_63_out1
                                      .read());
    } else {
      plm_out_pong_store_output_CE2 = 0ULL;
    }
    break;
  case 2ULL: 
    if ( (mac_Or_1Ux1U_1U_4_46_out1.read() && (mac_LessThan_16Ux32U_1U_4_68_out1
         .read() && mac_Not_1U_1U_4_63_out1.read())) ) {
      plm_out_pong_store_output_CE2 = (sc_uint<1> ) (mac_Not_1U_1U_4_63_out1
                                      .read());
    } else {
      plm_out_pong_store_output_CE2 = 0ULL;
    }
    break;
  }
}
void mac::drive_plm_out_pong_store_output_A1(){
  plm_out_pong_store_output_A1 = (sc_uint<7> ) (mac_Add_13Ux1U_13U_4_66_out1
                                 .read());
}
// resource: mux_1bx2i1c
void mac::drive_plm_out_pong_store_output_CE1(){
  switch( (sc_uint<2>)(gs_ctrl39.read()) ) {
  default:
    plm_out_pong_store_output_CE1 = 0ULL;
    break;
  case 1ULL: 
    if ( (dma_write_ctrl_ready.read() && ((0ULL != s_reg_27.read()) && 
         mac_Not_1U_1U_4_63_out1.read())) ) {
      plm_out_pong_store_output_CE1 = (sc_uint<1> ) (mac_Not_1U_1U_4_63_out1
                                      .read());
    } else {
      plm_out_pong_store_output_CE1 = 0ULL;
    }
    break;
  case 2ULL: 
    if ( (mac_Or_1Ux1U_1U_4_46_out1.read() && (mac_LessThan_16Ux32U_1U_4_68_out1
         .read() && mac_Not_1U_1U_4_63_out1.read())) ) {
      plm_out_pong_store_output_CE1 = (sc_uint<1> ) (mac_Not_1U_1U_4_63_out1
                                      .read());
    } else {
      plm_out_pong_store_output_CE1 = 0ULL;
    }
    break;
  }
}
void mac::drive_mac_N_MuxB_64_2_1_4_67_in3(){
  mac_N_MuxB_64_2_1_4_67_in3 = ( (sc_biguint<64> )(sc_bv<64>)((sc_bv<32>)((
                               sc_int<32> )plm_out_pong_shared_Q1_wire.read()), 
                               (sc_bv<32>)(plm_out_pong_shared_Q2_wire.read()))
                                );
}
void mac::drive_mac_N_MuxB_64_2_1_4_67_in2(){
  mac_N_MuxB_64_2_1_4_67_in2 = ( (sc_biguint<64> )(sc_bv<64>)((sc_bv<32>)((
                               sc_int<32> )plm_out_ping_shared_Q1_wire.read()), 
                               (sc_bv<32>)(plm_out_ping_shared_Q2_wire.read()))
                                );
}
// resource: mac_N_MuxB_64_2_1_4
void mac::mac_N_MuxB_64_2_1_4_67(){
  if ( s_reg_25.read() ) {
    mac_N_MuxB_64_2_1_4_67_out1 = (sc_biguint<64> ) (mac_N_MuxB_64_2_1_4_67_in2
                                  .read());
  } else {
    mac_N_MuxB_64_2_1_4_67_out1 = (sc_biguint<64> ) (mac_N_MuxB_64_2_1_4_67_in3
                                  .read());
  }
}
// resource: mac_LessThan_16Ux32U_1U_4  instance: mac_LessThan_16Ux32U_1U_4_68
void mac::mac_LessThan_16Ux32U_1U_4_68(){
  mac_LessThan_16Ux32U_1U_4_68_out1 = (/*imp*/sc_uint<1>)((sc_uint<16> )s_reg_31
                                      .read() < (sc_uint<32> )s_reg_27.read());
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_69
void mac::mac_Not_1U_1U_4_69(){
  mac_Not_1U_1U_4_69_out1 = (sc_uint<1> ) (!dma_write_chnl_set_valid_curr.read()
                            );
}
// resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_70
void mac::mac_GreaterThan_32Sx2S_1U_4_70(){
  mac_GreaterThan_32Sx2S_1U_4_70_out1 = (/*imp*/sc_uint<1>)((sc_int<32> )
                                        s_reg_23.read() > (sc_int<2> )0LL);
}
// resource: mac_LessThan_17Sx32S_1U_4  instance: mac_LessThan_17Sx32S_1U_4_71
void mac::mac_LessThan_17Sx32S_1U_4_71(){
  mac_LessThan_17Sx32S_1U_4_71_out1 = (/*imp*/sc_uint<1>)((sc_int<17> )s_reg_16
                                      .read() < (sc_int<32> )s_reg_18.read());
}
// resource: regr_ac_4
void mac::drive_global_state2(){
  if ( (rst.read() == 0ULL) ) {
    global_state2 = 0ULL;
  } else {
    global_state2 = global_state2_next.read();
  }
}
// resource: mux_4bx10i9c
void mac::drive_global_state2_next(){
  switch( (sc_uint<4>)(global_state2.read()) ) {
  default:
    global_state2_next = (global_state2.read() + 1ULL);
    break;
  case 0ULL: case 1ULL: 
    if ( cfg_done.read() ) {
      global_state2_next = 2ULL;
    } else {
      global_state2_next = 1ULL;
    }
    break;
  case 3ULL: 
    if ( mac_LessThan_2Sx32S_1U_4_52_out1.read() ) {
      global_state2_next = (global_state2.read() + 1ULL);
    } else {
      global_state2_next = 9ULL;
    }
    break;
  case 4ULL: 
    if ( mac_GreaterThan_32Sx2S_1U_4_57_out1.read() ) {
      global_state2_next = (global_state2.read() + 1ULL);
    } else {
      if ( mac_LessThan_17Sx32S_1U_4_71_out1.read() ) {
        global_state2_next = 4ULL;
      } else {
        global_state2_next = 9ULL;
      }
    }
    break;
  case 5ULL: 
    if ( output_ready_channel_ready.read() ) {
      global_state2_next = (global_state2.read() + 1ULL);
    } else {
      global_state2_next = 5ULL;
    }
    break;
  case 6ULL: 
    if ( dma_write_ctrl_ready.read() ) {
      switch( (sc_uint<32>)(s_reg_27.read()) ) {
      default:
        global_state2_next = (global_state2.read() + 1ULL);
        break;
      case 0ULL: 
        if ( mac_GreaterThan_32Sx2S_1U_4_70_out1.read() ) {
          global_state2_next = 5ULL;
        } else {
          if ( mac_LessThan_17Sx32S_1U_4_71_out1.read() ) {
            global_state2_next = 4ULL;
          } else {
            global_state2_next = 9ULL;
          }
        }
        break;
      }
    } else {
      global_state2_next = 6ULL;
    }
    break;
  case 7ULL: case 8ULL: 
    if ( mac_Or_1Ux1U_1U_4_46_out1.read() ) {
      if ( mac_LessThan_16Ux32U_1U_4_68_out1.read() ) {
        global_state2_next = 7ULL;
      } else {
        if ( mac_GreaterThan_32Sx2S_1U_4_70_out1.read() ) {
          global_state2_next = 5ULL;
        } else {
          if ( mac_LessThan_17Sx32S_1U_4_71_out1.read() ) {
            global_state2_next = 4ULL;
          } else {
            global_state2_next = 9ULL;
          }
        }
      }
    } else {
      global_state2_next = 8ULL;
    }
    break;
  case 9ULL: case 10ULL: 
    global_state2_next = 10ULL;
    break;
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl31(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl31 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2_next.read()) ) {
    default:
      gs_ctrl31 = 0ULL;
      break;
    case 7ULL: case 8ULL: 
      gs_ctrl31 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl32(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl32 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2_next.read()) ) {
    default:
      gs_ctrl32 = 0ULL;
      break;
    case 7ULL: case 8ULL: 
      gs_ctrl32 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl33(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl33 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2_next.read()) ) {
    default:
      gs_ctrl33 = 0ULL;
      break;
    case 7ULL: case 8ULL: 
      gs_ctrl33 = 1ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl34(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl34 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2_next.read()) ) {
    default:
      gs_ctrl34 = 0ULL;
      break;
    case 7ULL: case 8ULL: 
      gs_ctrl34 = 1ULL;
      break;
    }
  }
}
// resource: mux_2bx3i3c
// resource: regr_ac_2
void mac::drive_gs_ctrl35(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl35 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2_next.read()) ) {
    default:
      gs_ctrl35 = 0ULL;
      break;
    case 6ULL: 
      gs_ctrl35 = 1ULL;
      break;
    case 7ULL: case 8ULL: 
      gs_ctrl35 = 2ULL;
      break;
    }
  }
}
// resource: mux_2bx3i3c
// resource: regr_ac_2
void mac::drive_gs_ctrl36(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl36 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2_next.read()) ) {
    default:
      gs_ctrl36 = 0ULL;
      break;
    case 6ULL: 
      gs_ctrl36 = 1ULL;
      break;
    case 7ULL: case 8ULL: 
      gs_ctrl36 = 2ULL;
      break;
    }
  }
}
// resource: mux_1bx2i2c
// resource: regr_ac_1
void mac::drive_gs_ctrl37(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl37 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2_next.read()) ) {
    default:
      gs_ctrl37 = 0ULL;
      break;
    case 7ULL: case 8ULL: 
      gs_ctrl37 = 1ULL;
      break;
    }
  }
}
// resource: mux_2bx3i3c
// resource: regr_ac_2
void mac::drive_gs_ctrl38(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl38 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2_next.read()) ) {
    default:
      gs_ctrl38 = 0ULL;
      break;
    case 6ULL: 
      gs_ctrl38 = 1ULL;
      break;
    case 7ULL: case 8ULL: 
      gs_ctrl38 = 2ULL;
      break;
    }
  }
}
// resource: mux_2bx3i3c
// resource: regr_ac_2
void mac::drive_gs_ctrl39(){
  if ( (rst.read() == 0ULL) ) {
    gs_ctrl39 = 0ULL;
  } else {
    switch( (sc_uint<4>)(global_state2_next.read()) ) {
    default:
      gs_ctrl39 = 0ULL;
      break;
    case 6ULL: 
      gs_ctrl39 = 1ULL;
      break;
    case 7ULL: case 8ULL: 
      gs_ctrl39 = 2ULL;
      break;
    }
  }
}
// resource: regr_ac_64
void mac::drive_dma_read_chnl_data_buf(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_chnl_data_buf = sc_biguint<64>(0ULL);
  } else {
    dma_read_chnl_data_buf = (sc_biguint<64> ) (mac_N_MuxB_64_2_1_4_11_out1
                             .read());
  }
}
// resource: regr_ac_1
void mac::drive_dma_read_chnl_sync_rcv_set_ready_prev(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_chnl_sync_rcv_set_ready_prev = 0ULL;
  } else {
    dma_read_chnl_sync_rcv_set_ready_prev = dma_read_chnl_set_ready_curr.read();
  }
}
// resource: regr_ac_1
void mac::drive_dma_read_chnl_sync_rcv_reset_ready_prev(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_chnl_sync_rcv_reset_ready_prev = 0ULL;
  } else {
    dma_read_chnl_sync_rcv_reset_ready_prev = dma_read_chnl_sync_rcv_reset_ready_curr
                                              .read();
  }
}
// resource: regr_ac_1
void mac::drive_dma_read_chnl_sync_rcv_reset_ready_curr(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_chnl_sync_rcv_reset_ready_curr = 0ULL;
  } else {
    dma_read_chnl_sync_rcv_reset_ready_curr = (sc_uint<1> ) (
                                              mac_N_Muxb_1_2_5_4_10_out1.read())
    ;
  }
}
// resource: regr_ac_1
void mac::drive_dma_read_chnl_sync_rcv_ready_flop(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_chnl_sync_rcv_ready_flop = 0ULL;
  } else {
    dma_read_chnl_sync_rcv_ready_flop = (sc_uint<1> ) (mac_Or_1Ux1U_1U_4_8_out1
                                        .read());
  }
}
// resource: regr_ac_1
void mac::drive_dma_read_chnl_ready_mask(){
  if ( (rst.read() == 0ULL) ) {
    dma_read_chnl_ready_mask = 0ULL;
  } else {
    dma_read_chnl_ready_mask = 1ULL;
  }
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_6
void mac::mac_Not_1U_1U_4_6(){
  mac_Not_1U_1U_4_6_out1 = (sc_uint<1> ) (!dma_read_chnl_ready_mask.read());
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_7
void mac::mac_Not_1U_1U_4_7(){
  mac_Not_1U_1U_4_7_out1 = (sc_uint<1> ) (!
                           dma_read_chnl_sync_rcv_reset_ready_curr.read());
}
// resource: mac_Or_1Ux1U_1U_4  instance: mac_Or_1Ux1U_1U_4_8
void mac::mac_Or_1Ux1U_1U_4_8(){
  mac_Or_1Ux1U_1U_4_8_out1 = mac_Not_1U_1U_4_6_out1.read() | (sc_uint<1> )
                             dma_read_chnl_ready.read();
}
// resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_9
void mac::mac_And_1Ux1U_1U_4_9(){
  mac_And_1Ux1U_1U_4_9_out1 = dma_read_chnl_valid.read() & dma_read_chnl_ready
                              .read();
}
// resource: mac_N_Muxb_1_2_5_4
void mac::mac_N_Muxb_1_2_5_4_10(){
  if ( mac_And_1Ux1U_1U_4_9_out1.read() ) {
    mac_N_Muxb_1_2_5_4_10_out1 = mac_Not_1U_1U_4_7_out1.read();
  } else {
    mac_N_Muxb_1_2_5_4_10_out1 = (sc_uint<1> ) (
                                 dma_read_chnl_sync_rcv_reset_ready_curr.read())
    ;
  }
}
// resource: mac_N_MuxB_64_2_1_4
void mac::mac_N_MuxB_64_2_1_4_11(){
  if ( mac_And_1Ux1U_1U_4_9_out1.read() ) {
    mac_N_MuxB_64_2_1_4_11_out1 = (sc_biguint<64> ) (dma_read_chnl_data.read());
  } else {
    mac_N_MuxB_64_2_1_4_11_out1 = (sc_biguint<64> ) (dma_read_chnl_data_buf
                                  .read());
  }
}
void mac::drive_dma_read_chnl_ready(){
  dma_read_chnl_ready = (sc_uint<1> ) (mac_Or_1Ux1U_1U_4_5_out1.read());
}
// resource: mac_Xor_1Ux1U_1U_4  instance: mac_Xor_1Ux1U_1U_4_1
void mac::mac_Xor_1Ux1U_1U_4_1(){
  mac_Xor_1Ux1U_1U_4_1_out1 = dma_read_chnl_sync_rcv_reset_ready_curr.read() ^ 
                              dma_read_chnl_sync_rcv_reset_ready_prev.read();
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_2
void mac::mac_Not_1U_1U_4_2(){
  mac_Not_1U_1U_4_2_out1 = (sc_uint<1> ) (!mac_Xor_1Ux1U_1U_4_1_out1.read());
}
// resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_3
void mac::mac_And_1Ux1U_1U_4_3(){
  mac_And_1Ux1U_1U_4_3_out1 = mac_Not_1U_1U_4_2_out1.read() & (sc_uint<1> )
                              dma_read_chnl_sync_rcv_ready_flop.read();
}
// resource: mac_Xor_1Ux1U_1U_4  instance: mac_Xor_1Ux1U_1U_4_4
void mac::mac_Xor_1Ux1U_1U_4_4(){
  mac_Xor_1Ux1U_1U_4_4_out1 = dma_read_chnl_set_ready_curr.read() ^ 
                              dma_read_chnl_sync_rcv_set_ready_prev.read();
}
// resource: mac_Or_1Ux1U_1U_4  instance: mac_Or_1Ux1U_1U_4_5
void mac::mac_Or_1Ux1U_1U_4_5(){
  mac_Or_1Ux1U_1U_4_5_out1 = mac_Xor_1Ux1U_1U_4_4_out1.read() | (sc_uint<1> )
                             mac_And_1Ux1U_1U_4_3_out1.read();
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_12
void mac::mac_Not_1U_1U_4_12(){
  mac_Not_1U_1U_4_12_out1 = (sc_uint<1> ) (!dma_read_chnl_ready.read());
}
// resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_13
void mac::mac_And_1Ux1U_1U_4_13(){
  mac_And_1Ux1U_1U_4_13_out1 = mac_Not_1U_1U_4_12_out1.read() & (sc_uint<1> )
                               dma_read_chnl_ready_mask.read();
}
// resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_14
void mac::mac_And_1Ux1U_1U_4_14(){
  mac_And_1Ux1U_1U_4_14_out1 = dma_read_chnl_valid.read() & dma_read_chnl_ready
                               .read();
}
// resource: mac_Or_1Ux1U_1U_4  instance: mac_Or_1Ux1U_1U_4_15
void mac::mac_Or_1Ux1U_1U_4_15(){
  mac_Or_1Ux1U_1U_4_15_out1 = mac_And_1Ux1U_1U_4_14_out1.read() | (sc_uint<1> )
                              mac_And_1Ux1U_1U_4_13_out1.read();
}
// resource: regr_ac_1
void mac::drive_dma_write_chnl_sync_snd_set_valid_prev(){
  if ( (rst.read() == 0ULL) ) {
    dma_write_chnl_sync_snd_set_valid_prev = 0ULL;
  } else {
    dma_write_chnl_sync_snd_set_valid_prev = dma_write_chnl_set_valid_curr
                                             .read();
  }
}
// resource: regr_ac_1
void mac::drive_dma_write_chnl_sync_snd_reset_valid_prev(){
  if ( (rst.read() == 0ULL) ) {
    dma_write_chnl_sync_snd_reset_valid_prev = 0ULL;
  } else {
    dma_write_chnl_sync_snd_reset_valid_prev = dma_write_chnl_sync_snd_reset_valid_curr
                                               .read();
  }
}
// resource: regr_ac_1
void mac::drive_dma_write_chnl_sync_snd_reset_valid_curr(){
  if ( (rst.read() == 0ULL) ) {
    dma_write_chnl_sync_snd_reset_valid_curr = 0ULL;
  } else {
    dma_write_chnl_sync_snd_reset_valid_curr = (sc_uint<1> ) (
                                               mac_N_Muxb_1_2_5_4_44_out1.read()
                                               );
  }
}
// resource: regr_ac_1
void mac::drive_dma_write_chnl_sync_snd_valid_flop(){
  if ( (rst.read() == 0ULL) ) {
    dma_write_chnl_sync_snd_valid_flop = 0ULL;
  } else {
    dma_write_chnl_sync_snd_valid_flop = dma_write_chnl_valid.read();
  }
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_43
void mac::mac_Not_1U_1U_4_43(){
  mac_Not_1U_1U_4_43_out1 = (sc_uint<1> ) (!
                            dma_write_chnl_sync_snd_reset_valid_curr.read());
}
// resource: mac_N_Muxb_1_2_5_4
void mac::mac_N_Muxb_1_2_5_4_44(){
  if ( dma_write_chnl_ready.read() ) {
    mac_N_Muxb_1_2_5_4_44_out1 = mac_Not_1U_1U_4_43_out1.read();
  } else {
    mac_N_Muxb_1_2_5_4_44_out1 = (sc_uint<1> ) (
                                 dma_write_chnl_sync_snd_reset_valid_curr.read()
                                 );
  }
}
void mac::drive_dma_write_chnl_valid(){
  dma_write_chnl_valid = (sc_uint<1> ) (mac_Or_1Ux1U_1U_4_42_out1.read());
}
// resource: mac_Xor_1Ux1U_1U_4  instance: mac_Xor_1Ux1U_1U_4_38
void mac::mac_Xor_1Ux1U_1U_4_38(){
  mac_Xor_1Ux1U_1U_4_38_out1 = dma_write_chnl_sync_snd_reset_valid_curr.read()
                                ^ dma_write_chnl_sync_snd_reset_valid_prev
                               .read();
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_39
void mac::mac_Not_1U_1U_4_39(){
  mac_Not_1U_1U_4_39_out1 = (sc_uint<1> ) (!mac_Xor_1Ux1U_1U_4_38_out1.read());
}
// resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_40
void mac::mac_And_1Ux1U_1U_4_40(){
  mac_And_1Ux1U_1U_4_40_out1 = mac_Not_1U_1U_4_39_out1.read() & (sc_uint<1> )
                               dma_write_chnl_sync_snd_valid_flop.read();
}
// resource: mac_Xor_1Ux1U_1U_4  instance: mac_Xor_1Ux1U_1U_4_41
void mac::mac_Xor_1Ux1U_1U_4_41(){
  mac_Xor_1Ux1U_1U_4_41_out1 = dma_write_chnl_set_valid_curr.read() ^ 
                               dma_write_chnl_sync_snd_set_valid_prev.read();
}
// resource: mac_Or_1Ux1U_1U_4  instance: mac_Or_1Ux1U_1U_4_42
void mac::mac_Or_1Ux1U_1U_4_42(){
  mac_Or_1Ux1U_1U_4_42_out1 = mac_Xor_1Ux1U_1U_4_41_out1.read() | (sc_uint<1> )
                              mac_And_1Ux1U_1U_4_40_out1.read();
}
// resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_45
void mac::mac_Not_1U_1U_4_45(){
  mac_Not_1U_1U_4_45_out1 = (sc_uint<1> ) (!dma_write_chnl_valid.read());
}
// resource: mac_Or_1Ux1U_1U_4  instance: mac_Or_1Ux1U_1U_4_46
void mac::mac_Or_1Ux1U_1U_4_46(){
  mac_Or_1Ux1U_1U_4_46_out1 = mac_Not_1U_1U_4_45_out1.read() | (sc_uint<1> )
                              dma_write_chnl_ready.read();
}
// resource: regr_en_ac_1
void mac::drive_cfg_done(){
  if ( (rst.read() == 0ULL) ) {
    cfg_done = 0ULL;
  } else {
    switch( (sc_uint<2>)(global_state3.read()) ) {
    case 1ULL: 
      if ( conf_done.read() ) {
        cfg_done = 1ULL;
      } 
      break;
    }
  }
}
// resource: regr_ac_2
void mac::drive_global_state3(){
  if ( (rst.read() == 0ULL) ) {
    global_state3 = 0ULL;
  } else {
    global_state3 = cfg_config_accelerator_next.read();
  }
}
// resource: mux_2bx3i2c
void mac::drive_cfg_config_accelerator_next(){
  switch( (sc_uint<2>)(global_state3.read()) ) {
  default:
    cfg_config_accelerator_next = (global_state3.read() + 1ULL);
    break;
  case 1ULL: 
    if ( conf_done.read() ) {
      cfg_config_accelerator_next = (global_state3.read() + 1ULL);
    } else {
      cfg_config_accelerator_next = 1ULL;
    }
    break;
  case 2ULL: 
    cfg_config_accelerator_next = 2ULL;
    break;
  }
}
void mac::mux_plm_out_pong_shared_0_inputs_plm_out_pong_shared_WEM0_wire(){
  plm_out_pong_shared_WEM0_wire = plm_out_pong_compute_kernel_WEM0.read();
}
void mac::mux_plm_out_pong_shared_0_inputs_plm_out_pong_shared_A0_wire(){
  plm_out_pong_shared_A0_wire = plm_out_pong_compute_kernel_A0.read();
}
void mac::mux_plm_out_pong_shared_0_inputs_plm_out_pong_shared_D0_wire(){
  plm_out_pong_shared_D0_wire = plm_out_pong_compute_kernel_D0.read();
}
void mac::mux_plm_out_pong_shared_0_inputs_plm_out_pong_shared_CE0_wire(){
  plm_out_pong_shared_CE0_wire = plm_out_pong_compute_kernel_CE0.read();
}
void mac::mux_plm_out_pong_shared_0_inputs_plm_out_pong_shared_WE0_wire(){
  plm_out_pong_shared_WE0_wire = plm_out_pong_compute_kernel_WE0.read();
}
void mac::mux_plm_out_pong_shared_2_inputs_plm_out_pong_shared_A2_wire(){
  plm_out_pong_shared_A2_wire = plm_out_pong_store_output_A2.read();
}
void mac::mux_plm_out_pong_shared_2_inputs_plm_out_pong_shared_CE2_wire(){
  plm_out_pong_shared_CE2_wire = plm_out_pong_store_output_CE2.read();
}
void mac::mux_plm_out_pong_shared_1_inputs_plm_out_pong_shared_A1_wire(){
  plm_out_pong_shared_A1_wire = plm_out_pong_store_output_A1.read();
}
void mac::mux_plm_out_pong_shared_1_inputs_plm_out_pong_shared_CE1_wire(){
  plm_out_pong_shared_CE1_wire = plm_out_pong_store_output_CE1.read();
}
void mac::mux_plm_out_ping_shared_0_inputs_plm_out_ping_shared_WEM0_wire(){
  plm_out_ping_shared_WEM0_wire = plm_out_ping_compute_kernel_WEM0.read();
}
void mac::mux_plm_out_ping_shared_0_inputs_plm_out_ping_shared_A0_wire(){
  plm_out_ping_shared_A0_wire = plm_out_ping_compute_kernel_A0.read();
}
void mac::mux_plm_out_ping_shared_0_inputs_plm_out_ping_shared_D0_wire(){
  plm_out_ping_shared_D0_wire = plm_out_ping_compute_kernel_D0.read();
}
void mac::mux_plm_out_ping_shared_0_inputs_plm_out_ping_shared_CE0_wire(){
  plm_out_ping_shared_CE0_wire = plm_out_ping_compute_kernel_CE0.read();
}
void mac::mux_plm_out_ping_shared_0_inputs_plm_out_ping_shared_WE0_wire(){
  plm_out_ping_shared_WE0_wire = plm_out_ping_compute_kernel_WE0.read();
}
void mac::mux_plm_out_ping_shared_2_inputs_plm_out_ping_shared_A2_wire(){
  plm_out_ping_shared_A2_wire = plm_out_ping_store_output_A2.read();
}
void mac::mux_plm_out_ping_shared_2_inputs_plm_out_ping_shared_CE2_wire(){
  plm_out_ping_shared_CE2_wire = plm_out_ping_store_output_CE2.read();
}
void mac::mux_plm_out_ping_shared_1_inputs_plm_out_ping_shared_A1_wire(){
  plm_out_ping_shared_A1_wire = plm_out_ping_store_output_A1.read();
}
void mac::mux_plm_out_ping_shared_1_inputs_plm_out_ping_shared_CE1_wire(){
  plm_out_ping_shared_CE1_wire = plm_out_ping_store_output_CE1.read();
}
void mac::copy_plm_in_pong_shared_2_outputs_plm_in_pong_compute_kernel_Q2(){
  plm_in_pong_compute_kernel_Q2 = plm_in_pong_shared_Q2_wire.read();
}
void mac::mux_plm_in_pong_shared_2_inputs_plm_in_pong_shared_A2_wire(){
  plm_in_pong_shared_A2_wire = plm_in_pong_compute_kernel_A2.read();
}
void mac::mux_plm_in_pong_shared_2_inputs_plm_in_pong_shared_CE2_wire(){
  plm_in_pong_shared_CE2_wire = plm_in_pong_compute_kernel_CE2.read();
}
void mac::mux_plm_in_pong_shared_1_inputs_plm_in_pong_shared_WEM1_wire(){
  plm_in_pong_shared_WEM1_wire = plm_in_pong_load_input_WEM1.read();
}
void mac::mux_plm_in_pong_shared_1_inputs_plm_in_pong_shared_A1_wire(){
  plm_in_pong_shared_A1_wire = plm_in_pong_load_input_A1.read();
}
void mac::mux_plm_in_pong_shared_1_inputs_plm_in_pong_shared_D1_wire(){
  plm_in_pong_shared_D1_wire = plm_in_pong_load_input_D1.read();
}
void mac::mux_plm_in_pong_shared_1_inputs_plm_in_pong_shared_CE1_wire(){
  plm_in_pong_shared_CE1_wire = plm_in_pong_load_input_CE1.read();
}
void mac::mux_plm_in_pong_shared_1_inputs_plm_in_pong_shared_WE1_wire(){
  plm_in_pong_shared_WE1_wire = plm_in_pong_load_input_WE1.read();
}
void mac::mux_plm_in_pong_shared_0_inputs_plm_in_pong_shared_WEM0_wire(){
  plm_in_pong_shared_WEM0_wire = plm_in_pong_load_input_WEM0.read();
}
void mac::mux_plm_in_pong_shared_0_inputs_plm_in_pong_shared_A0_wire(){
  plm_in_pong_shared_A0_wire = plm_in_pong_load_input_A0.read();
}
void mac::mux_plm_in_pong_shared_0_inputs_plm_in_pong_shared_D0_wire(){
  plm_in_pong_shared_D0_wire = plm_in_pong_load_input_D0.read();
}
void mac::mux_plm_in_pong_shared_0_inputs_plm_in_pong_shared_CE0_wire(){
  plm_in_pong_shared_CE0_wire = plm_in_pong_load_input_CE0.read();
}
void mac::mux_plm_in_pong_shared_0_inputs_plm_in_pong_shared_WE0_wire(){
  plm_in_pong_shared_WE0_wire = plm_in_pong_load_input_WE0.read();
}
void mac::copy_plm_in_ping_shared_2_outputs_plm_in_ping_compute_kernel_Q2(){
  plm_in_ping_compute_kernel_Q2 = plm_in_ping_shared_Q2_wire.read();
}
void mac::mux_plm_in_ping_shared_2_inputs_plm_in_ping_shared_A2_wire(){
  plm_in_ping_shared_A2_wire = plm_in_ping_compute_kernel_A2.read();
}
void mac::mux_plm_in_ping_shared_2_inputs_plm_in_ping_shared_CE2_wire(){
  plm_in_ping_shared_CE2_wire = plm_in_ping_compute_kernel_CE2.read();
}
void mac::mux_plm_in_ping_shared_1_inputs_plm_in_ping_shared_WEM1_wire(){
  plm_in_ping_shared_WEM1_wire = plm_in_ping_load_input_WEM1.read();
}
void mac::mux_plm_in_ping_shared_1_inputs_plm_in_ping_shared_A1_wire(){
  plm_in_ping_shared_A1_wire = plm_in_ping_load_input_A1.read();
}
void mac::mux_plm_in_ping_shared_1_inputs_plm_in_ping_shared_D1_wire(){
  plm_in_ping_shared_D1_wire = plm_in_ping_load_input_D1.read();
}
void mac::mux_plm_in_ping_shared_1_inputs_plm_in_ping_shared_CE1_wire(){
  plm_in_ping_shared_CE1_wire = plm_in_ping_load_input_CE1.read();
}
void mac::mux_plm_in_ping_shared_1_inputs_plm_in_ping_shared_WE1_wire(){
  plm_in_ping_shared_WE1_wire = plm_in_ping_load_input_WE1.read();
}
void mac::mux_plm_in_ping_shared_0_inputs_plm_in_ping_shared_WEM0_wire(){
  plm_in_ping_shared_WEM0_wire = plm_in_ping_load_input_WEM0.read();
}
void mac::mux_plm_in_ping_shared_0_inputs_plm_in_ping_shared_A0_wire(){
  plm_in_ping_shared_A0_wire = plm_in_ping_load_input_A0.read();
}
void mac::mux_plm_in_ping_shared_0_inputs_plm_in_ping_shared_D0_wire(){
  plm_in_ping_shared_D0_wire = plm_in_ping_load_input_D0.read();
}
void mac::mux_plm_in_ping_shared_0_inputs_plm_in_ping_shared_CE0_wire(){
  plm_in_ping_shared_CE0_wire = plm_in_ping_load_input_CE0.read();
}
void mac::mux_plm_in_ping_shared_0_inputs_plm_in_ping_shared_WE0_wire(){
  plm_in_ping_shared_WE0_wire = plm_in_ping_load_input_WE0.read();
}
void mac::drive_dma_read_ctrl_data_index(){
  dma_read_ctrl_data_index = (sc_uint<32> ) (dma_read_ctrl_data_index_slice
                             .read());
}
void mac::drive_dma_read_ctrl_data_length(){
  dma_read_ctrl_data_length = (sc_uint<32> ) (dma_read_ctrl_data_length_slice
                              .read());
}
void mac::drive_dma_read_ctrl_data_size(){
  dma_read_ctrl_data_size = (sc_biguint<3> ) (( (sc_uint<2> )(sc_bv<2>)(
                            (sc_bv<1>)(dma_read_ctrl_data_size_slice.read()), 
                            (sc_bv<1>)(0ULL)) ));
}
void mac::drive_dma_write_ctrl_data_index(){
  dma_write_ctrl_data_index = (sc_uint<32> ) (dma_write_ctrl_data_index_slice
                              .read());
}
void mac::drive_dma_write_ctrl_data_length(){
  dma_write_ctrl_data_length = (sc_uint<32> ) (dma_write_ctrl_data_length_slice
                               .read());
}
void mac::drive_dma_write_ctrl_data_size(){
  dma_write_ctrl_data_size = (sc_biguint<3> ) (( (sc_uint<2> )(sc_bv<2>)(
                             (sc_bv<1>)(dma_write_ctrl_data_size_slice.read()), 
                             (sc_bv<1>)(0ULL)) ));
}
