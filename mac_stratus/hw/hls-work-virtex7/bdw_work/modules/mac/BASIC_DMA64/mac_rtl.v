// Generated by stratus_hls 19.22-s100  (92619.020518)
// Sun Mar 28 16:25:52 2021
// from ../src/mac.cpp

`timescale 1ps / 1ps

      
module mac(clk, rst, dma_read_chnl_valid, dma_read_chnl_data, dma_read_chnl_ready, conf_info_mac_n, conf_info_mac_vec, conf_info_mac_len, conf_done, acc_done, debug, dma_read_ctrl_valid, dma_read_ctrl_data_index, dma_read_ctrl_data_length, dma_read_ctrl_data_size, dma_read_ctrl_ready, dma_write_ctrl_valid, dma_write_ctrl_data_index, dma_write_ctrl_data_length, dma_write_ctrl_data_size, dma_write_ctrl_ready, dma_write_chnl_valid, dma_write_chnl_data, dma_write_chnl_ready);

      input clk;
      input rst;
      input dma_read_chnl_valid;
      input [63:0] dma_read_chnl_data;
      input [31:0] conf_info_mac_n;
      input [31:0] conf_info_mac_vec;
      input [31:0] conf_info_mac_len;
      input conf_done;
      input dma_read_ctrl_ready;
      input dma_write_ctrl_ready;
      input dma_write_chnl_ready;
      output dma_read_chnl_ready;
      output acc_done;
      reg acc_done;
      output [31:0] debug;
      output dma_read_ctrl_valid;
      reg dma_read_ctrl_valid;
      output [31:0] dma_read_ctrl_data_index;
      output [31:0] dma_read_ctrl_data_length;
      output [2:0] dma_read_ctrl_data_size;
      output dma_write_ctrl_valid;
      reg dma_write_ctrl_valid;
      output [31:0] dma_write_ctrl_data_index;
      output [31:0] dma_write_ctrl_data_length;
      output [2:0] dma_write_ctrl_data_size;
      output dma_write_chnl_valid;
      output [63:0] dma_write_chnl_data;
      reg [63:0] dma_write_chnl_data;
      wire plm_in_ping_shared_WE0_wire;
      wire plm_in_ping_shared_CE0_wire;
      wire[31:0] plm_in_ping_shared_D0_wire;
      wire[12:0] plm_in_ping_shared_A0_wire;
      wire[31:0] plm_in_ping_shared_WEM0_wire;
      wire plm_in_ping_shared_WE1_wire;
      wire plm_in_ping_shared_CE1_wire;
      wire[31:0] plm_in_ping_shared_D1_wire;
      wire[12:0] plm_in_ping_shared_A1_wire;
      wire[31:0] plm_in_ping_shared_WEM1_wire;
      wire plm_in_ping_shared_CE2_wire;
      wire[31:0] plm_in_ping_shared_Q2_wire;
      wire[12:0] plm_in_ping_shared_A2_wire;
      wire plm_in_pong_shared_WE0_wire;
      wire plm_in_pong_shared_CE0_wire;
      wire[31:0] plm_in_pong_shared_D0_wire;
      wire[12:0] plm_in_pong_shared_A0_wire;
      wire[31:0] plm_in_pong_shared_WEM0_wire;
      wire plm_in_pong_shared_WE1_wire;
      wire plm_in_pong_shared_CE1_wire;
      wire[31:0] plm_in_pong_shared_D1_wire;
      wire[12:0] plm_in_pong_shared_A1_wire;
      wire[31:0] plm_in_pong_shared_WEM1_wire;
      wire plm_in_pong_shared_CE2_wire;
      wire[31:0] plm_in_pong_shared_Q2_wire;
      wire[12:0] plm_in_pong_shared_A2_wire;
      wire plm_out_ping_shared_WE0_wire;
      wire plm_out_ping_shared_CE0_wire;
      wire[31:0] plm_out_ping_shared_D0_wire;
      wire[6:0] plm_out_ping_shared_A0_wire;
      wire[31:0] plm_out_ping_shared_WEM0_wire;
      wire plm_out_ping_shared_CE1_wire;
      wire[6:0] plm_out_ping_shared_A1_wire;
      wire plm_out_ping_shared_CE2_wire;
      wire[6:0] plm_out_ping_shared_A2_wire;
      wire plm_out_pong_shared_WE0_wire;
      wire plm_out_pong_shared_CE0_wire;
      wire[31:0] plm_out_pong_shared_D0_wire;
      wire[6:0] plm_out_pong_shared_A0_wire;
      wire[31:0] plm_out_pong_shared_WEM0_wire;
      wire plm_out_pong_shared_CE1_wire;
      wire[6:0] plm_out_pong_shared_A1_wire;
      wire plm_out_pong_shared_CE2_wire;
      wire[6:0] plm_out_pong_shared_A2_wire;
      reg[1:0] cfg_config_accelerator_next;
      reg[1:0] global_state3;
      wire mac_Not_1U_1U_4_45_out1;
      wire mac_Xor_1Ux1U_1U_4_41_out1;
      wire mac_And_1Ux1U_1U_4_40_out1;
      wire mac_Not_1U_1U_4_39_out1;
      wire mac_Xor_1Ux1U_1U_4_38_out1;
      wire mac_Or_1Ux1U_1U_4_42_out1;
      wire mac_Not_1U_1U_4_43_out1;
      reg dma_write_chnl_sync_snd_valid_flop;
      reg mac_N_Muxb_1_2_5_4_44_out1;
      reg dma_write_chnl_sync_snd_reset_valid_curr;
      reg dma_write_chnl_sync_snd_reset_valid_prev;
      reg dma_write_chnl_sync_snd_set_valid_prev;
      wire mac_And_1Ux1U_1U_4_14_out1;
      wire mac_And_1Ux1U_1U_4_13_out1;
      wire mac_Not_1U_1U_4_12_out1;
      wire mac_Xor_1Ux1U_1U_4_4_out1;
      wire mac_And_1Ux1U_1U_4_3_out1;
      wire mac_Not_1U_1U_4_2_out1;
      wire mac_Xor_1Ux1U_1U_4_1_out1;
      wire mac_Or_1Ux1U_1U_4_5_out1;
      wire mac_And_1Ux1U_1U_4_9_out1;
      wire mac_Not_1U_1U_4_7_out1;
      wire mac_Not_1U_1U_4_6_out1;
      reg dma_read_chnl_ready_mask;
      wire mac_Or_1Ux1U_1U_4_8_out1;
      reg dma_read_chnl_sync_rcv_ready_flop;
      reg mac_N_Muxb_1_2_5_4_10_out1;
      reg dma_read_chnl_sync_rcv_reset_ready_curr;
      reg dma_read_chnl_sync_rcv_reset_ready_prev;
      reg dma_read_chnl_sync_rcv_set_ready_prev;
      reg[63:0] mac_N_MuxB_64_2_1_4_11_out1;
      reg[3:0] global_state2_next;
      wire[31:0] plm_out_ping_shared_Q1_wire;
      wire[31:0] plm_out_ping_shared_Q2_wire;
      wire[63:0] mac_N_MuxB_64_2_1_4_67_in2;
      wire[31:0] plm_out_pong_shared_Q1_wire;
      wire[31:0] plm_out_pong_shared_Q2_wire;
      wire[63:0] mac_N_MuxB_64_2_1_4_67_in3;
      reg plm_out_pong_store_output_CE1;
      reg[1:0] gs_ctrl39;
      wire[6:0] plm_out_pong_store_output_A1;
      reg plm_out_pong_store_output_CE2;
      reg[1:0] gs_ctrl38;
      reg[6:0] plm_out_pong_store_output_A2;
      reg gs_ctrl37;
      reg plm_out_ping_store_output_CE1;
      reg[1:0] gs_ctrl36;
      wire[6:0] plm_out_ping_store_output_A1;
      reg plm_out_ping_store_output_CE2;
      reg[1:0] gs_ctrl35;
      reg[6:0] plm_out_ping_store_output_A2;
      reg gs_ctrl34;
      wire[12:0] mac_Add_13Ux1U_13U_4_66_out1;
      reg[6:0] mac_Add_13Ux1U_13U_4_66_in2_slice;
      reg gs_ctrl33;
      wire[12:0] mac_Add_13Ux1U_13U_4_65_out1;
      reg[6:0] mac_Add_13Ux1U_13U_4_65_in2_slice;
      reg gs_ctrl32;
      reg[15:0] mac_Add_16Ux2U_16U_4_64_in2;
      reg gs_ctrl31;
      wire mac_Not_1U_1U_4_63_out1;
      wire mac_GreaterThan_32Sx8S_1U_4_58_out1;
      /*signed*/wire[31:0] mac_Or_32Sx1U_32S_4_54_out1;
      /*signed*/wire[31:0] mac_Or_32Sx1U_32S_4_49_out1;
      /*signed*/wire[31:0] mac_Sub_32Sx1U_32S_4_48_out1;
      wire[31:0] mac_Mul_32Ux32U_32U_4_47_out1;
      wire[15:0] mac_Add_16Ux2U_16U_4_64_out1;
      reg[15:0] s_reg_31;
      reg[31:0] mac_N_Mux_32_2_4_4_59_out1;
      reg[31:0] s_reg_26;
      reg s_reg_25;
      /*signed*/wire[31:0] mac_Sub_32Sx7U_32S_4_60_out1;
      /*signed*/wire[31:0] mac_Add_32Sx1U_32S_4_55_out1;
      reg[31:0] s_reg_23;
      wire[31:0] mac_Add_32Ux32U_32U_4_62_out1;
      wire[31:0] mac_Mul_32Ux32U_32U_4_53_out1;
      reg[31:0] s_reg_22;
      /*signed*/wire[31:0] mac_Sub_32Sx1U_32S_4_51_out1;
      reg[31:0] s_reg_21;
      /*signed*/wire[31:0] mac_Add_32Sx1U_32S_4_50_out1;
      reg[31:0] s_reg_20;
      reg[31:0] s_reg_19;
      reg[31:0] s_reg_18;
      wire mac_Not_1U_1U_4_61_out1;
      reg s_reg_17;
      wire[15:0] mac_Add_16Ux1U_16U_4_56_out1;
      reg[15:0] s_reg_16;
      wire mac_Not_1U_1U_4_69_out1;
      reg dma_write_chnl_set_valid_curr;
      wire mac_LessThan_16Ux32U_1U_4_68_out1;
      wire mac_GreaterThan_32Sx2S_1U_4_70_out1;
      wire mac_GreaterThan_32Sx2S_1U_4_57_out1;
      wire mac_LessThan_17Sx32S_1U_4_71_out1;
      wire mac_LessThan_2Sx32S_1U_4_52_out1;
      reg[30:0] s_reg_28;
      reg[30:0] dma_write_ctrl_data_index_slice;
      reg[31:0] s_reg_27;
      reg[30:0] dma_write_ctrl_data_length_slice;
      reg dma_write_ctrl_data_size_slice;
      reg[63:0] s_reg_34;
      reg[63:0] mac_N_MuxB_64_2_1_4_67_out1;
      wire mac_Or_1Ux1U_1U_4_46_out1;
      reg[3:0] global_state2;
      reg[3:0] global_state1_next;
      reg[31:0] plm_out_ping_compute_kernel_WEM0;
      reg gs_ctrl30;
      reg plm_out_ping_compute_kernel_CE0;
      reg gs_ctrl29;
      reg plm_out_ping_compute_kernel_WE0;
      reg gs_ctrl28;
      wire[31:0] plm_out_ping_compute_kernel_D0;
      wire[6:0] plm_out_ping_compute_kernel_A0;
      reg[31:0] plm_out_pong_compute_kernel_WEM0;
      reg gs_ctrl27;
      reg plm_out_pong_compute_kernel_CE0;
      reg gs_ctrl26;
      reg plm_out_pong_compute_kernel_WE0;
      reg gs_ctrl25;
      wire[31:0] plm_out_pong_compute_kernel_D0;
      wire[6:0] plm_out_pong_compute_kernel_A0;
      wire[31:0] mac_Mul_32Ux32U_32U_4_91_out1;
      reg[31:0] mac_N_Mux_32_2_2_4_90_out1;
      wire mac_And_1Ux1U_1U_4_88_out1;
      wire[31:0] plm_in_ping_compute_kernel_Q2;
      wire[31:0] plm_in_pong_compute_kernel_Q2;
      reg plm_in_pong_compute_kernel_CE2;
      reg[1:0] gs_ctrl24;
      reg[12:0] plm_in_pong_compute_kernel_A2;
      reg gs_ctrl23;
      reg plm_in_ping_compute_kernel_CE2;
      reg[1:0] gs_ctrl22;
      reg[12:0] plm_in_ping_compute_kernel_A2;
      reg gs_ctrl21;
      /*signed*/wire[12:0] mac_Add_13Sx1U_13S_4_82_out1;
      /*signed*/reg[12:0] mac_Add_13Sx1U_13S_4_82_in2;
      reg gs_ctrl20;
      /*signed*/wire[12:0] mac_Add_13Sx1U_13S_4_81_out1;
      /*signed*/reg[12:0] mac_Add_13Sx1U_13S_4_81_in2;
      reg gs_ctrl19;
      reg[31:0] mac_Add_32Ux2U_32U_4_79_in2;
      reg gs_ctrl18;
      /*signed*/reg[31:0] mac_Sub_32Sx13U_32S_4_78_in2;
      reg gs_ctrl17;
      /*signed*/reg[31:0] mac_N_Mux_32_2_2_4_77_in3;
      reg gs_ctrl16;
      wire mac_GreaterThan_32Sx14S_1U_4_76_out1;
      /*signed*/reg[31:0] mac_GreaterThan_32Sx14S_1U_4_76_in2;
      reg gs_ctrl15;
      wire[31:0] mac_Mul_32Ux32U_32U_4_73_out1;
      reg[31:0] mac_Mul_32Ux32U_32U_4_73_in1;
      reg gs_ctrl14;
      reg[31:0] mac_Mul_32Ux32U_32U_4_73_in2;
      reg gs_ctrl13;
      wire[31:0] mac_Add_32Ux32U_32U_4_92_out1;
      reg[31:0] s_reg_61;
      /*signed*/wire[31:0] mac_Add_32Sx2U_32S_4_89_out1;
      wire mac_And_1Ux1U_1U_4_86_out1;
      reg s_reg_58;
      reg[31:0] mac_N_Mux_32_2_2_4_85_out1;
      reg[31:0] s_reg_57;
      wire mac_Equal_32Ux32U_1U_4_84_out1;
      reg s_reg_56;
      wire mac_Not_1U_1U_4_83_out1;
      reg s_reg_55;
      wire mac_Not_1U_1U_4_80_out1;
      reg s_reg_52;
      wire[31:0] mac_Add_32Ux2U_32U_4_79_out1;
      reg[31:0] s_reg_51;
      reg[31:0] s_reg_60;
      reg[31:0] s_reg_50;
      reg s_reg_49;
      /*signed*/wire[31:0] mac_Sub_32Sx13U_32S_4_78_out1;
      reg[31:0] s_reg_48;
      reg[31:0] mac_N_Mux_32_2_2_4_77_out1;
      reg[31:0] mac_N_Mux_32_2_3_4_96_out1;
      reg[31:0] s_reg_46;
      wire[12:0] mac_Add_13Ux1U_13U_4_95_out1;
      reg[6:0] s_reg_45;
      reg[31:0] mac_N_Mux_32_2_3_4_94_out1;
      reg[31:0] s_reg_44;
      wire mac_Not_1U_1U_4_87_out1;
      wire mac_Not_1U_1U_4_98_out1;
      reg s_reg_41;
      reg[31:0] s_reg_40;
      reg[31:0] s_reg_39;
      reg[31:0] s_reg_38;
      wire[15:0] mac_Add_16Ux1U_16U_4_75_out1;
      reg[15:0] s_reg_37;
      reg s_reg_43;
      reg s_reg_36;
      reg output_ready_channel_ready;
      reg output_ready_channel_valid;
      wire mac_LessThan_17Sx32S_1U_4_99_out1;
      wire mac_LessThan_32Ux32U_1U_4_93_out1;
      reg[31:0] s_reg_47;
      wire mac_GreaterThan_32Sx2S_1U_4_97_out1;
      wire mac_LessThan_2Sx32S_1U_4_72_out1;
      wire mac_GreaterThan_32Sx2S_1U_4_74_out1;
      reg[3:0] global_state1;
      reg cfg_done;
      reg[3:0] global_state_next;
      wire mac_LessThan_17Sx32S_1U_4_37_out1;
      reg[31:0] plm_in_ping_load_input_WEM0;
      reg gs_ctrl12;
      reg plm_in_ping_load_input_CE0;
      reg gs_ctrl11;
      reg plm_in_ping_load_input_WE0;
      reg gs_ctrl10;
      wire[31:0] plm_in_ping_load_input_D0;
      wire[12:0] plm_in_ping_load_input_A0;
      reg[31:0] plm_in_pong_load_input_WEM0;
      reg gs_ctrl9;
      reg plm_in_pong_load_input_CE0;
      reg gs_ctrl8;
      reg plm_in_pong_load_input_WE0;
      reg gs_ctrl7;
      wire[31:0] plm_in_pong_load_input_D0;
      wire[12:0] plm_in_pong_load_input_A0;
      reg[31:0] plm_in_ping_load_input_WEM1;
      reg gs_ctrl6;
      reg plm_in_ping_load_input_CE1;
      reg gs_ctrl5;
      reg plm_in_ping_load_input_WE1;
      reg gs_ctrl4;
      wire[31:0] plm_in_ping_load_input_D1;
      wire[12:0] plm_in_ping_load_input_A1;
      reg[31:0] plm_in_pong_load_input_WEM1;
      reg gs_ctrl3;
      reg plm_in_pong_load_input_CE1;
      reg gs_ctrl2;
      reg plm_in_pong_load_input_WE1;
      reg gs_ctrl1;
      wire[31:0] plm_in_pong_load_input_D1;
      wire[12:0] plm_in_pong_load_input_A1;
      wire[12:0] mac_Add_13Ux1U_13U_4_34_out1;
      wire[12:0] mac_Add_13Ux1U_13U_4_33_out1;
      wire mac_Not_1U_1U_4_31_out1;
      reg[63:0] dma_read_chnl_data_buf;
      reg[15:0] mac_Add_16Ux2U_16U_4_28_in2;
      reg gs_ctrl0;
      wire mac_GreaterThan_32Sx14S_1U_4_23_out1;
      /*signed*/wire[31:0] mac_Or_32Sx1U_32S_4_19_out1;
      wire mac_LessThan_2Sx32S_1U_4_18_out1;
      wire[31:0] mac_Mul_32Ux32U_32U_4_16_out1;
      reg[31:0] s_reg_9;
      reg s_reg_8;
      /*signed*/wire[31:0] mac_Sub_32Sx13U_32S_4_25_out1;
      /*signed*/wire[31:0] mac_Add_32Sx1U_32S_4_20_out1;
      reg[31:0] s_reg_6;
      /*signed*/wire[31:0] mac_Sub_32Sx1U_32S_4_17_out1;
      reg[31:0] s_reg_5;
      reg[31:0] s_reg_4;
      wire[31:0] mac_Add_32Ux32U_32U_4_26_out1;
      wire mac_GreaterThan_32Sx2S_1U_4_35_out1;
      wire mac_GreaterThan_32Sx2S_1U_4_22_out1;
      wire[15:0] mac_Add_16Ux1U_16U_4_21_out1;
      reg[15:0] s_reg_2;
      reg[63:0] mac_N_MuxB_64_2_1_4_29_out1;
      reg[63:0] s_reg_15;
      wire[15:0] mac_Add_16Ux2U_16U_4_28_out1;
      reg[15:0] s_reg_14;
      reg[15:0] s_reg_13;
      wire mac_Not_1U_1U_4_27_out1;
      reg s_reg_12;
      reg[31:0] s_reg_3;
      reg[31:0] mac_N_Mux_32_2_2_4_24_out1;
      wire mac_Not_1U_1U_4_36_out1;
      reg s_reg_1;
      reg input_ready_channel_valid;
      reg input_ready_channel_ready;
      wire mac_LessThan_16Ux32U_1U_4_32_out1;
      wire mac_Not_1U_1U_4_30_out1;
      wire mac_Or_1Ux1U_1U_4_15_out1;
      reg dma_read_chnl_set_ready_curr;
      reg[30:0] s_reg_11;
      reg[30:0] dma_read_ctrl_data_index_slice;
      reg[31:0] s_reg_10;
      reg[30:0] dma_read_ctrl_data_length_slice;
      reg[3:0] global_state;
      reg dma_read_ctrl_data_size_slice;

         // instance: drive_debug
         assign debug = 32'd0000000000;

         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_dma_read_ctrl_data_size_slice
            if (rst == 1'b0) begin
               dma_read_ctrl_data_size_slice <= 1'b0;
            end
            else begin
               case (global_state) 

                  4'd04:                   begin
                     dma_read_ctrl_data_size_slice <= 1'b1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_31
         always @(posedge clk)
          begin :drive_dma_read_ctrl_data_length_slice
            if (rst == 1'b0) begin
               dma_read_ctrl_data_length_slice <= 31'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd04:                   begin
                     dma_read_ctrl_data_length_slice <= s_reg_10[31:1];
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_31
         always @(posedge clk)
          begin :drive_dma_read_ctrl_data_index_slice
            if (rst == 1'b0) begin
               dma_read_ctrl_data_index_slice <= 31'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd04:                   begin
                     dma_read_ctrl_data_index_slice <= s_reg_11;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_dma_read_ctrl_valid
            if (rst == 1'b0) begin
               dma_read_ctrl_valid <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd04:                   begin
                     dma_read_ctrl_valid <= 1'd1;
                  end
                  
                  4'd05:                   begin
                     if (dma_read_ctrl_ready) begin
                        dma_read_ctrl_valid <= 1'd0;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_dma_read_chnl_set_ready_curr
            if (rst == 1'b0) begin
               dma_read_chnl_set_ready_curr <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd05:                   begin
                     if (dma_read_ctrl_ready && (32'd0000000000 != s_reg_10 && mac_Or_1Ux1U_1U_4_15_out1)) begin
                        dma_read_chnl_set_ready_curr <= mac_Not_1U_1U_4_30_out1;
                     end
                  end
                  
                  4'd06:                   begin
                     if (mac_Or_1Ux1U_1U_4_15_out1) begin
                        dma_read_chnl_set_ready_curr <= mac_Not_1U_1U_4_30_out1;
                     end
                  end
                  
                  4'd07:                   begin
                     if (mac_LessThan_16Ux32U_1U_4_32_out1 && mac_Or_1Ux1U_1U_4_15_out1) begin
                        dma_read_chnl_set_ready_curr <= mac_Not_1U_1U_4_30_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_input_ready_channel_ready
            if (rst == 1'b0) begin
               input_ready_channel_ready <= 1'd0;
            end
            else begin
               case (global_state) 

                  4'd05:                   begin
                     if (dma_read_ctrl_ready && 32'd0000000000 == s_reg_10) begin
                        input_ready_channel_ready <= 1'd1;
                     end
                  end
                  
                  4'd07:                   begin
                     if (mac_LessThan_16Ux32U_1U_4_32_out1) begin
                     end
                     else begin
                        input_ready_channel_ready <= 1'd1;
                     end
                  end
                  
                  4'd08:                   begin
                     if (input_ready_channel_valid) begin
                        input_ready_channel_ready <= 1'd0;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_as_1
         always @(posedge clk)
          begin :drive_s_reg_1
            if (rst == 1'b0) begin
               s_reg_1 <= 1'b1;
            end
            else begin
               case (global_state) 

                  4'd08:                   begin
                     s_reg_1 <= mac_Not_1U_1U_4_36_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_10
            if (rst == 1'b0) begin
               s_reg_10 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd03, 4'd08:                   begin
                     s_reg_10 <= mac_N_Mux_32_2_2_4_24_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_31
         always @(posedge clk)
          begin :drive_s_reg_11
            if (rst == 1'b0) begin
               s_reg_11 <= 31'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd03, 4'd08:                   begin
                     s_reg_11 <= s_reg_3[31:1];
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_s_reg_12
            if (rst == 1'b0) begin
               s_reg_12 <= 1'b0;
            end
            else begin
               case (global_state) 

                  4'd05:                   begin
                     if (32'd0000000000 != s_reg_10) begin
                        s_reg_12 <= mac_Not_1U_1U_4_27_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_16bx2i1c
         // resource: regr_en_ac_16
         always @(posedge clk)
          begin :drive_s_reg_13
            if (rst == 1'b0) begin
               s_reg_13 <= 16'd00000;
            end
            else begin
               case (global_state) 

                  4'd05:                   begin
                     if (32'd0000000000 != s_reg_10) begin
                        s_reg_13 <= 16'd00000;
                     end
                  end
                  
                  4'd07:                   begin
                     s_reg_13 <= s_reg_14;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_16
         always @(posedge clk)
          begin :drive_s_reg_14
            if (rst == 1'b0) begin
               s_reg_14 <= 16'd00000;
            end
            else begin
               case (global_state) 

                  4'd05:                   begin
                     if (32'd0000000000 != s_reg_10) begin
                        s_reg_14 <= mac_Add_16Ux2U_16U_4_28_out1;
                     end
                  end
                  
                  4'd07:                   begin
                     s_reg_14 <= mac_Add_16Ux2U_16U_4_28_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_64
         always @(posedge clk)
          begin :drive_s_reg_15
            if (rst == 1'b0) begin
               s_reg_15 <= 64'd00000000000000000000;
            end
            else begin
               case (global_state) 

                  4'd05:                   begin
                     if (32'd0000000000 != s_reg_10) begin
                        s_reg_15 <= mac_N_MuxB_64_2_1_4_29_out1;
                     end
                  end
                  
                  4'd06, 4'd07:                   begin
                     s_reg_15 <= mac_N_MuxB_64_2_1_4_29_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_16
         always @(posedge clk)
          begin :drive_s_reg_2
            if (rst == 1'b0) begin
               s_reg_2 <= 16'd00000;
            end
            else begin
               case (global_state) 

                  4'd02:                   begin
                     s_reg_2 <= mac_Add_16Ux1U_16U_4_21_out1;
                  end
                  
                  4'd03:                   begin
                     if (mac_GreaterThan_32Sx2S_1U_4_22_out1) begin
                     end
                     else begin
                        s_reg_2 <= mac_Add_16Ux1U_16U_4_21_out1;
                     end
                  end
                  
                  4'd08:                   begin
                     if (input_ready_channel_valid && !mac_GreaterThan_32Sx2S_1U_4_35_out1) begin
                        s_reg_2 <= mac_Add_16Ux1U_16U_4_21_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_3
            if (rst == 1'b0) begin
               s_reg_3 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd04:                   begin
                     s_reg_3 <= mac_Add_32Ux32U_32U_4_26_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_4
            if (rst == 1'b0) begin
               s_reg_4 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01:                   begin
                     s_reg_4 <= conf_info_mac_n;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_5
            if (rst == 1'b0) begin
               s_reg_5 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd00, 4'd01:                   begin
                     s_reg_5 <= mac_Sub_32Sx1U_32S_4_17_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_6
            if (rst == 1'b0) begin
               s_reg_6 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd02:                   begin
                     s_reg_6 <= mac_Add_32Sx1U_32S_4_20_out1;
                  end
                  
                  4'd03:                   begin
                     if (mac_GreaterThan_32Sx2S_1U_4_22_out1) begin
                        s_reg_6 <= mac_Sub_32Sx13U_32S_4_25_out1;
                     end
                     else begin
                        s_reg_6 <= mac_Add_32Sx1U_32S_4_20_out1;
                     end
                  end
                  
                  4'd08:                   begin
                     if (input_ready_channel_valid) begin
                        if (mac_GreaterThan_32Sx2S_1U_4_35_out1) begin
                           s_reg_6 <= mac_Sub_32Sx13U_32S_4_25_out1;
                        end
                        else begin
                           s_reg_6 <= mac_Add_32Sx1U_32S_4_20_out1;
                        end
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i0c
         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_s_reg_8
            if (rst == 1'b0) begin
               s_reg_8 <= 1'b0;
            end
            else begin
               case (global_state) 

                  4'd03:                   begin
                     s_reg_8 <= s_reg_1;
                  end
                  
                  4'd08:                   begin
                     if (input_ready_channel_valid) begin
                        s_reg_8 <= mac_Not_1U_1U_4_36_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_9
            if (rst == 1'b0) begin
               s_reg_9 <= 32'd0000000000;
            end
            else begin
               case (global_state) 

                  4'd03, 4'd08:                   begin
                     s_reg_9 <= s_reg_3;
                  end
                  
               endcase

            end
         end

         // resource: mac_Mul_32Ux32U_32U_4  instance: mac_Mul_32Ux32U_32U_4_16
         assign mac_Mul_32Ux32U_32U_4_16_out1 = conf_info_mac_len*conf_info_mac_vec;

         // resource: mac_Sub_32Sx1U_32S_4  instance: mac_Sub_32Sx1U_32S_4_17
         assign mac_Sub_32Sx1U_32S_4_17_out1 = mac_Mul_32Ux32U_32U_4_16_out1 - 32'd0000000001;

         // resource: mac_LessThan_2Sx32S_1U_4  instance: mac_LessThan_2Sx32S_1U_4_18
         assign mac_LessThan_2Sx32S_1U_4_18_out1 = s_reg_4[31] ^ 32'd0000000000 < s_reg_4;

         // resource: mac_Or_32Sx1U_32S_4  instance: mac_Or_32Sx1U_32S_4_19
         assign mac_Or_32Sx1U_32S_4_19_out1 = s_reg_5 | 32'd0000000001;

         // resource: mac_Add_32Sx1U_32S_4  instance: mac_Add_32Sx1U_32S_4_20
         assign mac_Add_32Sx1U_32S_4_20_out1 = mac_Or_32Sx1U_32S_4_19_out1 + 32'd0000000001;

         // resource: mac_Add_16Ux1U_16U_4  instance: mac_Add_16Ux1U_16U_4_21
         assign mac_Add_16Ux1U_16U_4_21_out1 = s_reg_2 + 16'd00001;

         // resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_22
         assign mac_GreaterThan_32Sx2S_1U_4_22_out1 = s_reg_6[31] ^ s_reg_6 > 32'd0000000000;

         // resource: mac_GreaterThan_32Sx14S_1U_4  instance: mac_GreaterThan_32Sx14S_1U_4_23
         assign mac_GreaterThan_32Sx14S_1U_4_23_out1 = s_reg_6[31] ^ s_reg_6 > 32'd0000006400;

         // resource: mac_N_Mux_32_2_2_4
         always @(s_reg_6 or mac_GreaterThan_32Sx14S_1U_4_23_out1)
          begin :mac_N_Mux_32_2_2_4_24
            if (mac_GreaterThan_32Sx14S_1U_4_23_out1) begin
               mac_N_Mux_32_2_2_4_24_out1 = 32'd0000006400;
            end
            else begin
               mac_N_Mux_32_2_2_4_24_out1 = s_reg_6;
            end
         end

         // resource: mac_Sub_32Sx13U_32S_4  instance: mac_Sub_32Sx13U_32S_4_25
         assign mac_Sub_32Sx13U_32S_4_25_out1 = s_reg_6 - 32'd0000006400;

         // resource: mac_Add_32Ux32U_32U_4  instance: mac_Add_32Ux32U_32U_4_26
         assign mac_Add_32Ux32U_32U_4_26_out1 = s_reg_9 + s_reg_10;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_27
         assign mac_Not_1U_1U_4_27_out1 = !s_reg_8;

         // resource: mux_16bx2i1c
         always @(s_reg_14 or gs_ctrl0)
          begin :drive_mac_Add_16Ux2U_16U_4_28_in2
            if (gs_ctrl0) begin
               mac_Add_16Ux2U_16U_4_28_in2 = s_reg_14;
            end
            else begin
               mac_Add_16Ux2U_16U_4_28_in2 = 16'd00000;
            end
         end

         // resource: mac_Add_16Ux2U_16U_4  instance: mac_Add_16Ux2U_16U_4_28
         assign mac_Add_16Ux2U_16U_4_28_out1 = mac_Add_16Ux2U_16U_4_28_in2 + 16'd00002;

         // resource: mac_N_MuxB_64_2_1_4
         always @(dma_read_chnl_ready or dma_read_chnl_data or dma_read_chnl_data_buf)
          begin :mac_N_MuxB_64_2_1_4_29
            if (dma_read_chnl_ready) begin
               mac_N_MuxB_64_2_1_4_29_out1 = dma_read_chnl_data;
            end
            else begin
               mac_N_MuxB_64_2_1_4_29_out1 = dma_read_chnl_data_buf;
            end
         end

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_30
         assign mac_Not_1U_1U_4_30_out1 = !dma_read_chnl_set_ready_curr;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_31
         assign mac_Not_1U_1U_4_31_out1 = !s_reg_8;

         // resource: mac_LessThan_16Ux32U_1U_4  instance: mac_LessThan_16Ux32U_1U_4_32
         assign mac_LessThan_16Ux32U_1U_4_32_out1 = {16'b0000000000000000, s_reg_14} < s_reg_10;

         // resource: mac_Add_13Ux1U_13U_4  instance: mac_Add_13Ux1U_13U_4_33
         assign mac_Add_13Ux1U_13U_4_33_out1 = s_reg_13[12:0] + 13'd0001;

         // resource: mac_Add_13Ux1U_13U_4  instance: mac_Add_13Ux1U_13U_4_34
         assign mac_Add_13Ux1U_13U_4_34_out1 = s_reg_13[12:0] + 13'd0001;

         // instance: drive_plm_in_pong_load_input_A1
         assign plm_in_pong_load_input_A1 = s_reg_13[12:0];

         // instance: drive_plm_in_pong_load_input_D1
         assign plm_in_pong_load_input_D1 = s_reg_15[31:0];

         // resource: mux_1bx2i2c
         always @(s_reg_12 or gs_ctrl1)
          begin :drive_plm_in_pong_load_input_WE1
            if (gs_ctrl1) begin
               if (s_reg_12) begin
                  plm_in_pong_load_input_WE1 = 1'd1;
               end
               else begin
                  plm_in_pong_load_input_WE1 = 1'd0;
               end
            end
            else begin
               plm_in_pong_load_input_WE1 = 1'd0;
            end
         end

         // resource: mux_1bx2i1c
         always @(s_reg_12 or gs_ctrl2)
          begin :drive_plm_in_pong_load_input_CE1
            if (gs_ctrl2) begin
               if (s_reg_12) begin
                  plm_in_pong_load_input_CE1 = s_reg_12;
               end
               else begin
                  plm_in_pong_load_input_CE1 = 1'd0;
               end
            end
            else begin
               plm_in_pong_load_input_CE1 = 1'd0;
            end
         end

         // resource: mux_32bx2i2c
         always @(s_reg_12 or gs_ctrl3)
          begin :drive_plm_in_pong_load_input_WEM1
            if (gs_ctrl3) begin
               if (s_reg_12) begin
                  plm_in_pong_load_input_WEM1 = 32'd4294967295;
               end
               else begin
                  plm_in_pong_load_input_WEM1 = 32'd4294967295;
               end
            end
            else begin
               plm_in_pong_load_input_WEM1 = 32'd4294967295;
            end
         end

         // instance: drive_plm_in_ping_load_input_A1
         assign plm_in_ping_load_input_A1 = s_reg_13[12:0];

         // instance: drive_plm_in_ping_load_input_D1
         assign plm_in_ping_load_input_D1 = s_reg_15[31:0];

         // resource: mux_1bx2i2c
         always @(s_reg_8 or gs_ctrl4)
          begin :drive_plm_in_ping_load_input_WE1
            if (gs_ctrl4) begin
               if (s_reg_8) begin
                  plm_in_ping_load_input_WE1 = 1'd1;
               end
               else begin
                  plm_in_ping_load_input_WE1 = 1'd0;
               end
            end
            else begin
               plm_in_ping_load_input_WE1 = 1'd0;
            end
         end

         // resource: mux_1bx2i1c
         always @(s_reg_8 or gs_ctrl5)
          begin :drive_plm_in_ping_load_input_CE1
            if (gs_ctrl5) begin
               if (s_reg_8) begin
                  plm_in_ping_load_input_CE1 = s_reg_8;
               end
               else begin
                  plm_in_ping_load_input_CE1 = 1'd0;
               end
            end
            else begin
               plm_in_ping_load_input_CE1 = 1'd0;
            end
         end

         // resource: mux_32bx2i2c
         always @(s_reg_8 or gs_ctrl6)
          begin :drive_plm_in_ping_load_input_WEM1
            if (gs_ctrl6) begin
               if (s_reg_8) begin
                  plm_in_ping_load_input_WEM1 = 32'd4294967295;
               end
               else begin
                  plm_in_ping_load_input_WEM1 = 32'd4294967295;
               end
            end
            else begin
               plm_in_ping_load_input_WEM1 = 32'd4294967295;
            end
         end

         // instance: drive_plm_in_pong_load_input_A0
         assign plm_in_pong_load_input_A0 = mac_Add_13Ux1U_13U_4_33_out1;

         // instance: drive_plm_in_pong_load_input_D0
         assign plm_in_pong_load_input_D0 = s_reg_15[63:32];

         // resource: mux_1bx2i2c
         always @(s_reg_12 or mac_Not_1U_1U_4_31_out1 or gs_ctrl7)
          begin :drive_plm_in_pong_load_input_WE0
            if (gs_ctrl7) begin
               if (s_reg_12 && mac_Not_1U_1U_4_31_out1) begin
                  plm_in_pong_load_input_WE0 = 1'd1;
               end
               else begin
                  plm_in_pong_load_input_WE0 = 1'd0;
               end
            end
            else begin
               plm_in_pong_load_input_WE0 = 1'd0;
            end
         end

         // resource: mux_1bx2i2c
         always @(s_reg_12 or mac_Not_1U_1U_4_31_out1 or gs_ctrl8)
          begin :drive_plm_in_pong_load_input_CE0
            if (gs_ctrl8) begin
               if (s_reg_12 && mac_Not_1U_1U_4_31_out1) begin
                  plm_in_pong_load_input_CE0 = 1'd1;
               end
               else begin
                  plm_in_pong_load_input_CE0 = 1'd0;
               end
            end
            else begin
               plm_in_pong_load_input_CE0 = 1'd0;
            end
         end

         // resource: mux_32bx2i2c
         always @(s_reg_12 or mac_Not_1U_1U_4_31_out1 or gs_ctrl9)
          begin :drive_plm_in_pong_load_input_WEM0
            if (gs_ctrl9) begin
               if (s_reg_12 && mac_Not_1U_1U_4_31_out1) begin
                  plm_in_pong_load_input_WEM0 = 32'd4294967295;
               end
               else begin
                  plm_in_pong_load_input_WEM0 = 32'd4294967295;
               end
            end
            else begin
               plm_in_pong_load_input_WEM0 = 32'd4294967295;
            end
         end

         // instance: drive_plm_in_ping_load_input_A0
         assign plm_in_ping_load_input_A0 = mac_Add_13Ux1U_13U_4_34_out1;

         // instance: drive_plm_in_ping_load_input_D0
         assign plm_in_ping_load_input_D0 = s_reg_15[63:32];

         // resource: mux_1bx2i2c
         always @(s_reg_8 or gs_ctrl10)
          begin :drive_plm_in_ping_load_input_WE0
            if (gs_ctrl10) begin
               if (s_reg_8) begin
                  plm_in_ping_load_input_WE0 = 1'd1;
               end
               else begin
                  plm_in_ping_load_input_WE0 = 1'd0;
               end
            end
            else begin
               plm_in_ping_load_input_WE0 = 1'd0;
            end
         end

         // resource: mux_1bx2i2c
         always @(s_reg_8 or gs_ctrl11)
          begin :drive_plm_in_ping_load_input_CE0
            if (gs_ctrl11) begin
               if (s_reg_8) begin
                  plm_in_ping_load_input_CE0 = 1'd1;
               end
               else begin
                  plm_in_ping_load_input_CE0 = 1'd0;
               end
            end
            else begin
               plm_in_ping_load_input_CE0 = 1'd0;
            end
         end

         // resource: mux_32bx2i2c
         always @(s_reg_8 or gs_ctrl12)
          begin :drive_plm_in_ping_load_input_WEM0
            if (gs_ctrl12) begin
               if (s_reg_8) begin
                  plm_in_ping_load_input_WEM0 = 32'd4294967295;
               end
               else begin
                  plm_in_ping_load_input_WEM0 = 32'd4294967295;
               end
            end
            else begin
               plm_in_ping_load_input_WEM0 = 32'd4294967295;
            end
         end

         // resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_35
         assign mac_GreaterThan_32Sx2S_1U_4_35_out1 = s_reg_6[31] ^ s_reg_6 > 32'd0000000000;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_36
         assign mac_Not_1U_1U_4_36_out1 = !s_reg_8;

         // resource: mac_LessThan_17Sx32S_1U_4  instance: mac_LessThan_17Sx32S_1U_4_37
         assign mac_LessThan_17Sx32S_1U_4_37_out1 = s_reg_4[31] ^ {16'b0000000000000000, s_reg_2} < s_reg_4;

         // resource: regr_ac_4
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               global_state <= 4'd00;
            end
            else begin
               global_state <= global_state_next;
            end
         end

         // resource: mux_4bx10i9c
         always @(dma_read_ctrl_ready or cfg_done or input_ready_channel_valid or mac_Or_1Ux1U_1U_4_15_out1 or s_reg_10 or mac_LessThan_2Sx32S_1U_4_18_out1 or mac_GreaterThan_32Sx2S_1U_4_22_out1 or mac_LessThan_16Ux32U_1U_4_32_out1 or mac_GreaterThan_32Sx2S_1U_4_35_out1 or mac_LessThan_17Sx32S_1U_4_37_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               4'd00, 4'd01:                begin
                  if (cfg_done) begin
                     global_state_next = 4'd02;
                  end
                  else begin
                     global_state_next = 4'd01;
                  end
               end
               
               4'd02:                begin
                  if (mac_LessThan_2Sx32S_1U_4_18_out1) begin
                     global_state_next = global_state + 4'd01;
                  end
                  else begin
                     global_state_next = 4'd09;
                  end
               end
               
               4'd03:                begin
                  if (mac_GreaterThan_32Sx2S_1U_4_22_out1) begin
                     global_state_next = global_state + 4'd01;
                  end
                  else begin
                     if (mac_LessThan_17Sx32S_1U_4_37_out1) begin
                        global_state_next = 4'd03;
                     end
                     else begin
                        global_state_next = 4'd09;
                     end
                  end
               end
               
               4'd05:                begin
                  if (dma_read_ctrl_ready) begin
                     case (s_reg_10) 

                        32'd0000000000:                         begin
                           global_state_next = 4'd08;
                        end
                        
                        default:                         begin
                           if (mac_Or_1Ux1U_1U_4_15_out1) begin
                              global_state_next = 4'd07;
                           end
                           else begin
                              global_state_next = global_state + 4'd01;
                           end
                        end
                        
                     endcase

                  end
                  else begin
                     global_state_next = 4'd05;
                  end
               end
               
               4'd06:                begin
                  if (mac_Or_1Ux1U_1U_4_15_out1) begin
                     global_state_next = global_state + 4'd01;
                  end
                  else begin
                     global_state_next = 4'd06;
                  end
               end
               
               4'd07:                begin
                  if (mac_LessThan_16Ux32U_1U_4_32_out1) begin
                     if (mac_Or_1Ux1U_1U_4_15_out1) begin
                        global_state_next = 4'd07;
                     end
                     else begin
                        global_state_next = 4'd06;
                     end
                  end
                  else begin
                     global_state_next = global_state + 4'd01;
                  end
               end
               
               4'd08:                begin
                  if (input_ready_channel_valid) begin
                     if (mac_GreaterThan_32Sx2S_1U_4_35_out1) begin
                        global_state_next = 4'd04;
                     end
                     else begin
                        if (mac_LessThan_17Sx32S_1U_4_37_out1) begin
                           global_state_next = 4'd03;
                        end
                        else begin
                           global_state_next = global_state + 4'd01;
                        end
                     end
                  end
                  else begin
                     global_state_next = 4'd08;
                  end
               end
               
               4'd09:                begin
                  global_state_next = 4'd09;
               end
               
               default:                begin
                  global_state_next = global_state + 4'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl0 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl0 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl1
            if (rst == 1'b0) begin
               gs_ctrl1 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl1 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl1 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl2
            if (rst == 1'b0) begin
               gs_ctrl2 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl2 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl2 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl3
            if (rst == 1'b0) begin
               gs_ctrl3 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl3 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl3 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl4
            if (rst == 1'b0) begin
               gs_ctrl4 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl4 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl4 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl5
            if (rst == 1'b0) begin
               gs_ctrl5 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl5 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl5 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl6
            if (rst == 1'b0) begin
               gs_ctrl6 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl6 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl6 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl7
            if (rst == 1'b0) begin
               gs_ctrl7 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl7 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl7 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl8
            if (rst == 1'b0) begin
               gs_ctrl8 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl8 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl8 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl9
            if (rst == 1'b0) begin
               gs_ctrl9 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl9 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl9 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl10
            if (rst == 1'b0) begin
               gs_ctrl10 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl10 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl10 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl11
            if (rst == 1'b0) begin
               gs_ctrl11 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl11 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl11 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl12
            if (rst == 1'b0) begin
               gs_ctrl12 <= 1'b0;
            end
            else begin
               case (global_state_next) 

                  4'd07:                   begin
                     gs_ctrl12 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl12 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_input_ready_channel_valid
            if (rst == 1'b0) begin
               input_ready_channel_valid <= 1'd0;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01:                   begin
                     if (cfg_done && (mac_LessThan_2Sx32S_1U_4_72_out1 && mac_GreaterThan_32Sx2S_1U_4_74_out1)) begin
                        input_ready_channel_valid <= 1'd1;
                     end
                  end
                  
                  4'd02:                   begin
                     if (input_ready_channel_ready) begin
                        if (32'd0000000000 == s_reg_47 && mac_GreaterThan_32Sx2S_1U_4_97_out1) begin
                           input_ready_channel_valid <= 1'd1;
                        end
                        else begin
                           input_ready_channel_valid <= 1'd0;
                        end
                     end
                  end
                  
                  4'd06:                   begin
                     if (!mac_LessThan_32Ux32U_1U_4_93_out1 && mac_GreaterThan_32Sx2S_1U_4_97_out1) begin
                        input_ready_channel_valid <= 1'd1;
                     end
                  end
                  
                  4'd07:                   begin
                     if (output_ready_channel_valid && (mac_LessThan_17Sx32S_1U_4_99_out1 && mac_GreaterThan_32Sx2S_1U_4_74_out1)) begin
                        input_ready_channel_valid <= 1'd1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_output_ready_channel_ready
            if (rst == 1'b0) begin
               output_ready_channel_ready <= 1'd0;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01:                   begin
                     if (cfg_done && (mac_LessThan_2Sx32S_1U_4_72_out1 && !mac_GreaterThan_32Sx2S_1U_4_74_out1)) begin
                        output_ready_channel_ready <= 1'd1;
                     end
                  end
                  
                  4'd02:                   begin
                     if (input_ready_channel_ready && (32'd0000000000 == s_reg_47 && !mac_GreaterThan_32Sx2S_1U_4_97_out1)) begin
                        output_ready_channel_ready <= 1'd1;
                     end
                  end
                  
                  4'd06:                   begin
                     if (!mac_LessThan_32Ux32U_1U_4_93_out1 && !mac_GreaterThan_32Sx2S_1U_4_97_out1) begin
                        output_ready_channel_ready <= 1'd1;
                     end
                  end
                  
                  4'd07:                   begin
                     if (output_ready_channel_valid) begin
                        if (mac_LessThan_17Sx32S_1U_4_99_out1 && !mac_GreaterThan_32Sx2S_1U_4_74_out1) begin
                           output_ready_channel_ready <= 1'd1;
                        end
                        else begin
                           output_ready_channel_ready <= 1'd0;
                        end
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_as_1
         always @(posedge clk)
          begin :drive_s_reg_36
            if (rst == 1'b0) begin
               s_reg_36 <= 1'b1;
            end
            else begin
               case (global_state1) 

                  4'd02, 4'd06:                   begin
                     s_reg_36 <= s_reg_43;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_16
         always @(posedge clk)
          begin :drive_s_reg_37
            if (rst == 1'b0) begin
               s_reg_37 <= 16'd00000;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01:                   begin
                     if (cfg_done) begin
                        s_reg_37 <= mac_Add_16Ux1U_16U_4_75_out1;
                     end
                  end
                  
                  4'd07:                   begin
                     if (output_ready_channel_valid) begin
                        s_reg_37 <= mac_Add_16Ux1U_16U_4_75_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_38
            if (rst == 1'b0) begin
               s_reg_38 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01:                   begin
                     s_reg_38 <= conf_info_mac_len;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_39
            if (rst == 1'b0) begin
               s_reg_39 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01:                   begin
                     s_reg_39 <= conf_info_mac_vec;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_40
            if (rst == 1'b0) begin
               s_reg_40 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01:                   begin
                     s_reg_40 <= conf_info_mac_n;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i1c
         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_s_reg_41
            if (rst == 1'b0) begin
               s_reg_41 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01:                   begin
                     s_reg_41 <= 1'b1;
                  end
                  
                  4'd07:                   begin
                     if (output_ready_channel_valid) begin
                        s_reg_41 <= mac_Not_1U_1U_4_98_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i0c
         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_s_reg_43
            if (rst == 1'b0) begin
               s_reg_43 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01, 4'd07:                   begin
                     s_reg_43 <= s_reg_36;
                  end
                  
                  4'd04:                   begin
                     s_reg_43 <= mac_Not_1U_1U_4_87_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i1c
         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_44
            if (rst == 1'b0) begin
               s_reg_44 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01, 4'd07:                   begin
                     s_reg_44 <= 32'd0000000000;
                  end
                  
                  4'd06:                   begin
                     s_reg_44 <= mac_N_Mux_32_2_3_4_94_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_7bx2i1c
         // resource: regr_en_ac_7
         always @(posedge clk)
          begin :drive_s_reg_45
            if (rst == 1'b0) begin
               s_reg_45 <= 7'd000;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01, 4'd07:                   begin
                     s_reg_45 <= 7'd000;
                  end
                  
                  4'd06:                   begin
                     s_reg_45 <= mac_Add_13Ux1U_13U_4_95_out1[6:0];
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i1c
         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_46
            if (rst == 1'b0) begin
               s_reg_46 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01, 4'd07:                   begin
                     s_reg_46 <= 32'd0000000000;
                  end
                  
                  4'd06:                   begin
                     s_reg_46 <= mac_N_Mux_32_2_3_4_96_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_47
            if (rst == 1'b0) begin
               s_reg_47 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01, 4'd07:                   begin
                     s_reg_47 <= mac_N_Mux_32_2_2_4_77_out1;
                  end
                  
                  4'd02:                   begin
                     if (input_ready_channel_ready) begin
                        if (32'd0000000000 == s_reg_47) begin
                           s_reg_47 <= mac_N_Mux_32_2_2_4_77_out1;
                        end
                     end
                  end
                  
                  4'd06:                   begin
                     if (mac_LessThan_32Ux32U_1U_4_93_out1) begin
                     end
                     else begin
                        s_reg_47 <= mac_N_Mux_32_2_2_4_77_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_48
            if (rst == 1'b0) begin
               s_reg_48 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  4'd00, 4'd01, 4'd07:                   begin
                     s_reg_48 <= mac_Sub_32Sx13U_32S_4_78_out1;
                  end
                  
                  4'd02:                   begin
                     if (input_ready_channel_ready) begin
                        if (32'd0000000000 == s_reg_47) begin
                           s_reg_48 <= mac_Sub_32Sx13U_32S_4_78_out1;
                        end
                     end
                  end
                  
                  4'd06:                   begin
                     if (mac_LessThan_32Ux32U_1U_4_93_out1) begin
                     end
                     else begin
                        s_reg_48 <= mac_Sub_32Sx13U_32S_4_78_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_s_reg_49
            if (rst == 1'b0) begin
               s_reg_49 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  4'd02:                   begin
                     if (32'd0000000000 != s_reg_47) begin
                        s_reg_49 <= s_reg_43;
                     end
                  end
                  
                  4'd06:                   begin
                     s_reg_49 <= s_reg_43;
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i1c
         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_50
            if (rst == 1'b0) begin
               s_reg_50 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  4'd02:                   begin
                     if (32'd0000000000 != s_reg_47) begin
                        s_reg_50 <= 32'd0000000000;
                     end
                  end
                  
                  4'd06:                   begin
                     s_reg_50 <= s_reg_60;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_51
            if (rst == 1'b0) begin
               s_reg_51 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  4'd02:                   begin
                     if (32'd0000000000 != s_reg_47) begin
                        s_reg_51 <= mac_Add_32Ux2U_32U_4_79_out1;
                     end
                  end
                  
                  4'd06:                   begin
                     s_reg_51 <= mac_Add_32Ux2U_32U_4_79_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_s_reg_52
            if (rst == 1'b0) begin
               s_reg_52 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  4'd02:                   begin
                     if (32'd0000000000 != s_reg_47) begin
                        s_reg_52 <= mac_Not_1U_1U_4_80_out1;
                     end
                  end
                  
                  4'd06:                   begin
                     s_reg_52 <= mac_Not_1U_1U_4_80_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_s_reg_55
            if (rst == 1'b0) begin
               s_reg_55 <= 1'b0;
            end
            else begin
               s_reg_55 <= mac_Not_1U_1U_4_83_out1;
            end
         end

         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_s_reg_56
            if (rst == 1'b0) begin
               s_reg_56 <= 1'b0;
            end
            else begin
               case (global_state1) 

                  4'd03:                   begin
                     s_reg_56 <= mac_Equal_32Ux32U_1U_4_84_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_57
            if (rst == 1'b0) begin
               s_reg_57 <= 32'd0000000000;
            end
            else begin
               case (global_state1) 

                  4'd03:                   begin
                     s_reg_57 <= mac_N_Mux_32_2_2_4_85_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_s_reg_58
            if (rst == 1'b0) begin
               s_reg_58 <= 1'b0;
            end
            else begin
               s_reg_58 <= mac_And_1Ux1U_1U_4_86_out1;
            end
         end

         // resource: regr_ac_32
         always @(posedge clk)
          begin :drive_s_reg_60
            if (rst == 1'b0) begin
               s_reg_60 <= 32'd0000000000;
            end
            else begin
               s_reg_60 <= mac_Add_32Sx2U_32S_4_89_out1;
            end
         end

         // resource: regr_ac_32
         always @(posedge clk)
          begin :drive_s_reg_61
            if (rst == 1'b0) begin
               s_reg_61 <= 32'd0000000000;
            end
            else begin
               s_reg_61 <= mac_Add_32Ux32U_32U_4_92_out1;
            end
         end

         // resource: mac_LessThan_2Sx32S_1U_4  instance: mac_LessThan_2Sx32S_1U_4_72
         assign mac_LessThan_2Sx32S_1U_4_72_out1 = conf_info_mac_n[31] ^ 32'd0000000000 < conf_info_mac_n;

         // resource: mux_32bx2i0c
         always @(conf_info_mac_len or s_reg_38 or gs_ctrl13)
          begin :drive_mac_Mul_32Ux32U_32U_4_73_in2
            if (gs_ctrl13) begin
               /* state16 */
               mac_Mul_32Ux32U_32U_4_73_in2 = s_reg_38;
            end
            else begin
               /* state14 */
               mac_Mul_32Ux32U_32U_4_73_in2 = conf_info_mac_len;
            end
         end

         // resource: mux_32bx2i0c
         always @(conf_info_mac_vec or s_reg_39 or gs_ctrl14)
          begin :drive_mac_Mul_32Ux32U_32U_4_73_in1
            if (gs_ctrl14) begin
               mac_Mul_32Ux32U_32U_4_73_in1 = s_reg_39;
            end
            else begin
               mac_Mul_32Ux32U_32U_4_73_in1 = conf_info_mac_vec;
            end
         end

         // resource: mac_Mul_32Ux32U_32U_4  instance: mac_Mul_32Ux32U_32U_4_73
         assign mac_Mul_32Ux32U_32U_4_73_out1 = mac_Mul_32Ux32U_32U_4_73_in2*mac_Mul_32Ux32U_32U_4_73_in1;

         // resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_74
         assign mac_GreaterThan_32Sx2S_1U_4_74_out1 = mac_Mul_32Ux32U_32U_4_73_out1[31] ^ mac_Mul_32Ux32U_32U_4_73_out1 > 32'd0000000000;

         // resource: mac_Add_16Ux1U_16U_4  instance: mac_Add_16Ux1U_16U_4_75
         assign mac_Add_16Ux1U_16U_4_75_out1 = s_reg_37 + 16'd00001;

         // resource: mux_32bx2i0c
         always @(s_reg_48 or mac_Mul_32Ux32U_32U_4_73_out1 or gs_ctrl15)
          begin :drive_mac_GreaterThan_32Sx14S_1U_4_76_in2
            if (gs_ctrl15) begin
               /* state25 */
               mac_GreaterThan_32Sx14S_1U_4_76_in2 = s_reg_48;
            end
            else begin
               /* state27 */
               mac_GreaterThan_32Sx14S_1U_4_76_in2 = mac_Mul_32Ux32U_32U_4_73_out1;
            end
         end

         // resource: mac_GreaterThan_32Sx14S_1U_4  instance: mac_GreaterThan_32Sx14S_1U_4_76
         assign mac_GreaterThan_32Sx14S_1U_4_76_out1 = mac_GreaterThan_32Sx14S_1U_4_76_in2[31] ^ mac_GreaterThan_32Sx14S_1U_4_76_in2 > 32'd0000006400;

         // resource: mux_32bx2i0c
         always @(s_reg_48 or mac_Mul_32Ux32U_32U_4_73_out1 or gs_ctrl16)
          begin :drive_mac_N_Mux_32_2_2_4_77_in3
            if (gs_ctrl16) begin
               mac_N_Mux_32_2_2_4_77_in3 = s_reg_48;
            end
            else begin
               mac_N_Mux_32_2_2_4_77_in3 = mac_Mul_32Ux32U_32U_4_73_out1;
            end
         end

         // resource: mac_N_Mux_32_2_2_4
         always @(mac_GreaterThan_32Sx14S_1U_4_76_out1 or mac_N_Mux_32_2_2_4_77_in3)
          begin :mac_N_Mux_32_2_2_4_77
            if (mac_GreaterThan_32Sx14S_1U_4_76_out1) begin
               mac_N_Mux_32_2_2_4_77_out1 = 32'd0000006400;
            end
            else begin
               mac_N_Mux_32_2_2_4_77_out1 = mac_N_Mux_32_2_2_4_77_in3;
            end
         end

         // resource: mux_32bx2i0c
         always @(s_reg_48 or mac_Mul_32Ux32U_32U_4_73_out1 or gs_ctrl17)
          begin :drive_mac_Sub_32Sx13U_32S_4_78_in2
            if (gs_ctrl17) begin
               mac_Sub_32Sx13U_32S_4_78_in2 = s_reg_48;
            end
            else begin
               mac_Sub_32Sx13U_32S_4_78_in2 = mac_Mul_32Ux32U_32U_4_73_out1;
            end
         end

         // resource: mac_Sub_32Sx13U_32S_4  instance: mac_Sub_32Sx13U_32S_4_78
         assign mac_Sub_32Sx13U_32S_4_78_out1 = mac_Sub_32Sx13U_32S_4_78_in2 - 32'd0000006400;

         // resource: mux_32bx2i0c
         always @(s_reg_44 or mac_N_Mux_32_2_3_4_94_out1 or gs_ctrl18)
          begin :drive_mac_Add_32Ux2U_32U_4_79_in2
            if (gs_ctrl18) begin
               /* state45 */
               mac_Add_32Ux2U_32U_4_79_in2 = mac_N_Mux_32_2_3_4_94_out1;
            end
            else begin
               /* state46 */
               mac_Add_32Ux2U_32U_4_79_in2 = s_reg_44;
            end
         end

         // resource: mac_Add_32Ux2U_32U_4  instance: mac_Add_32Ux2U_32U_4_79
         assign mac_Add_32Ux2U_32U_4_79_out1 = mac_Add_32Ux2U_32U_4_79_in2 + 32'd0000000002;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_80
         assign mac_Not_1U_1U_4_80_out1 = !s_reg_43;

         // resource: mux_13bx2i1c
         always @(s_reg_60[12:0] or gs_ctrl19)
          begin :drive_mac_Add_13Sx1U_13S_4_81_in2
            if (gs_ctrl19) begin
               mac_Add_13Sx1U_13S_4_81_in2 = s_reg_60[12:0];
            end
            else begin
               mac_Add_13Sx1U_13S_4_81_in2 = 13'd0000;
            end
         end

         // resource: mac_Add_13Sx1U_13S_4  instance: mac_Add_13Sx1U_13S_4_81
         assign mac_Add_13Sx1U_13S_4_81_out1 = mac_Add_13Sx1U_13S_4_81_in2 + 13'd0001;

         // resource: mux_13bx2i1c
         always @(s_reg_60[12:0] or gs_ctrl20)
          begin :drive_mac_Add_13Sx1U_13S_4_82_in2
            if (gs_ctrl20) begin
               mac_Add_13Sx1U_13S_4_82_in2 = s_reg_60[12:0];
            end
            else begin
               mac_Add_13Sx1U_13S_4_82_in2 = 13'd0000;
            end
         end

         // resource: mac_Add_13Sx1U_13S_4  instance: mac_Add_13Sx1U_13S_4_82
         assign mac_Add_13Sx1U_13S_4_82_out1 = mac_Add_13Sx1U_13S_4_82_in2 + 13'd0001;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_83
         assign mac_Not_1U_1U_4_83_out1 = !s_reg_41;

         // resource: mac_Equal_32Ux32U_1U_4  instance: mac_Equal_32Ux32U_1U_4_84
         assign mac_Equal_32Ux32U_1U_4_84_out1 = s_reg_51 == s_reg_38;

         // resource: mux_13bx2i0c
         always @(s_reg_50[12:0] or mac_Add_13Sx1U_13S_4_81_out1 or gs_ctrl21)
          begin :drive_plm_in_ping_compute_kernel_A2
            if (gs_ctrl21) begin
               plm_in_ping_compute_kernel_A2 = s_reg_50[12:0];
            end
            else begin
               plm_in_ping_compute_kernel_A2 = mac_Add_13Sx1U_13S_4_81_out1;
            end
         end

         // resource: mux_1bx3i1c
         always @(input_ready_channel_ready or s_reg_43 or s_reg_47 or s_reg_49 or mac_LessThan_32Ux32U_1U_4_93_out1 or gs_ctrl22)
          begin :drive_plm_in_ping_compute_kernel_CE2
            case (gs_ctrl22) 

               2'd1:                begin
                  if (input_ready_channel_ready && (32'd0000000000 != s_reg_47 && s_reg_43)) begin
                     plm_in_ping_compute_kernel_CE2 = s_reg_43;
                  end
                  else begin
                     plm_in_ping_compute_kernel_CE2 = 1'd0;
                  end
               end
               
               2'd2:                begin
                  if (s_reg_49) begin
                     plm_in_ping_compute_kernel_CE2 = s_reg_49;
                  end
                  else begin
                     plm_in_ping_compute_kernel_CE2 = 1'd0;
                  end
               end
               
               2'd3:                begin
                  if (mac_LessThan_32Ux32U_1U_4_93_out1 && s_reg_43) begin
                     plm_in_ping_compute_kernel_CE2 = s_reg_43;
                  end
                  else begin
                     plm_in_ping_compute_kernel_CE2 = 1'd0;
                  end
               end
               
               default:                begin
                  plm_in_ping_compute_kernel_CE2 = 1'd0;
               end
               
            endcase

         end

         // resource: mux_13bx2i0c
         always @(s_reg_50[12:0] or mac_Add_13Sx1U_13S_4_82_out1 or gs_ctrl23)
          begin :drive_plm_in_pong_compute_kernel_A2
            if (gs_ctrl23) begin
               plm_in_pong_compute_kernel_A2 = s_reg_50[12:0];
            end
            else begin
               plm_in_pong_compute_kernel_A2 = mac_Add_13Sx1U_13S_4_82_out1;
            end
         end

         // resource: mux_1bx3i1c
         always @(input_ready_channel_ready or s_reg_47 or s_reg_52 or mac_Not_1U_1U_4_80_out1 or mac_LessThan_32Ux32U_1U_4_93_out1 or gs_ctrl24)
          begin :drive_plm_in_pong_compute_kernel_CE2
            case (gs_ctrl24) 

               2'd1:                begin
                  if (input_ready_channel_ready && (32'd0000000000 != s_reg_47 && mac_Not_1U_1U_4_80_out1)) begin
                     plm_in_pong_compute_kernel_CE2 = mac_Not_1U_1U_4_80_out1;
                  end
                  else begin
                     plm_in_pong_compute_kernel_CE2 = 1'd0;
                  end
               end
               
               2'd2:                begin
                  if (s_reg_52) begin
                     plm_in_pong_compute_kernel_CE2 = s_reg_52;
                  end
                  else begin
                     plm_in_pong_compute_kernel_CE2 = 1'd0;
                  end
               end
               
               2'd3:                begin
                  if (mac_LessThan_32Ux32U_1U_4_93_out1 && mac_Not_1U_1U_4_80_out1) begin
                     plm_in_pong_compute_kernel_CE2 = mac_Not_1U_1U_4_80_out1;
                  end
                  else begin
                     plm_in_pong_compute_kernel_CE2 = 1'd0;
                  end
               end
               
               default:                begin
                  plm_in_pong_compute_kernel_CE2 = 1'd0;
               end
               
            endcase

         end

         // resource: mac_N_Mux_32_2_2_4
         always @(s_reg_49 or plm_in_ping_compute_kernel_Q2 or plm_in_pong_compute_kernel_Q2)
          begin :mac_N_Mux_32_2_2_4_85
            if (s_reg_49) begin
               mac_N_Mux_32_2_2_4_85_out1 = plm_in_ping_compute_kernel_Q2;
            end
            else begin
               mac_N_Mux_32_2_2_4_85_out1 = plm_in_pong_compute_kernel_Q2;
            end
         end

         // resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_86
         assign mac_And_1Ux1U_1U_4_86_out1 = s_reg_55 & s_reg_56;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_87
         assign mac_Not_1U_1U_4_87_out1 = !s_reg_49;

         // resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_88
         assign mac_And_1Ux1U_1U_4_88_out1 = s_reg_56 & s_reg_41;

         // resource: mac_Add_32Sx2U_32S_4  instance: mac_Add_32Sx2U_32S_4_89
         assign mac_Add_32Sx2U_32S_4_89_out1 = s_reg_50 + 32'd0000000002;

         // resource: mac_N_Mux_32_2_2_4
         always @(s_reg_49 or plm_in_ping_compute_kernel_Q2 or plm_in_pong_compute_kernel_Q2)
          begin :mac_N_Mux_32_2_2_4_90
            if (s_reg_49) begin
               mac_N_Mux_32_2_2_4_90_out1 = plm_in_ping_compute_kernel_Q2;
            end
            else begin
               mac_N_Mux_32_2_2_4_90_out1 = plm_in_pong_compute_kernel_Q2;
            end
         end

         // resource: mac_Mul_32Ux32U_32U_4  instance: mac_Mul_32Ux32U_32U_4_91
         assign mac_Mul_32Ux32U_32U_4_91_out1 = mac_N_Mux_32_2_2_4_90_out1*s_reg_57;

         // resource: mac_Add_32Ux32U_32U_4  instance: mac_Add_32Ux32U_32U_4_92
         assign mac_Add_32Ux32U_32U_4_92_out1 = mac_Mul_32Ux32U_32U_4_91_out1 + s_reg_46;

         // resource: mac_LessThan_32Ux32U_1U_4  instance: mac_LessThan_32Ux32U_1U_4_93
         assign mac_LessThan_32Ux32U_1U_4_93_out1 = s_reg_60 < s_reg_47;

         // resource: mac_N_Mux_32_2_3_4
         always @(s_reg_51 or s_reg_56)
          begin :mac_N_Mux_32_2_3_4_94
            if (s_reg_56) begin
               mac_N_Mux_32_2_3_4_94_out1 = 32'd0000000000;
            end
            else begin
               mac_N_Mux_32_2_3_4_94_out1 = s_reg_51;
            end
         end

         // resource: mac_Add_13Ux1U_13U_4  instance: mac_Add_13Ux1U_13U_4_95
         assign mac_Add_13Ux1U_13U_4_95_out1 = {6'b000000, s_reg_45} + {12'b000000000000, s_reg_56};

         // resource: mac_N_Mux_32_2_3_4
         always @(s_reg_56 or s_reg_61)
          begin :mac_N_Mux_32_2_3_4_96
            if (s_reg_56) begin
               mac_N_Mux_32_2_3_4_96_out1 = 32'd0000000000;
            end
            else begin
               mac_N_Mux_32_2_3_4_96_out1 = s_reg_61;
            end
         end

         // instance: drive_plm_out_pong_compute_kernel_A0
         assign plm_out_pong_compute_kernel_A0 = s_reg_45;

         // instance: drive_plm_out_pong_compute_kernel_D0
         assign plm_out_pong_compute_kernel_D0 = mac_Add_32Ux32U_32U_4_92_out1;

         // resource: mux_1bx2i2c
         always @(s_reg_58 or gs_ctrl25)
          begin :drive_plm_out_pong_compute_kernel_WE0
            if (gs_ctrl25) begin
               if (s_reg_58) begin
                  plm_out_pong_compute_kernel_WE0 = 1'd1;
               end
               else begin
                  plm_out_pong_compute_kernel_WE0 = 1'd0;
               end
            end
            else begin
               plm_out_pong_compute_kernel_WE0 = 1'd0;
            end
         end

         // resource: mux_1bx2i1c
         always @(s_reg_58 or gs_ctrl26)
          begin :drive_plm_out_pong_compute_kernel_CE0
            if (gs_ctrl26) begin
               if (s_reg_58) begin
                  plm_out_pong_compute_kernel_CE0 = s_reg_58;
               end
               else begin
                  plm_out_pong_compute_kernel_CE0 = 1'd0;
               end
            end
            else begin
               plm_out_pong_compute_kernel_CE0 = 1'd0;
            end
         end

         // resource: mux_32bx2i2c
         always @(s_reg_58 or gs_ctrl27)
          begin :drive_plm_out_pong_compute_kernel_WEM0
            if (gs_ctrl27) begin
               if (s_reg_58) begin
                  plm_out_pong_compute_kernel_WEM0 = 32'd4294967295;
               end
               else begin
                  plm_out_pong_compute_kernel_WEM0 = 32'd4294967295;
               end
            end
            else begin
               plm_out_pong_compute_kernel_WEM0 = 32'd4294967295;
            end
         end

         // instance: drive_plm_out_ping_compute_kernel_A0
         assign plm_out_ping_compute_kernel_A0 = s_reg_45;

         // instance: drive_plm_out_ping_compute_kernel_D0
         assign plm_out_ping_compute_kernel_D0 = mac_Add_32Ux32U_32U_4_92_out1;

         // resource: mux_1bx2i2c
         always @(mac_And_1Ux1U_1U_4_88_out1 or gs_ctrl28)
          begin :drive_plm_out_ping_compute_kernel_WE0
            if (gs_ctrl28) begin
               if (mac_And_1Ux1U_1U_4_88_out1) begin
                  plm_out_ping_compute_kernel_WE0 = 1'd1;
               end
               else begin
                  plm_out_ping_compute_kernel_WE0 = 1'd0;
               end
            end
            else begin
               plm_out_ping_compute_kernel_WE0 = 1'd0;
            end
         end

         // resource: mux_1bx2i1c
         always @(mac_And_1Ux1U_1U_4_88_out1 or gs_ctrl29)
          begin :drive_plm_out_ping_compute_kernel_CE0
            if (gs_ctrl29) begin
               if (mac_And_1Ux1U_1U_4_88_out1) begin
                  plm_out_ping_compute_kernel_CE0 = mac_And_1Ux1U_1U_4_88_out1;
               end
               else begin
                  plm_out_ping_compute_kernel_CE0 = 1'd0;
               end
            end
            else begin
               plm_out_ping_compute_kernel_CE0 = 1'd0;
            end
         end

         // resource: mux_32bx2i2c
         always @(mac_And_1Ux1U_1U_4_88_out1 or gs_ctrl30)
          begin :drive_plm_out_ping_compute_kernel_WEM0
            if (gs_ctrl30) begin
               if (mac_And_1Ux1U_1U_4_88_out1) begin
                  plm_out_ping_compute_kernel_WEM0 = 32'd4294967295;
               end
               else begin
                  plm_out_ping_compute_kernel_WEM0 = 32'd4294967295;
               end
            end
            else begin
               plm_out_ping_compute_kernel_WEM0 = 32'd4294967295;
            end
         end

         // resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_97
         assign mac_GreaterThan_32Sx2S_1U_4_97_out1 = s_reg_48[31] ^ s_reg_48 > 32'd0000000000;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_98
         assign mac_Not_1U_1U_4_98_out1 = !s_reg_41;

         // resource: mac_LessThan_17Sx32S_1U_4  instance: mac_LessThan_17Sx32S_1U_4_99
         assign mac_LessThan_17Sx32S_1U_4_99_out1 = s_reg_40[31] ^ {16'b0000000000000000, s_reg_37} < s_reg_40;

         // resource: regr_ac_4
         always @(posedge clk)
          begin :drive_global_state1
            if (rst == 1'b0) begin
               global_state1 <= 4'd00;
            end
            else begin
               global_state1 <= global_state1_next;
            end
         end

         // resource: mux_4bx6i5c
         always @(cfg_done or input_ready_channel_ready or output_ready_channel_valid or s_reg_47 or mac_LessThan_2Sx32S_1U_4_72_out1 or mac_GreaterThan_32Sx2S_1U_4_74_out1 or mac_LessThan_32Ux32U_1U_4_93_out1 or mac_GreaterThan_32Sx2S_1U_4_97_out1 or mac_LessThan_17Sx32S_1U_4_99_out1 or global_state1)
          begin :drive_global_state1_next
            case (global_state1) 

               4'd00, 4'd01:                begin
                  if (cfg_done) begin
                     if (mac_LessThan_2Sx32S_1U_4_72_out1) begin
                        if (mac_GreaterThan_32Sx2S_1U_4_74_out1) begin
                           global_state1_next = 4'd02;
                        end
                        else begin
                           global_state1_next = 4'd07;
                        end
                     end
                     else begin
                        global_state1_next = 4'd08;
                     end
                  end
                  else begin
                     global_state1_next = 4'd01;
                  end
               end
               
               4'd02:                begin
                  if (input_ready_channel_ready) begin
                     /* state42 */
                     case (s_reg_47) 

                        32'd0000000000:                         begin
                           if (mac_GreaterThan_32Sx2S_1U_4_97_out1) begin
                              global_state1_next = 4'd02;
                           end
                           else begin
                              global_state1_next = 4'd07;
                           end
                        end
                        
                        default:                         begin
                           global_state1_next = global_state1 + 4'd01;
                        end
                        
                     endcase

                  end
                  else begin
                     global_state1_next = 4'd02;
                  end
               end
               
               4'd06:                begin
                  if (mac_LessThan_32Ux32U_1U_4_93_out1) begin
                     global_state1_next = 4'd03;
                  end
                  else begin
                     if (mac_GreaterThan_32Sx2S_1U_4_97_out1) begin
                        global_state1_next = 4'd02;
                     end
                     else begin
                        global_state1_next = global_state1 + 4'd01;
                     end
                  end
               end
               
               4'd07:                begin
                  if (output_ready_channel_valid) begin
                     if (mac_LessThan_17Sx32S_1U_4_99_out1) begin
                        if (mac_GreaterThan_32Sx2S_1U_4_74_out1) begin
                           global_state1_next = 4'd02;
                        end
                        else begin
                           global_state1_next = 4'd07;
                        end
                     end
                     else begin
                        global_state1_next = global_state1 + 4'd01;
                     end
                  end
                  else begin
                     global_state1_next = 4'd07;
                  end
               end
               
               4'd08:                begin
                  global_state1_next = 4'd08;
               end
               
               default:                begin
                  global_state1_next = global_state1 + 4'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl13
            if (rst == 1'b0) begin
               gs_ctrl13 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd07:                   begin
                     gs_ctrl13 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl13 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl14
            if (rst == 1'b0) begin
               gs_ctrl14 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd07:                   begin
                     gs_ctrl14 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl14 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl15
            if (rst == 1'b0) begin
               gs_ctrl15 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd02, 4'd06:                   begin
                     gs_ctrl15 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl15 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl16
            if (rst == 1'b0) begin
               gs_ctrl16 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd02, 4'd06:                   begin
                     gs_ctrl16 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl16 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl17
            if (rst == 1'b0) begin
               gs_ctrl17 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd02, 4'd06:                   begin
                     gs_ctrl17 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl17 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl18
            if (rst == 1'b0) begin
               gs_ctrl18 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd06:                   begin
                     gs_ctrl18 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl18 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl19
            if (rst == 1'b0) begin
               gs_ctrl19 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd06:                   begin
                     gs_ctrl19 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl19 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl20
            if (rst == 1'b0) begin
               gs_ctrl20 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd06:                   begin
                     gs_ctrl20 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl20 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl21
            if (rst == 1'b0) begin
               gs_ctrl21 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd04:                   begin
                     gs_ctrl21 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl21 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_ac_2
         always @(posedge clk)
          begin :drive_gs_ctrl22
            if (rst == 1'b0) begin
               gs_ctrl22 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  4'd02:                   begin
                     gs_ctrl22 <= 2'd1;
                  end
                  
                  4'd04:                   begin
                     gs_ctrl22 <= 2'd2;
                  end
                  
                  4'd06:                   begin
                     gs_ctrl22 <= 2'd3;
                  end
                  
                  default:                   begin
                     gs_ctrl22 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl23
            if (rst == 1'b0) begin
               gs_ctrl23 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd04:                   begin
                     gs_ctrl23 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl23 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx4i4c
         // resource: regr_ac_2
         always @(posedge clk)
          begin :drive_gs_ctrl24
            if (rst == 1'b0) begin
               gs_ctrl24 <= 2'd0;
            end
            else begin
               case (global_state1_next) 

                  4'd02:                   begin
                     gs_ctrl24 <= 2'd1;
                  end
                  
                  4'd04:                   begin
                     gs_ctrl24 <= 2'd2;
                  end
                  
                  4'd06:                   begin
                     gs_ctrl24 <= 2'd3;
                  end
                  
                  default:                   begin
                     gs_ctrl24 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl25
            if (rst == 1'b0) begin
               gs_ctrl25 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd05:                   begin
                     gs_ctrl25 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl25 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl26
            if (rst == 1'b0) begin
               gs_ctrl26 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd05:                   begin
                     gs_ctrl26 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl26 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl27
            if (rst == 1'b0) begin
               gs_ctrl27 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd05:                   begin
                     gs_ctrl27 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl27 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl28
            if (rst == 1'b0) begin
               gs_ctrl28 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd05:                   begin
                     gs_ctrl28 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl28 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl29
            if (rst == 1'b0) begin
               gs_ctrl29 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd05:                   begin
                     gs_ctrl29 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl29 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl30
            if (rst == 1'b0) begin
               gs_ctrl30 <= 1'b0;
            end
            else begin
               case (global_state1_next) 

                  4'd05:                   begin
                     gs_ctrl30 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl30 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_64bx2i0c
         // resource: regr_en_ac_64
         always @(posedge clk)
          begin :drive_dma_write_chnl_data
            if (rst == 1'b0) begin
               dma_write_chnl_data <= 64'd00000000000000000000;
            end
            else begin
               case (global_state2) 

                  4'd07:                   begin
                     if (mac_Or_1Ux1U_1U_4_46_out1) begin
                        dma_write_chnl_data <= mac_N_MuxB_64_2_1_4_67_out1;
                     end
                  end
                  
                  4'd08:                   begin
                     if (mac_Or_1Ux1U_1U_4_46_out1) begin
                        dma_write_chnl_data <= s_reg_34;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_dma_write_ctrl_data_size_slice
            if (rst == 1'b0) begin
               dma_write_ctrl_data_size_slice <= 1'b0;
            end
            else begin
               case (global_state2) 

                  4'd05:                   begin
                     if (output_ready_channel_ready) begin
                        dma_write_ctrl_data_size_slice <= 1'b1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_31
         always @(posedge clk)
          begin :drive_dma_write_ctrl_data_length_slice
            if (rst == 1'b0) begin
               dma_write_ctrl_data_length_slice <= 31'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd05:                   begin
                     if (output_ready_channel_ready) begin
                        dma_write_ctrl_data_length_slice <= s_reg_27[31:1];
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_31
         always @(posedge clk)
          begin :drive_dma_write_ctrl_data_index_slice
            if (rst == 1'b0) begin
               dma_write_ctrl_data_index_slice <= 31'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd05:                   begin
                     if (output_ready_channel_ready) begin
                        dma_write_ctrl_data_index_slice <= s_reg_28;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_dma_write_ctrl_valid
            if (rst == 1'b0) begin
               dma_write_ctrl_valid <= 1'd0;
            end
            else begin
               case (global_state2) 

                  4'd05:                   begin
                     if (output_ready_channel_ready) begin
                        dma_write_ctrl_valid <= 1'd1;
                     end
                  end
                  
                  4'd06:                   begin
                     if (dma_write_ctrl_ready) begin
                        dma_write_ctrl_valid <= 1'd0;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_acc_done
            if (rst == 1'b0) begin
               acc_done <= 1'd0;
            end
            else begin
               case (global_state2) 

                  4'd03:                   begin
                     if (mac_LessThan_2Sx32S_1U_4_52_out1) begin
                     end
                     else begin
                        acc_done <= 1'd1;
                     end
                  end
                  
                  4'd04:                   begin
                     if (!mac_GreaterThan_32Sx2S_1U_4_57_out1 && !mac_LessThan_17Sx32S_1U_4_71_out1) begin
                        acc_done <= 1'd1;
                     end
                  end
                  
                  4'd06:                   begin
                     if (dma_write_ctrl_ready && (32'd0000000000 == s_reg_27 && (!mac_GreaterThan_32Sx2S_1U_4_70_out1 && !mac_LessThan_17Sx32S_1U_4_71_out1))) begin
                        acc_done <= 1'd1;
                     end
                  end
                  
                  4'd07, 4'd08:                   begin
                     if (mac_Or_1Ux1U_1U_4_46_out1 && (!mac_LessThan_16Ux32U_1U_4_68_out1 && (!mac_GreaterThan_32Sx2S_1U_4_70_out1 && !mac_LessThan_17Sx32S_1U_4_71_out1))) begin
                        acc_done <= 1'd1;
                     end
                  end
                  
                  4'd09:                   begin
                     acc_done <= 1'd0;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_dma_write_chnl_set_valid_curr
            if (rst == 1'b0) begin
               dma_write_chnl_set_valid_curr <= 1'd0;
            end
            else begin
               case (global_state2) 

                  4'd07, 4'd08:                   begin
                     if (mac_Or_1Ux1U_1U_4_46_out1) begin
                        dma_write_chnl_set_valid_curr <= mac_Not_1U_1U_4_69_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_output_ready_channel_valid
            if (rst == 1'b0) begin
               output_ready_channel_valid <= 1'd0;
            end
            else begin
               case (global_state2) 

                  4'd04:                   begin
                     if (mac_GreaterThan_32Sx2S_1U_4_57_out1) begin
                        output_ready_channel_valid <= 1'd1;
                     end
                  end
                  
                  4'd05:                   begin
                     if (output_ready_channel_ready) begin
                        output_ready_channel_valid <= 1'd0;
                     end
                  end
                  
                  4'd06:                   begin
                     if (dma_write_ctrl_ready && (32'd0000000000 == s_reg_27 && mac_GreaterThan_32Sx2S_1U_4_70_out1)) begin
                        output_ready_channel_valid <= 1'd1;
                     end
                  end
                  
                  4'd07, 4'd08:                   begin
                     if (mac_Or_1Ux1U_1U_4_46_out1 && (!mac_LessThan_16Ux32U_1U_4_68_out1 && mac_GreaterThan_32Sx2S_1U_4_70_out1)) begin
                        output_ready_channel_valid <= 1'd1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_16
         always @(posedge clk)
          begin :drive_s_reg_16
            if (rst == 1'b0) begin
               s_reg_16 <= 16'd00000;
            end
            else begin
               case (global_state2) 

                  4'd03:                   begin
                     s_reg_16 <= mac_Add_16Ux1U_16U_4_56_out1;
                  end
                  
                  4'd04:                   begin
                     if (mac_GreaterThan_32Sx2S_1U_4_57_out1) begin
                     end
                     else begin
                        s_reg_16 <= mac_Add_16Ux1U_16U_4_56_out1;
                     end
                  end
                  
                  4'd06:                   begin
                     if (dma_write_ctrl_ready && (32'd0000000000 == s_reg_27 && !mac_GreaterThan_32Sx2S_1U_4_70_out1)) begin
                        s_reg_16 <= mac_Add_16Ux1U_16U_4_56_out1;
                     end
                  end
                  
                  4'd07, 4'd08:                   begin
                     if (mac_Or_1Ux1U_1U_4_46_out1 && (!mac_LessThan_16Ux32U_1U_4_68_out1 && !mac_GreaterThan_32Sx2S_1U_4_70_out1)) begin
                        s_reg_16 <= mac_Add_16Ux1U_16U_4_56_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_as_1
         always @(posedge clk)
          begin :drive_s_reg_17
            if (rst == 1'b0) begin
               s_reg_17 <= 1'b1;
            end
            else begin
               case (global_state2) 

                  4'd05:                   begin
                     s_reg_17 <= mac_Not_1U_1U_4_61_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_18
            if (rst == 1'b0) begin
               s_reg_18 <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd00, 4'd01:                   begin
                     s_reg_18 <= conf_info_mac_n;
                  end
                  
               endcase

            end
         end

         // resource: regr_ac_32
         always @(posedge clk)
          begin :drive_s_reg_19
            if (rst == 1'b0) begin
               s_reg_19 <= 32'd0000000000;
            end
            else begin
               s_reg_19 <= conf_info_mac_vec;
            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_20
            if (rst == 1'b0) begin
               s_reg_20 <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd00, 4'd01:                   begin
                     s_reg_20 <= mac_Add_32Sx1U_32S_4_50_out1;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_21
            if (rst == 1'b0) begin
               s_reg_21 <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd02:                   begin
                     s_reg_21 <= mac_Sub_32Sx1U_32S_4_51_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_22
            if (rst == 1'b0) begin
               s_reg_22 <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd03:                   begin
                     s_reg_22 <= mac_Mul_32Ux32U_32U_4_53_out1;
                  end
                  
                  4'd05:                   begin
                     s_reg_22 <= mac_Add_32Ux32U_32U_4_62_out1;
                  end
                  
               endcase

            end
         end

         // resource: mux_32bx2i0c
         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_23
            if (rst == 1'b0) begin
               s_reg_23 <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd03:                   begin
                     s_reg_23 <= mac_Add_32Sx1U_32S_4_55_out1;
                  end
                  
                  4'd04:                   begin
                     if (mac_GreaterThan_32Sx2S_1U_4_57_out1) begin
                        s_reg_23 <= mac_Sub_32Sx7U_32S_4_60_out1;
                     end
                     else begin
                        s_reg_23 <= mac_Add_32Sx1U_32S_4_55_out1;
                     end
                  end
                  
                  4'd06:                   begin
                     if (dma_write_ctrl_ready && 32'd0000000000 == s_reg_27) begin
                        if (mac_GreaterThan_32Sx2S_1U_4_70_out1) begin
                           s_reg_23 <= mac_Sub_32Sx7U_32S_4_60_out1;
                        end
                        else begin
                           s_reg_23 <= mac_Add_32Sx1U_32S_4_55_out1;
                        end
                     end
                  end
                  
                  4'd07, 4'd08:                   begin
                     if (mac_Or_1Ux1U_1U_4_46_out1 && !mac_LessThan_16Ux32U_1U_4_68_out1) begin
                        if (mac_GreaterThan_32Sx2S_1U_4_70_out1) begin
                           s_reg_23 <= mac_Sub_32Sx7U_32S_4_60_out1;
                        end
                        else begin
                           s_reg_23 <= mac_Add_32Sx1U_32S_4_55_out1;
                        end
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_s_reg_25
            if (rst == 1'b0) begin
               s_reg_25 <= 1'b0;
            end
            else begin
               case (global_state2) 

                  4'd04:                   begin
                     s_reg_25 <= s_reg_17;
                  end
                  
                  4'd06:                   begin
                     if (dma_write_ctrl_ready && 32'd0000000000 == s_reg_27) begin
                        s_reg_25 <= s_reg_17;
                     end
                  end
                  
                  4'd07, 4'd08:                   begin
                     if (mac_Or_1Ux1U_1U_4_46_out1 && !mac_LessThan_16Ux32U_1U_4_68_out1) begin
                        s_reg_25 <= s_reg_17;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_26
            if (rst == 1'b0) begin
               s_reg_26 <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd04, 4'd06, 4'd07, 4'd08:                   begin
                     s_reg_26 <= s_reg_22;
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_32
         always @(posedge clk)
          begin :drive_s_reg_27
            if (rst == 1'b0) begin
               s_reg_27 <= 32'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd04:                   begin
                     s_reg_27 <= mac_N_Mux_32_2_4_4_59_out1;
                  end
                  
                  4'd06:                   begin
                     if (dma_write_ctrl_ready && 32'd0000000000 == s_reg_27) begin
                        s_reg_27 <= mac_N_Mux_32_2_4_4_59_out1;
                     end
                  end
                  
                  4'd07, 4'd08:                   begin
                     if (mac_Or_1Ux1U_1U_4_46_out1 && !mac_LessThan_16Ux32U_1U_4_68_out1) begin
                        s_reg_27 <= mac_N_Mux_32_2_4_4_59_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_31
         always @(posedge clk)
          begin :drive_s_reg_28
            if (rst == 1'b0) begin
               s_reg_28 <= 31'd0000000000;
            end
            else begin
               case (global_state2) 

                  4'd04, 4'd06, 4'd07, 4'd08:                   begin
                     s_reg_28 <= s_reg_22[31:1];
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_16
         always @(posedge clk)
          begin :drive_s_reg_31
            if (rst == 1'b0) begin
               s_reg_31 <= 16'd00000;
            end
            else begin
               case (global_state2) 

                  4'd06:                   begin
                     if (32'd0000000000 != s_reg_27) begin
                        s_reg_31 <= mac_Add_16Ux2U_16U_4_64_out1;
                     end
                  end
                  
                  4'd07, 4'd08:                   begin
                     if (mac_Or_1Ux1U_1U_4_46_out1) begin
                        s_reg_31 <= mac_Add_16Ux2U_16U_4_64_out1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_en_ac_64
         always @(posedge clk)
          begin :drive_s_reg_34
            if (rst == 1'b0) begin
               s_reg_34 <= 64'd00000000000000000000;
            end
            else begin
               case (global_state2) 

                  4'd07:                   begin
                     s_reg_34 <= mac_N_MuxB_64_2_1_4_67_out1;
                  end
                  
               endcase

            end
         end

         // resource: mac_Mul_32Ux32U_32U_4  instance: mac_Mul_32Ux32U_32U_4_47
         assign mac_Mul_32Ux32U_32U_4_47_out1 = conf_info_mac_len*conf_info_mac_vec;

         // resource: mac_Sub_32Sx1U_32S_4  instance: mac_Sub_32Sx1U_32S_4_48
         assign mac_Sub_32Sx1U_32S_4_48_out1 = mac_Mul_32Ux32U_32U_4_47_out1 - 32'd0000000001;

         // resource: mac_Or_32Sx1U_32S_4  instance: mac_Or_32Sx1U_32S_4_49
         assign mac_Or_32Sx1U_32S_4_49_out1 = mac_Sub_32Sx1U_32S_4_48_out1 | 32'd0000000001;

         // resource: mac_Add_32Sx1U_32S_4  instance: mac_Add_32Sx1U_32S_4_50
         assign mac_Add_32Sx1U_32S_4_50_out1 = mac_Or_32Sx1U_32S_4_49_out1 + 32'd0000000001;

         // resource: mac_Sub_32Sx1U_32S_4  instance: mac_Sub_32Sx1U_32S_4_51
         assign mac_Sub_32Sx1U_32S_4_51_out1 = s_reg_19 - 32'd0000000001;

         // resource: mac_LessThan_2Sx32S_1U_4  instance: mac_LessThan_2Sx32S_1U_4_52
         assign mac_LessThan_2Sx32S_1U_4_52_out1 = s_reg_18[31] ^ 32'd0000000000 < s_reg_18;

         // resource: mac_Mul_32Ux32U_32U_4  instance: mac_Mul_32Ux32U_32U_4_53
         assign mac_Mul_32Ux32U_32U_4_53_out1 = s_reg_20*s_reg_18;

         // resource: mac_Or_32Sx1U_32S_4  instance: mac_Or_32Sx1U_32S_4_54
         assign mac_Or_32Sx1U_32S_4_54_out1 = s_reg_21 | 32'd0000000001;

         // resource: mac_Add_32Sx1U_32S_4  instance: mac_Add_32Sx1U_32S_4_55
         assign mac_Add_32Sx1U_32S_4_55_out1 = mac_Or_32Sx1U_32S_4_54_out1 + 32'd0000000001;

         // resource: mac_Add_16Ux1U_16U_4  instance: mac_Add_16Ux1U_16U_4_56
         assign mac_Add_16Ux1U_16U_4_56_out1 = s_reg_16 + 16'd00001;

         // resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_57
         assign mac_GreaterThan_32Sx2S_1U_4_57_out1 = s_reg_23[31] ^ s_reg_23 > 32'd0000000000;

         // resource: mac_GreaterThan_32Sx8S_1U_4  instance: mac_GreaterThan_32Sx8S_1U_4_58
         assign mac_GreaterThan_32Sx8S_1U_4_58_out1 = s_reg_23[31] ^ s_reg_23 > 32'd0000000100;

         // resource: mac_N_Mux_32_2_4_4
         always @(s_reg_23 or mac_GreaterThan_32Sx8S_1U_4_58_out1)
          begin :mac_N_Mux_32_2_4_4_59
            if (mac_GreaterThan_32Sx8S_1U_4_58_out1) begin
               mac_N_Mux_32_2_4_4_59_out1 = 32'd0000000100;
            end
            else begin
               mac_N_Mux_32_2_4_4_59_out1 = s_reg_23;
            end
         end

         // resource: mac_Sub_32Sx7U_32S_4  instance: mac_Sub_32Sx7U_32S_4_60
         assign mac_Sub_32Sx7U_32S_4_60_out1 = s_reg_23 - 32'd0000000100;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_61
         assign mac_Not_1U_1U_4_61_out1 = !s_reg_25;

         // resource: mac_Add_32Ux32U_32U_4  instance: mac_Add_32Ux32U_32U_4_62
         assign mac_Add_32Ux32U_32U_4_62_out1 = s_reg_26 + s_reg_27;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_63
         assign mac_Not_1U_1U_4_63_out1 = !s_reg_25;

         // resource: mux_16bx2i1c
         always @(s_reg_31 or gs_ctrl31)
          begin :drive_mac_Add_16Ux2U_16U_4_64_in2
            if (gs_ctrl31) begin
               mac_Add_16Ux2U_16U_4_64_in2 = s_reg_31;
            end
            else begin
               mac_Add_16Ux2U_16U_4_64_in2 = 16'd00000;
            end
         end

         // resource: mac_Add_16Ux2U_16U_4  instance: mac_Add_16Ux2U_16U_4_64
         assign mac_Add_16Ux2U_16U_4_64_out1 = mac_Add_16Ux2U_16U_4_64_in2 + 16'd00002;

         // resource: mux_7bx2i1c
         always @(s_reg_31[6:0] or gs_ctrl32)
          begin :drive_mac_Add_13Ux1U_13U_4_65_in2_slice
            if (gs_ctrl32) begin
               mac_Add_13Ux1U_13U_4_65_in2_slice = s_reg_31[6:0];
            end
            else begin
               mac_Add_13Ux1U_13U_4_65_in2_slice = 7'd000;
            end
         end

         // resource: mac_Add_13Ux1U_13U_4  instance: mac_Add_13Ux1U_13U_4_65
         assign mac_Add_13Ux1U_13U_4_65_out1 = {6'd00, mac_Add_13Ux1U_13U_4_65_in2_slice} + 13'd0001;

         // resource: mux_7bx2i1c
         always @(s_reg_31[6:0] or gs_ctrl33)
          begin :drive_mac_Add_13Ux1U_13U_4_66_in2_slice
            if (gs_ctrl33) begin
               mac_Add_13Ux1U_13U_4_66_in2_slice = s_reg_31[6:0];
            end
            else begin
               mac_Add_13Ux1U_13U_4_66_in2_slice = 7'd000;
            end
         end

         // resource: mac_Add_13Ux1U_13U_4  instance: mac_Add_13Ux1U_13U_4_66
         assign mac_Add_13Ux1U_13U_4_66_out1 = {6'd00, mac_Add_13Ux1U_13U_4_66_in2_slice} + 13'd0001;

         // resource: mux_7bx2i1c
         always @(s_reg_31[6:0] or gs_ctrl34)
          begin :drive_plm_out_ping_store_output_A2
            if (gs_ctrl34) begin
               plm_out_ping_store_output_A2 = s_reg_31[6:0];
            end
            else begin
               plm_out_ping_store_output_A2 = 7'd000;
            end
         end

         // resource: mux_1bx2i1c
         always @(dma_write_ctrl_ready or mac_Or_1Ux1U_1U_4_46_out1 or s_reg_25 or s_reg_27 or mac_LessThan_16Ux32U_1U_4_68_out1 or gs_ctrl35)
          begin :drive_plm_out_ping_store_output_CE2
            case (gs_ctrl35) 

               2'd1:                begin
                  if (dma_write_ctrl_ready && (32'd0000000000 != s_reg_27 && s_reg_25)) begin
                     plm_out_ping_store_output_CE2 = s_reg_25;
                  end
                  else begin
                     plm_out_ping_store_output_CE2 = 1'd0;
                  end
               end
               
               2'd2:                begin
                  if (mac_Or_1Ux1U_1U_4_46_out1 && (mac_LessThan_16Ux32U_1U_4_68_out1 && s_reg_25)) begin
                     plm_out_ping_store_output_CE2 = s_reg_25;
                  end
                  else begin
                     plm_out_ping_store_output_CE2 = 1'd0;
                  end
               end
               
               default:                begin
                  plm_out_ping_store_output_CE2 = 1'd0;
               end
               
            endcase

         end

         // instance: drive_plm_out_ping_store_output_A1
         assign plm_out_ping_store_output_A1 = mac_Add_13Ux1U_13U_4_65_out1[6:0];

         // resource: mux_1bx2i1c
         always @(dma_write_ctrl_ready or mac_Or_1Ux1U_1U_4_46_out1 or s_reg_25 or s_reg_27 or mac_LessThan_16Ux32U_1U_4_68_out1 or gs_ctrl36)
          begin :drive_plm_out_ping_store_output_CE1
            case (gs_ctrl36) 

               2'd1:                begin
                  if (dma_write_ctrl_ready && (32'd0000000000 != s_reg_27 && s_reg_25)) begin
                     plm_out_ping_store_output_CE1 = s_reg_25;
                  end
                  else begin
                     plm_out_ping_store_output_CE1 = 1'd0;
                  end
               end
               
               2'd2:                begin
                  if (mac_Or_1Ux1U_1U_4_46_out1 && (mac_LessThan_16Ux32U_1U_4_68_out1 && s_reg_25)) begin
                     plm_out_ping_store_output_CE1 = s_reg_25;
                  end
                  else begin
                     plm_out_ping_store_output_CE1 = 1'd0;
                  end
               end
               
               default:                begin
                  plm_out_ping_store_output_CE1 = 1'd0;
               end
               
            endcase

         end

         // resource: mux_7bx2i1c
         always @(s_reg_31[6:0] or gs_ctrl37)
          begin :drive_plm_out_pong_store_output_A2
            if (gs_ctrl37) begin
               plm_out_pong_store_output_A2 = s_reg_31[6:0];
            end
            else begin
               plm_out_pong_store_output_A2 = 7'd000;
            end
         end

         // resource: mux_1bx2i1c
         always @(dma_write_ctrl_ready or mac_Or_1Ux1U_1U_4_46_out1 or s_reg_27 or mac_Not_1U_1U_4_63_out1 or mac_LessThan_16Ux32U_1U_4_68_out1 or gs_ctrl38)
          begin :drive_plm_out_pong_store_output_CE2
            case (gs_ctrl38) 

               2'd1:                begin
                  if (dma_write_ctrl_ready && (32'd0000000000 != s_reg_27 && mac_Not_1U_1U_4_63_out1)) begin
                     plm_out_pong_store_output_CE2 = mac_Not_1U_1U_4_63_out1;
                  end
                  else begin
                     plm_out_pong_store_output_CE2 = 1'd0;
                  end
               end
               
               2'd2:                begin
                  if (mac_Or_1Ux1U_1U_4_46_out1 && (mac_LessThan_16Ux32U_1U_4_68_out1 && mac_Not_1U_1U_4_63_out1)) begin
                     plm_out_pong_store_output_CE2 = mac_Not_1U_1U_4_63_out1;
                  end
                  else begin
                     plm_out_pong_store_output_CE2 = 1'd0;
                  end
               end
               
               default:                begin
                  plm_out_pong_store_output_CE2 = 1'd0;
               end
               
            endcase

         end

         // instance: drive_plm_out_pong_store_output_A1
         assign plm_out_pong_store_output_A1 = mac_Add_13Ux1U_13U_4_66_out1[6:0];

         // resource: mux_1bx2i1c
         always @(dma_write_ctrl_ready or mac_Or_1Ux1U_1U_4_46_out1 or s_reg_27 or mac_Not_1U_1U_4_63_out1 or mac_LessThan_16Ux32U_1U_4_68_out1 or gs_ctrl39)
          begin :drive_plm_out_pong_store_output_CE1
            case (gs_ctrl39) 

               2'd1:                begin
                  if (dma_write_ctrl_ready && (32'd0000000000 != s_reg_27 && mac_Not_1U_1U_4_63_out1)) begin
                     plm_out_pong_store_output_CE1 = mac_Not_1U_1U_4_63_out1;
                  end
                  else begin
                     plm_out_pong_store_output_CE1 = 1'd0;
                  end
               end
               
               2'd2:                begin
                  if (mac_Or_1Ux1U_1U_4_46_out1 && (mac_LessThan_16Ux32U_1U_4_68_out1 && mac_Not_1U_1U_4_63_out1)) begin
                     plm_out_pong_store_output_CE1 = mac_Not_1U_1U_4_63_out1;
                  end
                  else begin
                     plm_out_pong_store_output_CE1 = 1'd0;
                  end
               end
               
               default:                begin
                  plm_out_pong_store_output_CE1 = 1'd0;
               end
               
            endcase

         end

         // instance: drive_mac_N_MuxB_64_2_1_4_67_in3
         assign mac_N_MuxB_64_2_1_4_67_in3 = {plm_out_pong_shared_Q1_wire, plm_out_pong_shared_Q2_wire};

         // instance: drive_mac_N_MuxB_64_2_1_4_67_in2
         assign mac_N_MuxB_64_2_1_4_67_in2 = {plm_out_ping_shared_Q1_wire, plm_out_ping_shared_Q2_wire};

         // resource: mac_N_MuxB_64_2_1_4
         always @(s_reg_25 or mac_N_MuxB_64_2_1_4_67_in3 or mac_N_MuxB_64_2_1_4_67_in2)
          begin :mac_N_MuxB_64_2_1_4_67
            if (s_reg_25) begin
               mac_N_MuxB_64_2_1_4_67_out1 = mac_N_MuxB_64_2_1_4_67_in2;
            end
            else begin
               mac_N_MuxB_64_2_1_4_67_out1 = mac_N_MuxB_64_2_1_4_67_in3;
            end
         end

         // resource: mac_LessThan_16Ux32U_1U_4  instance: mac_LessThan_16Ux32U_1U_4_68
         assign mac_LessThan_16Ux32U_1U_4_68_out1 = {16'b0000000000000000, s_reg_31} < s_reg_27;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_69
         assign mac_Not_1U_1U_4_69_out1 = !dma_write_chnl_set_valid_curr;

         // resource: mac_GreaterThan_32Sx2S_1U_4  instance: mac_GreaterThan_32Sx2S_1U_4_70
         assign mac_GreaterThan_32Sx2S_1U_4_70_out1 = s_reg_23[31] ^ s_reg_23 > 32'd0000000000;

         // resource: mac_LessThan_17Sx32S_1U_4  instance: mac_LessThan_17Sx32S_1U_4_71
         assign mac_LessThan_17Sx32S_1U_4_71_out1 = s_reg_18[31] ^ {16'b0000000000000000, s_reg_16} < s_reg_18;

         // resource: regr_ac_4
         always @(posedge clk)
          begin :drive_global_state2
            if (rst == 1'b0) begin
               global_state2 <= 4'd00;
            end
            else begin
               global_state2 <= global_state2_next;
            end
         end

         // resource: mux_4bx10i9c
         always @(dma_write_ctrl_ready or cfg_done or output_ready_channel_ready or mac_Or_1Ux1U_1U_4_46_out1 or s_reg_27 or mac_LessThan_2Sx32S_1U_4_52_out1 or mac_GreaterThan_32Sx2S_1U_4_57_out1 or mac_LessThan_16Ux32U_1U_4_68_out1 or mac_GreaterThan_32Sx2S_1U_4_70_out1 or mac_LessThan_17Sx32S_1U_4_71_out1 or global_state2)
          begin :drive_global_state2_next
            case (global_state2) 

               4'd00, 4'd01:                begin
                  if (cfg_done) begin
                     global_state2_next = 4'd02;
                  end
                  else begin
                     global_state2_next = 4'd01;
                  end
               end
               
               4'd03:                begin
                  if (mac_LessThan_2Sx32S_1U_4_52_out1) begin
                     global_state2_next = global_state2 + 4'd01;
                  end
                  else begin
                     global_state2_next = 4'd09;
                  end
               end
               
               4'd04:                begin
                  if (mac_GreaterThan_32Sx2S_1U_4_57_out1) begin
                     global_state2_next = global_state2 + 4'd01;
                  end
                  else begin
                     if (mac_LessThan_17Sx32S_1U_4_71_out1) begin
                        global_state2_next = 4'd04;
                     end
                     else begin
                        global_state2_next = 4'd09;
                     end
                  end
               end
               
               4'd05:                begin
                  if (output_ready_channel_ready) begin
                     global_state2_next = global_state2 + 4'd01;
                  end
                  else begin
                     global_state2_next = 4'd05;
                  end
               end
               
               4'd06:                begin
                  if (dma_write_ctrl_ready) begin
                     case (s_reg_27) 

                        32'd0000000000:                         begin
                           if (mac_GreaterThan_32Sx2S_1U_4_70_out1) begin
                              global_state2_next = 4'd05;
                           end
                           else begin
                              if (mac_LessThan_17Sx32S_1U_4_71_out1) begin
                                 global_state2_next = 4'd04;
                              end
                              else begin
                                 global_state2_next = 4'd09;
                              end
                           end
                        end
                        
                        default:                         begin
                           global_state2_next = global_state2 + 4'd01;
                        end
                        
                     endcase

                  end
                  else begin
                     global_state2_next = 4'd06;
                  end
               end
               
               4'd07, 4'd08:                begin
                  if (mac_Or_1Ux1U_1U_4_46_out1) begin
                     if (mac_LessThan_16Ux32U_1U_4_68_out1) begin
                        global_state2_next = 4'd07;
                     end
                     else begin
                        if (mac_GreaterThan_32Sx2S_1U_4_70_out1) begin
                           global_state2_next = 4'd05;
                        end
                        else begin
                           if (mac_LessThan_17Sx32S_1U_4_71_out1) begin
                              global_state2_next = 4'd04;
                           end
                           else begin
                              global_state2_next = 4'd09;
                           end
                        end
                     end
                  end
                  else begin
                     global_state2_next = 4'd08;
                  end
               end
               
               4'd09, 4'd10:                begin
                  global_state2_next = 4'd10;
               end
               
               default:                begin
                  global_state2_next = global_state2 + 4'd01;
               end
               
            endcase

         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl31
            if (rst == 1'b0) begin
               gs_ctrl31 <= 1'b0;
            end
            else begin
               case (global_state2_next) 

                  4'd07, 4'd08:                   begin
                     gs_ctrl31 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl31 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl32
            if (rst == 1'b0) begin
               gs_ctrl32 <= 1'b0;
            end
            else begin
               case (global_state2_next) 

                  4'd07, 4'd08:                   begin
                     gs_ctrl32 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl32 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl33
            if (rst == 1'b0) begin
               gs_ctrl33 <= 1'b0;
            end
            else begin
               case (global_state2_next) 

                  4'd07, 4'd08:                   begin
                     gs_ctrl33 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl33 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl34
            if (rst == 1'b0) begin
               gs_ctrl34 <= 1'b0;
            end
            else begin
               case (global_state2_next) 

                  4'd07, 4'd08:                   begin
                     gs_ctrl34 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl34 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_ac_2
         always @(posedge clk)
          begin :drive_gs_ctrl35
            if (rst == 1'b0) begin
               gs_ctrl35 <= 2'd0;
            end
            else begin
               case (global_state2_next) 

                  4'd06:                   begin
                     gs_ctrl35 <= 2'd1;
                  end
                  
                  4'd07, 4'd08:                   begin
                     gs_ctrl35 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl35 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_ac_2
         always @(posedge clk)
          begin :drive_gs_ctrl36
            if (rst == 1'b0) begin
               gs_ctrl36 <= 2'd0;
            end
            else begin
               case (global_state2_next) 

                  4'd06:                   begin
                     gs_ctrl36 <= 2'd1;
                  end
                  
                  4'd07, 4'd08:                   begin
                     gs_ctrl36 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl36 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_1bx2i2c
         // resource: regr_ac_1
         always @(posedge clk)
          begin :drive_gs_ctrl37
            if (rst == 1'b0) begin
               gs_ctrl37 <= 1'b0;
            end
            else begin
               case (global_state2_next) 

                  4'd07, 4'd08:                   begin
                     gs_ctrl37 <= 1'b1;
                  end
                  
                  default:                   begin
                     gs_ctrl37 <= 1'b0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_ac_2
         always @(posedge clk)
          begin :drive_gs_ctrl38
            if (rst == 1'b0) begin
               gs_ctrl38 <= 2'd0;
            end
            else begin
               case (global_state2_next) 

                  4'd06:                   begin
                     gs_ctrl38 <= 2'd1;
                  end
                  
                  4'd07, 4'd08:                   begin
                     gs_ctrl38 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl38 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: mux_2bx3i3c
         // resource: regr_ac_2
         always @(posedge clk)
          begin :drive_gs_ctrl39
            if (rst == 1'b0) begin
               gs_ctrl39 <= 2'd0;
            end
            else begin
               case (global_state2_next) 

                  4'd06:                   begin
                     gs_ctrl39 <= 2'd1;
                  end
                  
                  4'd07, 4'd08:                   begin
                     gs_ctrl39 <= 2'd2;
                  end
                  
                  default:                   begin
                     gs_ctrl39 <= 2'd0;
                  end
                  
               endcase

            end
         end

         // resource: regr_ac_64
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_data_buf
            if (rst == 1'b0) begin
               dma_read_chnl_data_buf <= 64'd00000000000000000000;
            end
            else begin
               dma_read_chnl_data_buf <= mac_N_MuxB_64_2_1_4_11_out1;
            end
         end

         // resource: regr_ac_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_sync_rcv_set_ready_prev
            if (rst == 1'b0) begin
               dma_read_chnl_sync_rcv_set_ready_prev <= 1'd0;
            end
            else begin
               dma_read_chnl_sync_rcv_set_ready_prev <= dma_read_chnl_set_ready_curr;
            end
         end

         // resource: regr_ac_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_sync_rcv_reset_ready_prev
            if (rst == 1'b0) begin
               dma_read_chnl_sync_rcv_reset_ready_prev <= 1'd0;
            end
            else begin
               dma_read_chnl_sync_rcv_reset_ready_prev <= dma_read_chnl_sync_rcv_reset_ready_curr;
            end
         end

         // resource: regr_ac_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_sync_rcv_reset_ready_curr
            if (rst == 1'b0) begin
               dma_read_chnl_sync_rcv_reset_ready_curr <= 1'd0;
            end
            else begin
               dma_read_chnl_sync_rcv_reset_ready_curr <= mac_N_Muxb_1_2_5_4_10_out1;
            end
         end

         // resource: regr_ac_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_sync_rcv_ready_flop
            if (rst == 1'b0) begin
               dma_read_chnl_sync_rcv_ready_flop <= 1'd0;
            end
            else begin
               dma_read_chnl_sync_rcv_ready_flop <= mac_Or_1Ux1U_1U_4_8_out1;
            end
         end

         // resource: regr_ac_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_read_chnl_ready_mask
            if (rst == 1'b0) begin
               dma_read_chnl_ready_mask <= 1'd0;
            end
            else begin
               dma_read_chnl_ready_mask <= 1'd1;
            end
         end

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_6
         assign mac_Not_1U_1U_4_6_out1 = !dma_read_chnl_ready_mask;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_7
         assign mac_Not_1U_1U_4_7_out1 = !dma_read_chnl_sync_rcv_reset_ready_curr;

         // resource: mac_Or_1Ux1U_1U_4  instance: mac_Or_1Ux1U_1U_4_8
         assign mac_Or_1Ux1U_1U_4_8_out1 = mac_Not_1U_1U_4_6_out1 | dma_read_chnl_ready;

         // resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_9
         assign mac_And_1Ux1U_1U_4_9_out1 = dma_read_chnl_valid & dma_read_chnl_ready;

         // resource: mac_N_Muxb_1_2_5_4
         always @(dma_read_chnl_sync_rcv_reset_ready_curr or mac_Not_1U_1U_4_7_out1 or mac_And_1Ux1U_1U_4_9_out1)
          begin :mac_N_Muxb_1_2_5_4_10
            if (mac_And_1Ux1U_1U_4_9_out1) begin
               mac_N_Muxb_1_2_5_4_10_out1 = mac_Not_1U_1U_4_7_out1;
            end
            else begin
               mac_N_Muxb_1_2_5_4_10_out1 = dma_read_chnl_sync_rcv_reset_ready_curr;
            end
         end

         // resource: mac_N_MuxB_64_2_1_4
         always @(dma_read_chnl_data or dma_read_chnl_data_buf or mac_And_1Ux1U_1U_4_9_out1)
          begin :mac_N_MuxB_64_2_1_4_11
            if (mac_And_1Ux1U_1U_4_9_out1) begin
               mac_N_MuxB_64_2_1_4_11_out1 = dma_read_chnl_data;
            end
            else begin
               mac_N_MuxB_64_2_1_4_11_out1 = dma_read_chnl_data_buf;
            end
         end

         // instance: drive_dma_read_chnl_ready
         assign dma_read_chnl_ready = mac_Or_1Ux1U_1U_4_5_out1;

         // resource: mac_Xor_1Ux1U_1U_4  instance: mac_Xor_1Ux1U_1U_4_1
         assign mac_Xor_1Ux1U_1U_4_1_out1 = dma_read_chnl_sync_rcv_reset_ready_curr ^ dma_read_chnl_sync_rcv_reset_ready_prev;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_2
         assign mac_Not_1U_1U_4_2_out1 = !mac_Xor_1Ux1U_1U_4_1_out1;

         // resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_3
         assign mac_And_1Ux1U_1U_4_3_out1 = mac_Not_1U_1U_4_2_out1 & dma_read_chnl_sync_rcv_ready_flop;

         // resource: mac_Xor_1Ux1U_1U_4  instance: mac_Xor_1Ux1U_1U_4_4
         assign mac_Xor_1Ux1U_1U_4_4_out1 = dma_read_chnl_set_ready_curr ^ dma_read_chnl_sync_rcv_set_ready_prev;

         // resource: mac_Or_1Ux1U_1U_4  instance: mac_Or_1Ux1U_1U_4_5
         assign mac_Or_1Ux1U_1U_4_5_out1 = mac_Xor_1Ux1U_1U_4_4_out1 | mac_And_1Ux1U_1U_4_3_out1;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_12
         assign mac_Not_1U_1U_4_12_out1 = !dma_read_chnl_ready;

         // resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_13
         assign mac_And_1Ux1U_1U_4_13_out1 = mac_Not_1U_1U_4_12_out1 & dma_read_chnl_ready_mask;

         // resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_14
         assign mac_And_1Ux1U_1U_4_14_out1 = dma_read_chnl_valid & dma_read_chnl_ready;

         // resource: mac_Or_1Ux1U_1U_4  instance: mac_Or_1Ux1U_1U_4_15
         assign mac_Or_1Ux1U_1U_4_15_out1 = mac_And_1Ux1U_1U_4_14_out1 | mac_And_1Ux1U_1U_4_13_out1;

         // resource: regr_ac_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_write_chnl_sync_snd_set_valid_prev
            if (rst == 1'b0) begin
               dma_write_chnl_sync_snd_set_valid_prev <= 1'd0;
            end
            else begin
               dma_write_chnl_sync_snd_set_valid_prev <= dma_write_chnl_set_valid_curr;
            end
         end

         // resource: regr_ac_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_write_chnl_sync_snd_reset_valid_prev
            if (rst == 1'b0) begin
               dma_write_chnl_sync_snd_reset_valid_prev <= 1'd0;
            end
            else begin
               dma_write_chnl_sync_snd_reset_valid_prev <= dma_write_chnl_sync_snd_reset_valid_curr;
            end
         end

         // resource: regr_ac_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_write_chnl_sync_snd_reset_valid_curr
            if (rst == 1'b0) begin
               dma_write_chnl_sync_snd_reset_valid_curr <= 1'd0;
            end
            else begin
               dma_write_chnl_sync_snd_reset_valid_curr <= mac_N_Muxb_1_2_5_4_44_out1;
            end
         end

         // resource: regr_ac_1
         always @(posedge clk or negedge rst)
          begin :drive_dma_write_chnl_sync_snd_valid_flop
            if (rst == 1'b0) begin
               dma_write_chnl_sync_snd_valid_flop <= 1'd0;
            end
            else begin
               dma_write_chnl_sync_snd_valid_flop <= dma_write_chnl_valid;
            end
         end

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_43
         assign mac_Not_1U_1U_4_43_out1 = !dma_write_chnl_sync_snd_reset_valid_curr;

         // resource: mac_N_Muxb_1_2_5_4
         always @(dma_write_chnl_ready or dma_write_chnl_sync_snd_reset_valid_curr or mac_Not_1U_1U_4_43_out1)
          begin :mac_N_Muxb_1_2_5_4_44
            if (dma_write_chnl_ready) begin
               mac_N_Muxb_1_2_5_4_44_out1 = mac_Not_1U_1U_4_43_out1;
            end
            else begin
               mac_N_Muxb_1_2_5_4_44_out1 = dma_write_chnl_sync_snd_reset_valid_curr;
            end
         end

         // instance: drive_dma_write_chnl_valid
         assign dma_write_chnl_valid = mac_Or_1Ux1U_1U_4_42_out1;

         // resource: mac_Xor_1Ux1U_1U_4  instance: mac_Xor_1Ux1U_1U_4_38
         assign mac_Xor_1Ux1U_1U_4_38_out1 = dma_write_chnl_sync_snd_reset_valid_curr ^ dma_write_chnl_sync_snd_reset_valid_prev;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_39
         assign mac_Not_1U_1U_4_39_out1 = !mac_Xor_1Ux1U_1U_4_38_out1;

         // resource: mac_And_1Ux1U_1U_4  instance: mac_And_1Ux1U_1U_4_40
         assign mac_And_1Ux1U_1U_4_40_out1 = mac_Not_1U_1U_4_39_out1 & dma_write_chnl_sync_snd_valid_flop;

         // resource: mac_Xor_1Ux1U_1U_4  instance: mac_Xor_1Ux1U_1U_4_41
         assign mac_Xor_1Ux1U_1U_4_41_out1 = dma_write_chnl_set_valid_curr ^ dma_write_chnl_sync_snd_set_valid_prev;

         // resource: mac_Or_1Ux1U_1U_4  instance: mac_Or_1Ux1U_1U_4_42
         assign mac_Or_1Ux1U_1U_4_42_out1 = mac_Xor_1Ux1U_1U_4_41_out1 | mac_And_1Ux1U_1U_4_40_out1;

         // resource: mac_Not_1U_1U_4  instance: mac_Not_1U_1U_4_45
         assign mac_Not_1U_1U_4_45_out1 = !dma_write_chnl_valid;

         // resource: mac_Or_1Ux1U_1U_4  instance: mac_Or_1Ux1U_1U_4_46
         assign mac_Or_1Ux1U_1U_4_46_out1 = mac_Not_1U_1U_4_45_out1 | dma_write_chnl_ready;

         // resource: regr_en_ac_1
         always @(posedge clk)
          begin :drive_cfg_done
            if (rst == 1'b0) begin
               cfg_done <= 1'd0;
            end
            else begin
               case (global_state3) 

                  2'd1:                   begin
                     if (conf_done) begin
                        cfg_done <= 1'd1;
                     end
                  end
                  
               endcase

            end
         end

         // resource: regr_ac_2
         always @(posedge clk)
          begin :drive_global_state3
            if (rst == 1'b0) begin
               global_state3 <= 2'd0;
            end
            else begin
               global_state3 <= cfg_config_accelerator_next;
            end
         end

         // resource: mux_2bx3i2c
         always @(conf_done or global_state3)
          begin :drive_cfg_config_accelerator_next
            case (global_state3) 

               2'd1:                begin
                  if (conf_done) begin
                     cfg_config_accelerator_next = global_state3 + 2'd1;
                  end
                  else begin
                     cfg_config_accelerator_next = 2'd1;
                  end
               end
               
               2'd2:                begin
                  cfg_config_accelerator_next = 2'd2;
               end
               
               default:                begin
                  cfg_config_accelerator_next = global_state3 + 2'd1;
               end
               
            endcase

         end

         mac_plm_block_out_dma64 plm_out_pong_shared(
                                   .CLK( clk ),
                                   .WE0( plm_out_pong_shared_WE0_wire ),
                                   .CE0( plm_out_pong_shared_CE0_wire ),
                                   .D0( plm_out_pong_shared_D0_wire ),
                                   .A0( plm_out_pong_shared_A0_wire ),
                                   .WEM0( plm_out_pong_shared_WEM0_wire ),
                                   .CE1( plm_out_pong_shared_CE1_wire ),
                                   .Q1( plm_out_pong_shared_Q1_wire ),
                                   .A1( plm_out_pong_shared_A1_wire ),
                                   .CE2( plm_out_pong_shared_CE2_wire ),
                                   .Q2( plm_out_pong_shared_Q2_wire ),
                                   .A2( plm_out_pong_shared_A2_wire )
                                 );

         // instance: drive_plm_out_pong_shared_WEM0_wire
         assign plm_out_pong_shared_WEM0_wire = plm_out_pong_compute_kernel_WEM0;

         // instance: drive_plm_out_pong_shared_A0_wire
         assign plm_out_pong_shared_A0_wire = plm_out_pong_compute_kernel_A0;

         // instance: drive_plm_out_pong_shared_D0_wire
         assign plm_out_pong_shared_D0_wire = plm_out_pong_compute_kernel_D0;

         // instance: drive_plm_out_pong_shared_CE0_wire
         assign plm_out_pong_shared_CE0_wire = plm_out_pong_compute_kernel_CE0;

         // instance: drive_plm_out_pong_shared_WE0_wire
         assign plm_out_pong_shared_WE0_wire = plm_out_pong_compute_kernel_WE0;

         // instance: drive_plm_out_pong_shared_A2_wire
         assign plm_out_pong_shared_A2_wire = plm_out_pong_store_output_A2;

         // instance: drive_plm_out_pong_shared_CE2_wire
         assign plm_out_pong_shared_CE2_wire = plm_out_pong_store_output_CE2;

         // instance: drive_plm_out_pong_shared_A1_wire
         assign plm_out_pong_shared_A1_wire = plm_out_pong_store_output_A1;

         // instance: drive_plm_out_pong_shared_CE1_wire
         assign plm_out_pong_shared_CE1_wire = plm_out_pong_store_output_CE1;

         mac_plm_block_out_dma64 plm_out_ping_shared(
                                   .CLK( clk ),
                                   .WE0( plm_out_ping_shared_WE0_wire ),
                                   .CE0( plm_out_ping_shared_CE0_wire ),
                                   .D0( plm_out_ping_shared_D0_wire ),
                                   .A0( plm_out_ping_shared_A0_wire ),
                                   .WEM0( plm_out_ping_shared_WEM0_wire ),
                                   .CE1( plm_out_ping_shared_CE1_wire ),
                                   .Q1( plm_out_ping_shared_Q1_wire ),
                                   .A1( plm_out_ping_shared_A1_wire ),
                                   .CE2( plm_out_ping_shared_CE2_wire ),
                                   .Q2( plm_out_ping_shared_Q2_wire ),
                                   .A2( plm_out_ping_shared_A2_wire )
                                 );

         // instance: drive_plm_out_ping_shared_WEM0_wire
         assign plm_out_ping_shared_WEM0_wire = plm_out_ping_compute_kernel_WEM0;

         // instance: drive_plm_out_ping_shared_A0_wire
         assign plm_out_ping_shared_A0_wire = plm_out_ping_compute_kernel_A0;

         // instance: drive_plm_out_ping_shared_D0_wire
         assign plm_out_ping_shared_D0_wire = plm_out_ping_compute_kernel_D0;

         // instance: drive_plm_out_ping_shared_CE0_wire
         assign plm_out_ping_shared_CE0_wire = plm_out_ping_compute_kernel_CE0;

         // instance: drive_plm_out_ping_shared_WE0_wire
         assign plm_out_ping_shared_WE0_wire = plm_out_ping_compute_kernel_WE0;

         // instance: drive_plm_out_ping_shared_A2_wire
         assign plm_out_ping_shared_A2_wire = plm_out_ping_store_output_A2;

         // instance: drive_plm_out_ping_shared_CE2_wire
         assign plm_out_ping_shared_CE2_wire = plm_out_ping_store_output_CE2;

         // instance: drive_plm_out_ping_shared_A1_wire
         assign plm_out_ping_shared_A1_wire = plm_out_ping_store_output_A1;

         // instance: drive_plm_out_ping_shared_CE1_wire
         assign plm_out_ping_shared_CE1_wire = plm_out_ping_store_output_CE1;

         mac_plm_block_in_dma64 plm_in_pong_shared(
                                  .CLK( clk ),
                                  .WE0( plm_in_pong_shared_WE0_wire ),
                                  .CE0( plm_in_pong_shared_CE0_wire ),
                                  .D0( plm_in_pong_shared_D0_wire ),
                                  .A0( plm_in_pong_shared_A0_wire ),
                                  .WEM0( plm_in_pong_shared_WEM0_wire ),
                                  .WE1( plm_in_pong_shared_WE1_wire ),
                                  .CE1( plm_in_pong_shared_CE1_wire ),
                                  .D1( plm_in_pong_shared_D1_wire ),
                                  .A1( plm_in_pong_shared_A1_wire ),
                                  .WEM1( plm_in_pong_shared_WEM1_wire ),
                                  .CE2( plm_in_pong_shared_CE2_wire ),
                                  .Q2( plm_in_pong_shared_Q2_wire ),
                                  .A2( plm_in_pong_shared_A2_wire )
                                );

         // instance: drive_plm_in_pong_compute_kernel_Q2
         assign plm_in_pong_compute_kernel_Q2 = plm_in_pong_shared_Q2_wire;

         // instance: drive_plm_in_pong_shared_A2_wire
         assign plm_in_pong_shared_A2_wire = plm_in_pong_compute_kernel_A2;

         // instance: drive_plm_in_pong_shared_CE2_wire
         assign plm_in_pong_shared_CE2_wire = plm_in_pong_compute_kernel_CE2;

         // instance: drive_plm_in_pong_shared_WEM1_wire
         assign plm_in_pong_shared_WEM1_wire = plm_in_pong_load_input_WEM1;

         // instance: drive_plm_in_pong_shared_A1_wire
         assign plm_in_pong_shared_A1_wire = plm_in_pong_load_input_A1;

         // instance: drive_plm_in_pong_shared_D1_wire
         assign plm_in_pong_shared_D1_wire = plm_in_pong_load_input_D1;

         // instance: drive_plm_in_pong_shared_CE1_wire
         assign plm_in_pong_shared_CE1_wire = plm_in_pong_load_input_CE1;

         // instance: drive_plm_in_pong_shared_WE1_wire
         assign plm_in_pong_shared_WE1_wire = plm_in_pong_load_input_WE1;

         // instance: drive_plm_in_pong_shared_WEM0_wire
         assign plm_in_pong_shared_WEM0_wire = plm_in_pong_load_input_WEM0;

         // instance: drive_plm_in_pong_shared_A0_wire
         assign plm_in_pong_shared_A0_wire = plm_in_pong_load_input_A0;

         // instance: drive_plm_in_pong_shared_D0_wire
         assign plm_in_pong_shared_D0_wire = plm_in_pong_load_input_D0;

         // instance: drive_plm_in_pong_shared_CE0_wire
         assign plm_in_pong_shared_CE0_wire = plm_in_pong_load_input_CE0;

         // instance: drive_plm_in_pong_shared_WE0_wire
         assign plm_in_pong_shared_WE0_wire = plm_in_pong_load_input_WE0;

         mac_plm_block_in_dma64 plm_in_ping_shared(
                                  .CLK( clk ),
                                  .WE0( plm_in_ping_shared_WE0_wire ),
                                  .CE0( plm_in_ping_shared_CE0_wire ),
                                  .D0( plm_in_ping_shared_D0_wire ),
                                  .A0( plm_in_ping_shared_A0_wire ),
                                  .WEM0( plm_in_ping_shared_WEM0_wire ),
                                  .WE1( plm_in_ping_shared_WE1_wire ),
                                  .CE1( plm_in_ping_shared_CE1_wire ),
                                  .D1( plm_in_ping_shared_D1_wire ),
                                  .A1( plm_in_ping_shared_A1_wire ),
                                  .WEM1( plm_in_ping_shared_WEM1_wire ),
                                  .CE2( plm_in_ping_shared_CE2_wire ),
                                  .Q2( plm_in_ping_shared_Q2_wire ),
                                  .A2( plm_in_ping_shared_A2_wire )
                                );

         // instance: drive_plm_in_ping_compute_kernel_Q2
         assign plm_in_ping_compute_kernel_Q2 = plm_in_ping_shared_Q2_wire;

         // instance: drive_plm_in_ping_shared_A2_wire
         assign plm_in_ping_shared_A2_wire = plm_in_ping_compute_kernel_A2;

         // instance: drive_plm_in_ping_shared_CE2_wire
         assign plm_in_ping_shared_CE2_wire = plm_in_ping_compute_kernel_CE2;

         // instance: drive_plm_in_ping_shared_WEM1_wire
         assign plm_in_ping_shared_WEM1_wire = plm_in_ping_load_input_WEM1;

         // instance: drive_plm_in_ping_shared_A1_wire
         assign plm_in_ping_shared_A1_wire = plm_in_ping_load_input_A1;

         // instance: drive_plm_in_ping_shared_D1_wire
         assign plm_in_ping_shared_D1_wire = plm_in_ping_load_input_D1;

         // instance: drive_plm_in_ping_shared_CE1_wire
         assign plm_in_ping_shared_CE1_wire = plm_in_ping_load_input_CE1;

         // instance: drive_plm_in_ping_shared_WE1_wire
         assign plm_in_ping_shared_WE1_wire = plm_in_ping_load_input_WE1;

         // instance: drive_plm_in_ping_shared_WEM0_wire
         assign plm_in_ping_shared_WEM0_wire = plm_in_ping_load_input_WEM0;

         // instance: drive_plm_in_ping_shared_A0_wire
         assign plm_in_ping_shared_A0_wire = plm_in_ping_load_input_A0;

         // instance: drive_plm_in_ping_shared_D0_wire
         assign plm_in_ping_shared_D0_wire = plm_in_ping_load_input_D0;

         // instance: drive_plm_in_ping_shared_CE0_wire
         assign plm_in_ping_shared_CE0_wire = plm_in_ping_load_input_CE0;

         // instance: drive_plm_in_ping_shared_WE0_wire
         assign plm_in_ping_shared_WE0_wire = plm_in_ping_load_input_WE0;

         // instance: drive_dma_read_ctrl_data_index
         assign dma_read_ctrl_data_index = {1'b0, dma_read_ctrl_data_index_slice};

         // instance: drive_dma_read_ctrl_data_length
         assign dma_read_ctrl_data_length = {1'b0, dma_read_ctrl_data_length_slice};

         // instance: drive_dma_read_ctrl_data_size
         assign dma_read_ctrl_data_size = {{1'b0, dma_read_ctrl_data_size_slice}, 1'b0};

         // instance: drive_dma_write_ctrl_data_index
         assign dma_write_ctrl_data_index = {1'b0, dma_write_ctrl_data_index_slice};

         // instance: drive_dma_write_ctrl_data_length
         assign dma_write_ctrl_data_length = {1'b0, dma_write_ctrl_data_length_slice};

         // instance: drive_dma_write_ctrl_data_size
         assign dma_write_ctrl_data_size = {{1'b0, dma_write_ctrl_data_size_slice}, 1'b0};


endmodule

